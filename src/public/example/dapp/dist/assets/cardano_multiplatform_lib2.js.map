{"version":3,"file":"cardano_multiplatform_lib2.js","sources":["../../node_modules/lucid-cardano/esm/src/core/wasm_modules/cardano_multiplatform_lib_web/cardano_multiplatform_lib.js"],"sourcesContent":["let wasm;\nconst heap = new Array(32).fill(undefined);\nheap.push(undefined, null, true, false);\nfunction getObject(idx) {\n    return heap[idx];\n}\nlet heap_next = heap.length;\nfunction dropObject(idx) {\n    if (idx < 36)\n        return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\nlet cachedTextDecoder = new TextDecoder(\"utf-8\", {\n    ignoreBOM: true,\n    fatal: true,\n});\ncachedTextDecoder.decode();\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null ||\n        cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length)\n        heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n    heap[idx] = obj;\n    return idx;\n}\nlet WASM_VECTOR_LEN = 0;\nlet cachedTextEncoder = new TextEncoder(\"utf-8\");\nconst encodeString = (typeof cachedTextEncoder.encodeInto === \"function\"\n    ? function (arg, view) {\n        return cachedTextEncoder.encodeInto(arg, view);\n    }\n    : function (arg, view) {\n        const buf = cachedTextEncoder.encode(arg);\n        view.set(buf);\n        return {\n            read: arg.length,\n            written: buf.length,\n        };\n    });\nfunction passStringToWasm0(arg, malloc, realloc) {\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n    let len = arg.length;\n    let ptr = malloc(len);\n    const mem = getUint8Memory0();\n    let offset = 0;\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F)\n            break;\n        mem[ptr + offset] = code;\n    }\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n        offset += ret.written;\n    }\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\nlet cachegetInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachegetInt32Memory0 === null ||\n        cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory0;\n}\nfunction debugString(val) {\n    // primitive types\n    const type = typeof val;\n    if (type == \"number\" || type == \"boolean\" || val == null) {\n        return `${val}`;\n    }\n    if (type == \"string\") {\n        return `\"${val}\"`;\n    }\n    if (type == \"symbol\") {\n        const description = val.description;\n        if (description == null) {\n            return \"Symbol\";\n        }\n        else {\n            return `Symbol(${description})`;\n        }\n    }\n    if (type == \"function\") {\n        const name = val.name;\n        if (typeof name == \"string\" && name.length > 0) {\n            return `Function(${name})`;\n        }\n        else {\n            return \"Function\";\n        }\n    }\n    // objects\n    if (Array.isArray(val)) {\n        const length = val.length;\n        let debug = \"[\";\n        if (length > 0) {\n            debug += debugString(val[0]);\n        }\n        for (let i = 1; i < length; i++) {\n            debug += \", \" + debugString(val[i]);\n        }\n        debug += \"]\";\n        return debug;\n    }\n    // Test for built-in\n    const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n    let className;\n    if (builtInMatches.length > 1) {\n        className = builtInMatches[1];\n    }\n    else {\n        // Failed to match the standard '[object ClassName]'\n        return toString.call(val);\n    }\n    if (className == \"Object\") {\n        // we're a user defined class or Object\n        // JSON.stringify avoids problems with cycles, and is generally much\n        // easier than looping through ownProperties of `val`.\n        try {\n            return \"Object(\" + JSON.stringify(val) + \")\";\n        }\n        catch (_) {\n            return \"Object\";\n        }\n    }\n    // errors\n    if (val instanceof Error) {\n        return `${val.name}: ${val.message}\\n${val.stack}`;\n    }\n    // TODO we could test for more things here, like `Set`s and `Map`s.\n    return className;\n}\nfunction makeMutClosure(arg0, arg1, dtor, f) {\n    const state = { a: arg0, b: arg1, cnt: 1, dtor };\n    const real = (...args) => {\n        // First up with a closure we increment the internal reference\n        // count. This ensures that the Rust closure environment won't\n        // be deallocated while we're invoking it.\n        state.cnt++;\n        const a = state.a;\n        state.a = 0;\n        try {\n            return f(a, state.b, ...args);\n        }\n        finally {\n            if (--state.cnt === 0) {\n                wasm.__wbindgen_export_2.get(state.dtor)(a, state.b);\n            }\n            else {\n                state.a = a;\n            }\n        }\n    };\n    real.original = state;\n    return real;\n}\nfunction __wbg_adapter_32(arg0, arg1, arg2) {\n    wasm\n        ._dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h0ccbd9467399eb6b(arg0, arg1, addHeapObject(arg2));\n}\nfunction getArrayU8FromWasm0(ptr, len) {\n    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1);\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n    return instance.ptr;\n}\n/**\n * @param {Uint8Array} bytes\n * @returns {TransactionMetadatum}\n */\nexport function encode_arbitrary_bytes_as_metadatum(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.encode_arbitrary_bytes_as_metadatum(ptr0, len0);\n    return TransactionMetadatum.__wrap(ret);\n}\n/**\n * @param {TransactionMetadatum} metadata\n * @returns {Uint8Array}\n */\nexport function decode_arbitrary_bytes_from_metadatum(metadata) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        _assertClass(metadata, TransactionMetadatum);\n        wasm.decode_arbitrary_bytes_from_metadatum(retptr, metadata.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n/**\n * @param {string} json\n * @param {number} schema\n * @returns {TransactionMetadatum}\n */\nexport function encode_json_str_to_metadatum(json, schema) {\n    var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.encode_json_str_to_metadatum(ptr0, len0, schema);\n    return TransactionMetadatum.__wrap(ret);\n}\n/**\n * @param {TransactionMetadatum} metadatum\n * @param {number} schema\n * @returns {string}\n */\nexport function decode_metadatum_to_json_str(metadatum, schema) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        _assertClass(metadatum, TransactionMetadatum);\n        wasm.decode_metadatum_to_json_str(retptr, metadatum.ptr, schema);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n    }\n    finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(r0, r1);\n    }\n}\nlet cachegetUint32Memory0 = null;\nfunction getUint32Memory0() {\n    if (cachegetUint32Memory0 === null ||\n        cachegetUint32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint32Memory0 = new Uint32Array(wasm.memory.buffer);\n    }\n    return cachegetUint32Memory0;\n}\nfunction getArrayU32FromWasm0(ptr, len) {\n    return getUint32Memory0().subarray(ptr / 4, ptr / 4 + len);\n}\n/**\n * @param {string} password\n * @param {string} salt\n * @param {string} nonce\n * @param {string} data\n * @returns {string}\n */\nexport function encrypt_with_password(password, salt, nonce, data) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        var ptr0 = passStringToWasm0(password, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = passStringToWasm0(salt, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        var ptr2 = passStringToWasm0(nonce, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len2 = WASM_VECTOR_LEN;\n        var ptr3 = passStringToWasm0(data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len3 = WASM_VECTOR_LEN;\n        wasm.encrypt_with_password(retptr, ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n    }\n    finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(r0, r1);\n    }\n}\n/**\n * @param {string} password\n * @param {string} data\n * @returns {string}\n */\nexport function decrypt_with_password(password, data) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        var ptr0 = passStringToWasm0(password, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = passStringToWasm0(data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        wasm.decrypt_with_password(retptr, ptr0, len0, ptr1, len1);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n    }\n    finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(r0, r1);\n    }\n}\n/**\n * @param {Transaction} tx\n * @param {LinearFee} linear_fee\n * @param {ExUnitPrices} ex_unit_prices\n * @returns {BigNum}\n */\nexport function min_fee(tx, linear_fee, ex_unit_prices) {\n    _assertClass(tx, Transaction);\n    _assertClass(linear_fee, LinearFee);\n    _assertClass(ex_unit_prices, ExUnitPrices);\n    var ret = wasm.min_fee(tx.ptr, linear_fee.ptr, ex_unit_prices.ptr);\n    return BigNum.__wrap(ret);\n}\n/**\n * @param {PlutusList} params\n * @param {PlutusScript} plutus_script\n * @returns {PlutusScript}\n */\nexport function apply_params_to_plutus_script(params, plutus_script) {\n    _assertClass(params, PlutusList);\n    _assertClass(plutus_script, PlutusScript);\n    var ptr0 = plutus_script.ptr;\n    plutus_script.ptr = 0;\n    var ret = wasm.apply_params_to_plutus_script(params.ptr, ptr0);\n    return PlutusScript.__wrap(ret);\n}\n/**\n * @param {TransactionHash} tx_body_hash\n * @param {ByronAddress} addr\n * @param {LegacyDaedalusPrivateKey} key\n * @returns {BootstrapWitness}\n */\nexport function make_daedalus_bootstrap_witness(tx_body_hash, addr, key) {\n    _assertClass(tx_body_hash, TransactionHash);\n    _assertClass(addr, ByronAddress);\n    _assertClass(key, LegacyDaedalusPrivateKey);\n    var ret = wasm.make_daedalus_bootstrap_witness(tx_body_hash.ptr, addr.ptr, key.ptr);\n    return BootstrapWitness.__wrap(ret);\n}\n/**\n * @param {TransactionHash} tx_body_hash\n * @param {ByronAddress} addr\n * @param {Bip32PrivateKey} key\n * @returns {BootstrapWitness}\n */\nexport function make_icarus_bootstrap_witness(tx_body_hash, addr, key) {\n    _assertClass(tx_body_hash, TransactionHash);\n    _assertClass(addr, ByronAddress);\n    _assertClass(key, Bip32PrivateKey);\n    var ret = wasm.make_icarus_bootstrap_witness(tx_body_hash.ptr, addr.ptr, key.ptr);\n    return BootstrapWitness.__wrap(ret);\n}\n/**\n * @param {TransactionHash} tx_body_hash\n * @param {PrivateKey} sk\n * @returns {Vkeywitness}\n */\nexport function make_vkey_witness(tx_body_hash, sk) {\n    _assertClass(tx_body_hash, TransactionHash);\n    _assertClass(sk, PrivateKey);\n    var ret = wasm.make_vkey_witness(tx_body_hash.ptr, sk.ptr);\n    return Vkeywitness.__wrap(ret);\n}\n/**\n * @param {AuxiliaryData} auxiliary_data\n * @returns {AuxiliaryDataHash}\n */\nexport function hash_auxiliary_data(auxiliary_data) {\n    _assertClass(auxiliary_data, AuxiliaryData);\n    var ret = wasm.hash_auxiliary_data(auxiliary_data.ptr);\n    return AuxiliaryDataHash.__wrap(ret);\n}\n/**\n * @param {TransactionBody} tx_body\n * @returns {TransactionHash}\n */\nexport function hash_transaction(tx_body) {\n    _assertClass(tx_body, TransactionBody);\n    var ret = wasm.hash_transaction(tx_body.ptr);\n    return TransactionHash.__wrap(ret);\n}\n/**\n * @param {PlutusData} plutus_data\n * @returns {DataHash}\n */\nexport function hash_plutus_data(plutus_data) {\n    _assertClass(plutus_data, PlutusData);\n    var ret = wasm.hash_plutus_data(plutus_data.ptr);\n    return DataHash.__wrap(ret);\n}\n/**\n * @param {Uint8Array} data\n * @returns {Uint8Array}\n */\nexport function hash_blake2b256(data) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        var ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.hash_blake2b256(retptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v1 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v1;\n    }\n    finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n/**\n * @param {Uint8Array} data\n * @returns {Uint8Array}\n */\nexport function hash_blake2b224(data) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        var ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.hash_blake2b224(retptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v1 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v1;\n    }\n    finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n/**\n * @param {Redeemers} redeemers\n * @param {Costmdls} cost_models\n * @param {PlutusList | undefined} datums\n * @returns {ScriptDataHash}\n */\nexport function hash_script_data(redeemers, cost_models, datums) {\n    _assertClass(redeemers, Redeemers);\n    _assertClass(cost_models, Costmdls);\n    let ptr0 = 0;\n    if (!isLikeNone(datums)) {\n        _assertClass(datums, PlutusList);\n        ptr0 = datums.ptr;\n        datums.ptr = 0;\n    }\n    var ret = wasm.hash_script_data(redeemers.ptr, cost_models.ptr, ptr0);\n    return ScriptDataHash.__wrap(ret);\n}\n/**\n * @param {TransactionBody} txbody\n * @param {BigNum} pool_deposit\n * @param {BigNum} key_deposit\n * @returns {Value}\n */\nexport function get_implicit_input(txbody, pool_deposit, key_deposit) {\n    _assertClass(txbody, TransactionBody);\n    _assertClass(pool_deposit, BigNum);\n    _assertClass(key_deposit, BigNum);\n    var ret = wasm.get_implicit_input(txbody.ptr, pool_deposit.ptr, key_deposit.ptr);\n    return Value.__wrap(ret);\n}\n/**\n * @param {TransactionBody} txbody\n * @param {BigNum} pool_deposit\n * @param {BigNum} key_deposit\n * @returns {BigNum}\n */\nexport function get_deposit(txbody, pool_deposit, key_deposit) {\n    _assertClass(txbody, TransactionBody);\n    _assertClass(pool_deposit, BigNum);\n    _assertClass(key_deposit, BigNum);\n    var ret = wasm.get_deposit(txbody.ptr, pool_deposit.ptr, key_deposit.ptr);\n    return BigNum.__wrap(ret);\n}\n/**\n * @param {TransactionOutput} output\n * @param {BigNum} coins_per_utxo_byte\n * @returns {BigNum}\n */\nexport function min_ada_required(output, coins_per_utxo_byte) {\n    _assertClass(output, TransactionOutput);\n    _assertClass(coins_per_utxo_byte, BigNum);\n    var ret = wasm.min_ada_required(output.ptr, coins_per_utxo_byte.ptr);\n    return BigNum.__wrap(ret);\n}\n/**\n * Receives a script JSON string\n * and returns a NativeScript.\n * Cardano Wallet and Node styles are supported.\n *\n * * wallet: https://github.com/input-output-hk/cardano-wallet/blob/master/specifications/api/swagger.yaml\n * * node: https://github.com/input-output-hk/cardano-node/blob/master/doc/reference/simple-scripts.md\n *\n * self_xpub is expected to be a Bip32PublicKey as hex-encoded bytes\n * @param {string} json\n * @param {string} self_xpub\n * @param {number} schema\n * @returns {NativeScript}\n */\nexport function encode_json_str_to_native_script(json, self_xpub, schema) {\n    var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ptr1 = passStringToWasm0(self_xpub, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len1 = WASM_VECTOR_LEN;\n    var ret = wasm.encode_json_str_to_native_script(ptr0, len0, ptr1, len1, schema);\n    return NativeScript.__wrap(ret);\n}\n/**\n * @param {string} json\n * @param {number} schema\n * @returns {PlutusData}\n */\nexport function encode_json_str_to_plutus_datum(json, schema) {\n    var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.encode_json_str_to_plutus_datum(ptr0, len0, schema);\n    return PlutusData.__wrap(ret);\n}\n/**\n * @param {PlutusData} datum\n * @param {number} schema\n * @returns {string}\n */\nexport function decode_plutus_datum_to_json_str(datum, schema) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        _assertClass(datum, PlutusData);\n        wasm.decode_plutus_datum_to_json_str(retptr, datum.ptr, schema);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n    }\n    finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(r0, r1);\n    }\n}\nfunction handleError(f, args) {\n    try {\n        return f.apply(this, args);\n    }\n    catch (e) {\n        wasm.__wbindgen_exn_store(addHeapObject(e));\n    }\n}\nfunction __wbg_adapter_1367(arg0, arg1, arg2, arg3) {\n    wasm.wasm_bindgen__convert__closures__invoke2_mut__h6a929cf27a4d54a4(arg0, arg1, addHeapObject(arg2), addHeapObject(arg3));\n}\n/** */\nexport const CertificateKind = Object.freeze({\n    StakeRegistration: 0,\n    \"0\": \"StakeRegistration\",\n    StakeDeregistration: 1,\n    \"1\": \"StakeDeregistration\",\n    StakeDelegation: 2,\n    \"2\": \"StakeDelegation\",\n    PoolRegistration: 3,\n    \"3\": \"PoolRegistration\",\n    PoolRetirement: 4,\n    \"4\": \"PoolRetirement\",\n    GenesisKeyDelegation: 5,\n    \"5\": \"GenesisKeyDelegation\",\n    MoveInstantaneousRewardsCert: 6,\n    \"6\": \"MoveInstantaneousRewardsCert\",\n});\n/** */\nexport const MIRPot = Object.freeze({\n    Reserves: 0,\n    \"0\": \"Reserves\",\n    Treasury: 1,\n    \"1\": \"Treasury\",\n});\n/** */\nexport const MIRKind = Object.freeze({\n    ToOtherPot: 0,\n    \"0\": \"ToOtherPot\",\n    ToStakeCredentials: 1,\n    \"1\": \"ToStakeCredentials\",\n});\n/** */\nexport const RelayKind = Object.freeze({\n    SingleHostAddr: 0,\n    \"0\": \"SingleHostAddr\",\n    SingleHostName: 1,\n    \"1\": \"SingleHostName\",\n    MultiHostName: 2,\n    \"2\": \"MultiHostName\",\n});\n/** */\nexport const NativeScriptKind = Object.freeze({\n    ScriptPubkey: 0,\n    \"0\": \"ScriptPubkey\",\n    ScriptAll: 1,\n    \"1\": \"ScriptAll\",\n    ScriptAny: 2,\n    \"2\": \"ScriptAny\",\n    ScriptNOfK: 3,\n    \"3\": \"ScriptNOfK\",\n    TimelockStart: 4,\n    \"4\": \"TimelockStart\",\n    TimelockExpiry: 5,\n    \"5\": \"TimelockExpiry\",\n});\n/** */\nexport const NetworkIdKind = Object.freeze({\n    Testnet: 0,\n    \"0\": \"Testnet\",\n    Mainnet: 1,\n    \"1\": \"Mainnet\",\n});\n/** */\nexport const TransactionMetadatumKind = Object.freeze({\n    MetadataMap: 0,\n    \"0\": \"MetadataMap\",\n    MetadataList: 1,\n    \"1\": \"MetadataList\",\n    Int: 2,\n    \"2\": \"Int\",\n    Bytes: 3,\n    \"3\": \"Bytes\",\n    Text: 4,\n    \"4\": \"Text\",\n});\n/** */\nexport const MetadataJsonSchema = Object.freeze({\n    NoConversions: 0,\n    \"0\": \"NoConversions\",\n    BasicConversions: 1,\n    \"1\": \"BasicConversions\",\n    DetailedSchema: 2,\n    \"2\": \"DetailedSchema\",\n});\n/** */\nexport const StakeCredKind = Object.freeze({\n    Key: 0,\n    \"0\": \"Key\",\n    Script: 1,\n    \"1\": \"Script\",\n});\n/** */\nexport const ScriptWitnessKind = Object.freeze({\n    NativeWitness: 0,\n    \"0\": \"NativeWitness\",\n    PlutusWitness: 1,\n    \"1\": \"PlutusWitness\",\n});\n/**\n * Each new language uses a different namespace for hashing its script\n * This is because you could have a language where the same bytes have different semantics\n * So this avoids scripts in different languages mapping to the same hash\n * Note that the enum value here is different than the enum value for deciding the cost model of a script\n * https://github.com/input-output-hk/cardano-ledger/blob/9c3b4737b13b30f71529e76c5330f403165e28a6/eras/alonzo/impl/src/Cardano/Ledger/Alonzo.hs#L127\n */\nexport const ScriptHashNamespace = Object.freeze({\n    NativeScript: 0,\n    \"0\": \"NativeScript\",\n    PlutusV1: 1,\n    \"1\": \"PlutusV1\",\n    PlutusV2: 2,\n    \"2\": \"PlutusV2\",\n});\n/**\n * Used to choose the schema for a script JSON string\n */\nexport const ScriptSchema = Object.freeze({\n    Wallet: 0,\n    \"0\": \"Wallet\",\n    Node: 1,\n    \"1\": \"Node\",\n});\n/** */\nexport const LanguageKind = Object.freeze({\n    PlutusV1: 0,\n    \"0\": \"PlutusV1\",\n    PlutusV2: 1,\n    \"1\": \"PlutusV2\",\n});\n/** */\nexport const PlutusDataKind = Object.freeze({\n    ConstrPlutusData: 0,\n    \"0\": \"ConstrPlutusData\",\n    Map: 1,\n    \"1\": \"Map\",\n    List: 2,\n    \"2\": \"List\",\n    Integer: 3,\n    \"3\": \"Integer\",\n    Bytes: 4,\n    \"4\": \"Bytes\",\n});\n/** */\nexport const RedeemerTagKind = Object.freeze({\n    Spend: 0,\n    \"0\": \"Spend\",\n    Mint: 1,\n    \"1\": \"Mint\",\n    Cert: 2,\n    \"2\": \"Cert\",\n    Reward: 3,\n    \"3\": \"Reward\",\n});\n/**\n * JSON <-> PlutusData conversion schemas.\n * Follows ScriptDataJsonSchema in cardano-cli defined at:\n * https://github.com/input-output-hk/cardano-node/blob/master/cardano-api/src/Cardano/Api/ScriptData.hs#L254\n *\n * All methods here have the following restrictions due to limitations on dependencies:\n * * JSON numbers above u64::MAX (positive) or below i64::MIN (negative) will throw errors\n * * Hex strings for bytes don't accept odd-length (half-byte) strings.\n *      cardano-cli seems to support these however but it seems to be different than just 0-padding\n *      on either side when tested so proceed with caution\n */\nexport const PlutusDatumSchema = Object.freeze({\n    /**\n     * ScriptDataJsonNoSchema in cardano-node.\n     *\n     * This is the format used by --script-data-value in cardano-cli\n     * This tries to accept most JSON but does not support the full spectrum of Plutus datums.\n     * From JSON:\n     * * null/true/false/floats NOT supported\n     * * strings starting with 0x are treated as hex bytes. All other strings are encoded as their utf8 bytes.\n     * To JSON:\n     * * ConstrPlutusData not supported in ANY FORM (neither keys nor values)\n     * * Lists not supported in keys\n     * * Maps not supported in keys\n     */\n    BasicConversions: 0,\n    \"0\": \"BasicConversions\",\n    /**\n     * ScriptDataJsonDetailedSchema in cardano-node.\n     *\n     * This is the format used by --script-data-file in cardano-cli\n     * This covers almost all (only minor exceptions) Plutus datums, but the JSON must conform to a strict schema.\n     * The schema specifies that ALL keys and ALL values must be contained in a JSON map with 2 cases:\n     * 1. For ConstrPlutusData there must be two fields \"constructor\" contianing a number and \"fields\" containing its fields\n     *    e.g. { \"constructor\": 2, \"fields\": [{\"int\": 2}, {\"list\": [{\"bytes\": \"CAFEF00D\"}]}]}\n     * 2. For all other cases there must be only one field named \"int\", \"bytes\", \"list\" or \"map\"\n     *    Integer's value is a JSON number e.g. {\"int\": 100}\n     *    Bytes' value is a hex string representing the bytes WITHOUT any prefix e.g. {\"bytes\": \"CAFEF00D\"}\n     *    Lists' value is a JSON list of its elements encoded via the same schema e.g. {\"list\": [{\"bytes\": \"CAFEF00D\"}]}\n     *    Maps' value is a JSON list of objects, one for each key-value pair in the map, with keys \"k\" and \"v\"\n     *          respectively with their values being the plutus datum encoded via this same schema\n     *          e.g. {\"map\": [\n     *              {\"k\": {\"int\": 2}, \"v\": {\"int\": 5}},\n     *              {\"k\": {\"map\": [{\"k\": {\"list\": [{\"int\": 1}]}, \"v\": {\"bytes\": \"FF03\"}}]}, \"v\": {\"list\": []}}\n     *          ]}\n     * From JSON:\n     * * null/true/false/floats NOT supported\n     * * the JSON must conform to a very specific schema\n     * To JSON:\n     * * all Plutus datums should be fully supported outside of the integer range limitations outlined above.\n     */\n    DetailedSchema: 1,\n    \"1\": \"DetailedSchema\",\n});\n/** */\nexport const ScriptKind = Object.freeze({\n    NativeScript: 0,\n    \"0\": \"NativeScript\",\n    PlutusScriptV1: 1,\n    \"1\": \"PlutusScriptV1\",\n    PlutusScriptV2: 2,\n    \"2\": \"PlutusScriptV2\",\n});\n/** */\nexport const DatumKind = Object.freeze({\n    Hash: 0,\n    \"0\": \"Hash\",\n    Data: 1,\n    \"1\": \"Data\",\n});\n/** */\nexport class Address {\n    static __wrap(ptr) {\n        const obj = Object.create(Address.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_address_free(ptr);\n    }\n    /**\n     * @param {Uint8Array} data\n     * @returns {Address}\n     */\n    static from_bytes(data) {\n        var ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.address_from_bytes(ptr0, len0);\n        return Address.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.address_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.address_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {Address}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.address_from_json(ptr0, len0);\n        return Address.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.address_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string | undefined} prefix\n     * @returns {string}\n     */\n    to_bech32(prefix) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = isLikeNone(prefix) ? 0 : passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.address_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} bech_str\n     * @returns {Address}\n     */\n    static from_bech32(bech_str) {\n        var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.address_from_bech32(ptr0, len0);\n        return Address.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    network_id() {\n        var ret = wasm.address_network_id(this.ptr);\n        return ret;\n    }\n    /**\n     * @returns {ByronAddress | undefined}\n     */\n    as_byron() {\n        var ret = wasm.address_as_byron(this.ptr);\n        return ret === 0 ? undefined : ByronAddress.__wrap(ret);\n    }\n    /**\n     * @returns {RewardAddress | undefined}\n     */\n    as_reward() {\n        var ret = wasm.address_as_reward(this.ptr);\n        return ret === 0 ? undefined : RewardAddress.__wrap(ret);\n    }\n    /**\n     * @returns {PointerAddress | undefined}\n     */\n    as_pointer() {\n        var ret = wasm.address_as_pointer(this.ptr);\n        return ret === 0 ? undefined : PointerAddress.__wrap(ret);\n    }\n    /**\n     * @returns {EnterpriseAddress | undefined}\n     */\n    as_enterprise() {\n        var ret = wasm.address_as_enterprise(this.ptr);\n        return ret === 0 ? undefined : EnterpriseAddress.__wrap(ret);\n    }\n    /**\n     * @returns {BaseAddress | undefined}\n     */\n    as_base() {\n        var ret = wasm.address_as_base(this.ptr);\n        return ret === 0 ? undefined : BaseAddress.__wrap(ret);\n    }\n}\n/** */\nexport class AssetName {\n    static __wrap(ptr) {\n        const obj = Object.create(AssetName.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_assetname_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assetname_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {AssetName}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.assetname_from_bytes(ptr0, len0);\n        return AssetName.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assetname_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.assetname_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {AssetName}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.assetname_from_json(ptr0, len0);\n        return AssetName.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} name\n     * @returns {AssetName}\n     */\n    static new(name) {\n        var ptr0 = passArray8ToWasm0(name, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.assetname_new(ptr0, len0);\n        return AssetName.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    name() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assetname_name(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/** */\nexport class AssetNames {\n    static __wrap(ptr) {\n        const obj = Object.create(AssetNames.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_assetnames_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assetnames_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {AssetNames}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.assetnames_from_bytes(ptr0, len0);\n        return AssetNames.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assetnames_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.assetnames_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {AssetNames}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.assetnames_from_json(ptr0, len0);\n        return AssetNames.__wrap(ret);\n    }\n    /**\n     * @returns {AssetNames}\n     */\n    static new() {\n        var ret = wasm.assetnames_new();\n        return AssetNames.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {AssetName}\n     */\n    get(index) {\n        var ret = wasm.assetnames_get(this.ptr, index);\n        return AssetName.__wrap(ret);\n    }\n    /**\n     * @param {AssetName} elem\n     */\n    add(elem) {\n        _assertClass(elem, AssetName);\n        wasm.assetnames_add(this.ptr, elem.ptr);\n    }\n}\n/** */\nexport class Assets {\n    static __wrap(ptr) {\n        const obj = Object.create(Assets.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_assets_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assets_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Assets}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.assets_from_bytes(ptr0, len0);\n        return Assets.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assets_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.assets_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {Assets}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.assets_from_json(ptr0, len0);\n        return Assets.__wrap(ret);\n    }\n    /**\n     * @returns {Assets}\n     */\n    static new() {\n        var ret = wasm.assets_new();\n        return Assets.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.assets_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {AssetName} key\n     * @param {BigNum} value\n     * @returns {BigNum | undefined}\n     */\n    insert(key, value) {\n        _assertClass(key, AssetName);\n        _assertClass(value, BigNum);\n        var ret = wasm.assets_insert(this.ptr, key.ptr, value.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * @param {AssetName} key\n     * @returns {BigNum | undefined}\n     */\n    get(key) {\n        _assertClass(key, AssetName);\n        var ret = wasm.assets_get(this.ptr, key.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {AssetNames}\n     */\n    keys() {\n        var ret = wasm.assets_keys(this.ptr);\n        return AssetNames.__wrap(ret);\n    }\n}\n/** */\nexport class AuxiliaryData {\n    static __wrap(ptr) {\n        const obj = Object.create(AuxiliaryData.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_auxiliarydata_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.auxiliarydata_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {AuxiliaryData}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.auxiliarydata_from_bytes(ptr0, len0);\n        return AuxiliaryData.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.auxiliarydata_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.auxiliarydata_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {AuxiliaryData}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.auxiliarydata_from_json(ptr0, len0);\n        return AuxiliaryData.__wrap(ret);\n    }\n    /**\n     * @returns {AuxiliaryData}\n     */\n    static new() {\n        var ret = wasm.auxiliarydata_new();\n        return AuxiliaryData.__wrap(ret);\n    }\n    /**\n     * @returns {GeneralTransactionMetadata | undefined}\n     */\n    metadata() {\n        var ret = wasm.auxiliarydata_metadata(this.ptr);\n        return ret === 0 ? undefined : GeneralTransactionMetadata.__wrap(ret);\n    }\n    /**\n     * @param {GeneralTransactionMetadata} metadata\n     */\n    set_metadata(metadata) {\n        _assertClass(metadata, GeneralTransactionMetadata);\n        wasm.auxiliarydata_set_metadata(this.ptr, metadata.ptr);\n    }\n    /**\n     * @returns {NativeScripts | undefined}\n     */\n    native_scripts() {\n        var ret = wasm.auxiliarydata_native_scripts(this.ptr);\n        return ret === 0 ? undefined : NativeScripts.__wrap(ret);\n    }\n    /**\n     * @param {NativeScripts} native_scripts\n     */\n    set_native_scripts(native_scripts) {\n        _assertClass(native_scripts, NativeScripts);\n        wasm.auxiliarydata_set_native_scripts(this.ptr, native_scripts.ptr);\n    }\n    /**\n     * @returns {PlutusScripts | undefined}\n     */\n    plutus_scripts() {\n        var ret = wasm.auxiliarydata_plutus_scripts(this.ptr);\n        return ret === 0 ? undefined : PlutusScripts.__wrap(ret);\n    }\n    /**\n     * @param {PlutusScripts} plutus_scripts\n     */\n    set_plutus_scripts(plutus_scripts) {\n        _assertClass(plutus_scripts, PlutusScripts);\n        wasm.auxiliarydata_set_plutus_scripts(this.ptr, plutus_scripts.ptr);\n    }\n    /**\n     * @param {PlutusScripts} plutus_scripts\n     */\n    set_plutus_v2_scripts(plutus_scripts) {\n        _assertClass(plutus_scripts, PlutusScripts);\n        wasm.auxiliarydata_set_plutus_v2_scripts(this.ptr, plutus_scripts.ptr);\n    }\n}\n/** */\nexport class AuxiliaryDataHash {\n    static __wrap(ptr) {\n        const obj = Object.create(AuxiliaryDataHash.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_auxiliarydatahash_free(ptr);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {AuxiliaryDataHash}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.auxiliarydatahash_from_bytes(ptr0, len0);\n        return AuxiliaryDataHash.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.auxiliarydatahash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} prefix\n     * @returns {string}\n     */\n    to_bech32(prefix) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.auxiliarydatahash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} bech_str\n     * @returns {AuxiliaryDataHash}\n     */\n    static from_bech32(bech_str) {\n        var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.auxiliarydatahash_from_bech32(ptr0, len0);\n        return AuxiliaryDataHash.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_hex() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.auxiliarydatahash_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} hex\n     * @returns {AuxiliaryDataHash}\n     */\n    static from_hex(hex) {\n        var ptr0 = passStringToWasm0(hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.auxiliarydatahash_from_hex(ptr0, len0);\n        return AuxiliaryDataHash.__wrap(ret);\n    }\n}\n/** */\nexport class AuxiliaryDataSet {\n    static __wrap(ptr) {\n        const obj = Object.create(AuxiliaryDataSet.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_auxiliarydataset_free(ptr);\n    }\n    /**\n     * @returns {AuxiliaryDataSet}\n     */\n    static new() {\n        var ret = wasm.auxiliarydataset_new();\n        return AuxiliaryDataSet.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.auxiliarydataset_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {BigNum} tx_index\n     * @param {AuxiliaryData} data\n     * @returns {AuxiliaryData | undefined}\n     */\n    insert(tx_index, data) {\n        _assertClass(tx_index, BigNum);\n        _assertClass(data, AuxiliaryData);\n        var ret = wasm.auxiliarydataset_insert(this.ptr, tx_index.ptr, data.ptr);\n        return ret === 0 ? undefined : AuxiliaryData.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} tx_index\n     * @returns {AuxiliaryData | undefined}\n     */\n    get(tx_index) {\n        _assertClass(tx_index, BigNum);\n        var ret = wasm.auxiliarydataset_get(this.ptr, tx_index.ptr);\n        return ret === 0 ? undefined : AuxiliaryData.__wrap(ret);\n    }\n    /**\n     * @returns {TransactionIndexes}\n     */\n    indices() {\n        var ret = wasm.auxiliarydataset_indices(this.ptr);\n        return TransactionIndexes.__wrap(ret);\n    }\n}\n/** */\nexport class BaseAddress {\n    static __wrap(ptr) {\n        const obj = Object.create(BaseAddress.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_baseaddress_free(ptr);\n    }\n    /**\n     * @param {number} network\n     * @param {StakeCredential} payment\n     * @param {StakeCredential} stake\n     * @returns {BaseAddress}\n     */\n    static new(network, payment, stake) {\n        _assertClass(payment, StakeCredential);\n        _assertClass(stake, StakeCredential);\n        var ret = wasm.baseaddress_new(network, payment.ptr, stake.ptr);\n        return BaseAddress.__wrap(ret);\n    }\n    /**\n     * @returns {StakeCredential}\n     */\n    payment_cred() {\n        var ret = wasm.baseaddress_payment_cred(this.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n     * @returns {StakeCredential}\n     */\n    stake_cred() {\n        var ret = wasm.baseaddress_stake_cred(this.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n     * @returns {Address}\n     */\n    to_address() {\n        var ret = wasm.baseaddress_to_address(this.ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n     * @param {Address} addr\n     * @returns {BaseAddress | undefined}\n     */\n    static from_address(addr) {\n        _assertClass(addr, Address);\n        var ret = wasm.baseaddress_from_address(addr.ptr);\n        return ret === 0 ? undefined : BaseAddress.__wrap(ret);\n    }\n}\n/** */\nexport class BigInt {\n    static __wrap(ptr) {\n        const obj = Object.create(BigInt.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_bigint_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bigint_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {BigInt}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.bigint_from_bytes(ptr0, len0);\n        return BigInt.__wrap(ret);\n    }\n    /**\n     * @returns {BigNum | undefined}\n     */\n    as_u64() {\n        var ret = wasm.bigint_as_u64(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {Int | undefined}\n     */\n    as_int() {\n        var ret = wasm.bigint_as_int(this.ptr);\n        return ret === 0 ? undefined : Int.__wrap(ret);\n    }\n    /**\n     * @param {string} text\n     * @returns {BigInt}\n     */\n    static from_str(text) {\n        var ptr0 = passStringToWasm0(text, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.bigint_from_str(ptr0, len0);\n        return BigInt.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_str() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bigint_to_str(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n}\n/** */\nexport class BigNum {\n    static __wrap(ptr) {\n        const obj = Object.create(BigNum.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_bignum_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bignum_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {BigNum}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.bignum_from_bytes(ptr0, len0);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @param {string} string\n     * @returns {BigNum}\n     */\n    static from_str(string) {\n        var ptr0 = passStringToWasm0(string, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.bignum_from_str(ptr0, len0);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_str() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bignum_to_str(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {BigNum}\n     */\n    static zero() {\n        var ret = wasm.bignum_zero();\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {boolean}\n     */\n    is_zero() {\n        var ret = wasm.bignum_is_zero(this.ptr);\n        return ret !== 0;\n    }\n    /**\n     * @param {BigNum} other\n     * @returns {BigNum}\n     */\n    checked_mul(other) {\n        _assertClass(other, BigNum);\n        var ret = wasm.bignum_checked_mul(this.ptr, other.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} other\n     * @returns {BigNum}\n     */\n    checked_add(other) {\n        _assertClass(other, BigNum);\n        var ret = wasm.bignum_checked_add(this.ptr, other.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} other\n     * @returns {BigNum}\n     */\n    checked_sub(other) {\n        _assertClass(other, BigNum);\n        var ret = wasm.bignum_checked_sub(this.ptr, other.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} other\n     * @returns {BigNum}\n     */\n    checked_div(other) {\n        _assertClass(other, BigNum);\n        var ret = wasm.bignum_checked_div(this.ptr, other.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} other\n     * @returns {BigNum}\n     */\n    checked_div_ceil(other) {\n        _assertClass(other, BigNum);\n        var ret = wasm.bignum_checked_div_ceil(this.ptr, other.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * returns 0 if it would otherwise underflow\n     * @param {BigNum} other\n     * @returns {BigNum}\n     */\n    clamped_sub(other) {\n        _assertClass(other, BigNum);\n        var ret = wasm.bignum_clamped_sub(this.ptr, other.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} rhs_value\n     * @returns {number}\n     */\n    compare(rhs_value) {\n        _assertClass(rhs_value, BigNum);\n        var ret = wasm.bignum_compare(this.ptr, rhs_value.ptr);\n        return ret;\n    }\n}\n/** */\nexport class Bip32PrivateKey {\n    static __wrap(ptr) {\n        const obj = Object.create(Bip32PrivateKey.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_bip32privatekey_free(ptr);\n    }\n    /**\n     * derive this private key with the given index.\n     *\n     * # Security considerations\n     *\n     * * hard derivation index cannot be soft derived with the public key\n     *\n     * # Hard derivation vs Soft derivation\n     *\n     * If you pass an index below 0x80000000 then it is a soft derivation.\n     * The advantage of soft derivation is that it is possible to derive the\n     * public key too. I.e. derivation the private key with a soft derivation\n     * index and then retrieving the associated public key is equivalent to\n     * deriving the public key associated to the parent private key.\n     *\n     * Hard derivation index does not allow public key derivation.\n     *\n     * This is why deriving the private key should not fail while deriving\n     * the public key may fail (if the derivation index is invalid).\n     * @param {number} index\n     * @returns {Bip32PrivateKey}\n     */\n    derive(index) {\n        var ret = wasm.bip32privatekey_derive(this.ptr, index);\n        return Bip32PrivateKey.__wrap(ret);\n    }\n    /**\n     * 128-byte xprv a key format in Cardano that some software still uses or requires\n     * the traditional 96-byte xprv is simply encoded as\n     * prv | chaincode\n     * however, because some software may not know how to compute a public key from a private key,\n     * the 128-byte inlines the public key in the following format\n     * prv | pub | chaincode\n     * so be careful if you see the term \"xprv\" as it could refer to either one\n     * our library does not require the pub (instead we compute the pub key when needed)\n     * @param {Uint8Array} bytes\n     * @returns {Bip32PrivateKey}\n     */\n    static from_128_xprv(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.bip32privatekey_from_128_xprv(ptr0, len0);\n        return Bip32PrivateKey.__wrap(ret);\n    }\n    /**\n     * see from_128_xprv\n     * @returns {Uint8Array}\n     */\n    to_128_xprv() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bip32privatekey_to_128_xprv(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Bip32PrivateKey}\n     */\n    static generate_ed25519_bip32() {\n        var ret = wasm.bip32privatekey_generate_ed25519_bip32();\n        return Bip32PrivateKey.__wrap(ret);\n    }\n    /**\n     * @returns {PrivateKey}\n     */\n    to_raw_key() {\n        var ret = wasm.bip32privatekey_to_raw_key(this.ptr);\n        return PrivateKey.__wrap(ret);\n    }\n    /**\n     * @returns {Bip32PublicKey}\n     */\n    to_public() {\n        var ret = wasm.bip32privatekey_to_public(this.ptr);\n        return Bip32PublicKey.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Bip32PrivateKey}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.bip32privatekey_from_bytes(ptr0, len0);\n        return Bip32PrivateKey.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    as_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bip32privatekey_as_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} bech32_str\n     * @returns {Bip32PrivateKey}\n     */\n    static from_bech32(bech32_str) {\n        var ptr0 = passStringToWasm0(bech32_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.bip32privatekey_from_bech32(ptr0, len0);\n        return Bip32PrivateKey.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_bech32() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bip32privatekey_to_bech32(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {Uint8Array} entropy\n     * @param {Uint8Array} password\n     * @returns {Bip32PrivateKey}\n     */\n    static from_bip39_entropy(entropy, password) {\n        var ptr0 = passArray8ToWasm0(entropy, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = passArray8ToWasm0(password, wasm.__wbindgen_malloc);\n        var len1 = WASM_VECTOR_LEN;\n        var ret = wasm.bip32privatekey_from_bip39_entropy(ptr0, len0, ptr1, len1);\n        return Bip32PrivateKey.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    chaincode() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bip32privatekey_chaincode(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/** */\nexport class Bip32PublicKey {\n    static __wrap(ptr) {\n        const obj = Object.create(Bip32PublicKey.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_bip32publickey_free(ptr);\n    }\n    /**\n     * derive this public key with the given index.\n     *\n     * # Errors\n     *\n     * If the index is not a soft derivation index (< 0x80000000) then\n     * calling this method will fail.\n     *\n     * # Security considerations\n     *\n     * * hard derivation index cannot be soft derived with the public key\n     *\n     * # Hard derivation vs Soft derivation\n     *\n     * If you pass an index below 0x80000000 then it is a soft derivation.\n     * The advantage of soft derivation is that it is possible to derive the\n     * public key too. I.e. derivation the private key with a soft derivation\n     * index and then retrieving the associated public key is equivalent to\n     * deriving the public key associated to the parent private key.\n     *\n     * Hard derivation index does not allow public key derivation.\n     *\n     * This is why deriving the private key should not fail while deriving\n     * the public key may fail (if the derivation index is invalid).\n     * @param {number} index\n     * @returns {Bip32PublicKey}\n     */\n    derive(index) {\n        var ret = wasm.bip32publickey_derive(this.ptr, index);\n        return Bip32PublicKey.__wrap(ret);\n    }\n    /**\n     * @returns {PublicKey}\n     */\n    to_raw_key() {\n        var ret = wasm.bip32publickey_to_raw_key(this.ptr);\n        return PublicKey.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Bip32PublicKey}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.bip32publickey_from_bytes(ptr0, len0);\n        return Bip32PublicKey.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    as_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bip32publickey_as_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} bech32_str\n     * @returns {Bip32PublicKey}\n     */\n    static from_bech32(bech32_str) {\n        var ptr0 = passStringToWasm0(bech32_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.bip32publickey_from_bech32(ptr0, len0);\n        return Bip32PublicKey.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_bech32() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bip32publickey_to_bech32(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    chaincode() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bip32publickey_chaincode(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/** */\nexport class Block {\n    static __wrap(ptr) {\n        const obj = Object.create(Block.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_block_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.block_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Block}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.block_from_bytes(ptr0, len0);\n        return Block.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.block_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.block_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {Block}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.block_from_json(ptr0, len0);\n        return Block.__wrap(ret);\n    }\n    /**\n     * @returns {Header}\n     */\n    header() {\n        var ret = wasm.block_header(this.ptr);\n        return Header.__wrap(ret);\n    }\n    /**\n     * @returns {TransactionBodies}\n     */\n    transaction_bodies() {\n        var ret = wasm.block_transaction_bodies(this.ptr);\n        return TransactionBodies.__wrap(ret);\n    }\n    /**\n     * @returns {TransactionWitnessSets}\n     */\n    transaction_witness_sets() {\n        var ret = wasm.block_transaction_witness_sets(this.ptr);\n        return TransactionWitnessSets.__wrap(ret);\n    }\n    /**\n     * @returns {AuxiliaryDataSet}\n     */\n    auxiliary_data_set() {\n        var ret = wasm.block_auxiliary_data_set(this.ptr);\n        return AuxiliaryDataSet.__wrap(ret);\n    }\n    /**\n     * @returns {TransactionIndexes}\n     */\n    invalid_transactions() {\n        var ret = wasm.block_invalid_transactions(this.ptr);\n        return TransactionIndexes.__wrap(ret);\n    }\n    /**\n     * @param {Header} header\n     * @param {TransactionBodies} transaction_bodies\n     * @param {TransactionWitnessSets} transaction_witness_sets\n     * @param {AuxiliaryDataSet} auxiliary_data_set\n     * @param {TransactionIndexes} invalid_transactions\n     * @returns {Block}\n     */\n    static new(header, transaction_bodies, transaction_witness_sets, auxiliary_data_set, invalid_transactions) {\n        _assertClass(header, Header);\n        _assertClass(transaction_bodies, TransactionBodies);\n        _assertClass(transaction_witness_sets, TransactionWitnessSets);\n        _assertClass(auxiliary_data_set, AuxiliaryDataSet);\n        _assertClass(invalid_transactions, TransactionIndexes);\n        var ret = wasm.block_new(header.ptr, transaction_bodies.ptr, transaction_witness_sets.ptr, auxiliary_data_set.ptr, invalid_transactions.ptr);\n        return Block.__wrap(ret);\n    }\n}\n/** */\nexport class BlockHash {\n    static __wrap(ptr) {\n        const obj = Object.create(BlockHash.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_blockhash_free(ptr);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {BlockHash}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.blockhash_from_bytes(ptr0, len0);\n        return BlockHash.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockhash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} prefix\n     * @returns {string}\n     */\n    to_bech32(prefix) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.blockhash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} bech_str\n     * @returns {BlockHash}\n     */\n    static from_bech32(bech_str) {\n        var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.blockhash_from_bech32(ptr0, len0);\n        return BlockHash.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_hex() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockhash_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} hex\n     * @returns {BlockHash}\n     */\n    static from_hex(hex) {\n        var ptr0 = passStringToWasm0(hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.blockhash_from_hex(ptr0, len0);\n        return BlockHash.__wrap(ret);\n    }\n}\n/** */\nexport class Blockfrost {\n    static __wrap(ptr) {\n        const obj = Object.create(Blockfrost.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_blockfrost_free(ptr);\n    }\n    /**\n     * @param {string} url\n     * @param {string} project_id\n     * @returns {Blockfrost}\n     */\n    static new(url, project_id) {\n        var ptr0 = passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = passStringToWasm0(project_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        var ret = wasm.blockfrost_new(ptr0, len0, ptr1, len1);\n        return Blockfrost.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    url() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockfrost_url(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    project_id() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockfrost_project_id(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n}\n/** */\nexport class BootstrapWitness {\n    static __wrap(ptr) {\n        const obj = Object.create(BootstrapWitness.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_bootstrapwitness_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bootstrapwitness_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {BootstrapWitness}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.bootstrapwitness_from_bytes(ptr0, len0);\n        return BootstrapWitness.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bootstrapwitness_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.bootstrapwitness_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {BootstrapWitness}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.bootstrapwitness_from_json(ptr0, len0);\n        return BootstrapWitness.__wrap(ret);\n    }\n    /**\n     * @returns {Vkey}\n     */\n    vkey() {\n        var ret = wasm.bootstrapwitness_vkey(this.ptr);\n        return Vkey.__wrap(ret);\n    }\n    /**\n     * @returns {Ed25519Signature}\n     */\n    signature() {\n        var ret = wasm.bootstrapwitness_signature(this.ptr);\n        return Ed25519Signature.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    chain_code() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bootstrapwitness_chain_code(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    attributes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bootstrapwitness_attributes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Vkey} vkey\n     * @param {Ed25519Signature} signature\n     * @param {Uint8Array} chain_code\n     * @param {Uint8Array} attributes\n     * @returns {BootstrapWitness}\n     */\n    static new(vkey, signature, chain_code, attributes) {\n        _assertClass(vkey, Vkey);\n        _assertClass(signature, Ed25519Signature);\n        var ptr0 = passArray8ToWasm0(chain_code, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = passArray8ToWasm0(attributes, wasm.__wbindgen_malloc);\n        var len1 = WASM_VECTOR_LEN;\n        var ret = wasm.bootstrapwitness_new(vkey.ptr, signature.ptr, ptr0, len0, ptr1, len1);\n        return BootstrapWitness.__wrap(ret);\n    }\n}\n/** */\nexport class BootstrapWitnesses {\n    static __wrap(ptr) {\n        const obj = Object.create(BootstrapWitnesses.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_bootstrapwitnesses_free(ptr);\n    }\n    /**\n     * @returns {BootstrapWitnesses}\n     */\n    static new() {\n        var ret = wasm.bootstrapwitnesses_new();\n        return BootstrapWitnesses.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.bootstrapwitnesses_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {BootstrapWitness}\n     */\n    get(index) {\n        var ret = wasm.bootstrapwitnesses_get(this.ptr, index);\n        return BootstrapWitness.__wrap(ret);\n    }\n    /**\n     * @param {BootstrapWitness} elem\n     */\n    add(elem) {\n        _assertClass(elem, BootstrapWitness);\n        wasm.bootstrapwitnesses_add(this.ptr, elem.ptr);\n    }\n}\n/** */\nexport class ByronAddress {\n    static __wrap(ptr) {\n        const obj = Object.create(ByronAddress.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_byronaddress_free(ptr);\n    }\n    /**\n     * @returns {string}\n     */\n    to_base58() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.byronaddress_to_base58(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.byronaddress_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {ByronAddress}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.byronaddress_from_bytes(ptr0, len0);\n        return ByronAddress.__wrap(ret);\n    }\n    /**\n     * returns the byron protocol magic embedded in the address, or mainnet id if none is present\n     * note: for bech32 addresses, you need to use network_id instead\n     * @returns {number}\n     */\n    byron_protocol_magic() {\n        var ret = wasm.byronaddress_byron_protocol_magic(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    attributes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.byronaddress_attributes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {number}\n     */\n    network_id() {\n        var ret = wasm.byronaddress_network_id(this.ptr);\n        return ret;\n    }\n    /**\n     * @param {string} s\n     * @returns {ByronAddress}\n     */\n    static from_base58(s) {\n        var ptr0 = passStringToWasm0(s, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.byronaddress_from_base58(ptr0, len0);\n        return ByronAddress.__wrap(ret);\n    }\n    /**\n     * @param {Bip32PublicKey} key\n     * @param {number} protocol_magic\n     * @returns {ByronAddress}\n     */\n    static icarus_from_key(key, protocol_magic) {\n        _assertClass(key, Bip32PublicKey);\n        var ret = wasm.byronaddress_icarus_from_key(key.ptr, protocol_magic);\n        return ByronAddress.__wrap(ret);\n    }\n    /**\n     * @param {string} s\n     * @returns {boolean}\n     */\n    static is_valid(s) {\n        var ptr0 = passStringToWasm0(s, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.byronaddress_is_valid(ptr0, len0);\n        return ret !== 0;\n    }\n    /**\n     * @returns {Address}\n     */\n    to_address() {\n        var ret = wasm.byronaddress_to_address(this.ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n     * @param {Address} addr\n     * @returns {ByronAddress | undefined}\n     */\n    static from_address(addr) {\n        _assertClass(addr, Address);\n        var ret = wasm.byronaddress_from_address(addr.ptr);\n        return ret === 0 ? undefined : ByronAddress.__wrap(ret);\n    }\n}\n/** */\nexport class Certificate {\n    static __wrap(ptr) {\n        const obj = Object.create(Certificate.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_certificate_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.certificate_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Certificate}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.certificate_from_bytes(ptr0, len0);\n        return Certificate.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.certificate_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.certificate_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {Certificate}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.certificate_from_json(ptr0, len0);\n        return Certificate.__wrap(ret);\n    }\n    /**\n     * @param {StakeRegistration} stake_registration\n     * @returns {Certificate}\n     */\n    static new_stake_registration(stake_registration) {\n        _assertClass(stake_registration, StakeRegistration);\n        var ret = wasm.certificate_new_stake_registration(stake_registration.ptr);\n        return Certificate.__wrap(ret);\n    }\n    /**\n     * @param {StakeDeregistration} stake_deregistration\n     * @returns {Certificate}\n     */\n    static new_stake_deregistration(stake_deregistration) {\n        _assertClass(stake_deregistration, StakeDeregistration);\n        var ret = wasm.certificate_new_stake_deregistration(stake_deregistration.ptr);\n        return Certificate.__wrap(ret);\n    }\n    /**\n     * @param {StakeDelegation} stake_delegation\n     * @returns {Certificate}\n     */\n    static new_stake_delegation(stake_delegation) {\n        _assertClass(stake_delegation, StakeDelegation);\n        var ret = wasm.certificate_new_stake_delegation(stake_delegation.ptr);\n        return Certificate.__wrap(ret);\n    }\n    /**\n     * @param {PoolRegistration} pool_registration\n     * @returns {Certificate}\n     */\n    static new_pool_registration(pool_registration) {\n        _assertClass(pool_registration, PoolRegistration);\n        var ret = wasm.certificate_new_pool_registration(pool_registration.ptr);\n        return Certificate.__wrap(ret);\n    }\n    /**\n     * @param {PoolRetirement} pool_retirement\n     * @returns {Certificate}\n     */\n    static new_pool_retirement(pool_retirement) {\n        _assertClass(pool_retirement, PoolRetirement);\n        var ret = wasm.certificate_new_pool_retirement(pool_retirement.ptr);\n        return Certificate.__wrap(ret);\n    }\n    /**\n     * @param {GenesisKeyDelegation} genesis_key_delegation\n     * @returns {Certificate}\n     */\n    static new_genesis_key_delegation(genesis_key_delegation) {\n        _assertClass(genesis_key_delegation, GenesisKeyDelegation);\n        var ret = wasm.certificate_new_genesis_key_delegation(genesis_key_delegation.ptr);\n        return Certificate.__wrap(ret);\n    }\n    /**\n     * @param {MoveInstantaneousRewardsCert} move_instantaneous_rewards_cert\n     * @returns {Certificate}\n     */\n    static new_move_instantaneous_rewards_cert(move_instantaneous_rewards_cert) {\n        _assertClass(move_instantaneous_rewards_cert, MoveInstantaneousRewardsCert);\n        var ret = wasm.certificate_new_move_instantaneous_rewards_cert(move_instantaneous_rewards_cert.ptr);\n        return Certificate.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    kind() {\n        var ret = wasm.certificate_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {StakeRegistration | undefined}\n     */\n    as_stake_registration() {\n        var ret = wasm.certificate_as_stake_registration(this.ptr);\n        return ret === 0 ? undefined : StakeRegistration.__wrap(ret);\n    }\n    /**\n     * @returns {StakeDeregistration | undefined}\n     */\n    as_stake_deregistration() {\n        var ret = wasm.certificate_as_stake_deregistration(this.ptr);\n        return ret === 0 ? undefined : StakeDeregistration.__wrap(ret);\n    }\n    /**\n     * @returns {StakeDelegation | undefined}\n     */\n    as_stake_delegation() {\n        var ret = wasm.certificate_as_stake_delegation(this.ptr);\n        return ret === 0 ? undefined : StakeDelegation.__wrap(ret);\n    }\n    /**\n     * @returns {PoolRegistration | undefined}\n     */\n    as_pool_registration() {\n        var ret = wasm.certificate_as_pool_registration(this.ptr);\n        return ret === 0 ? undefined : PoolRegistration.__wrap(ret);\n    }\n    /**\n     * @returns {PoolRetirement | undefined}\n     */\n    as_pool_retirement() {\n        var ret = wasm.certificate_as_pool_retirement(this.ptr);\n        return ret === 0 ? undefined : PoolRetirement.__wrap(ret);\n    }\n    /**\n     * @returns {GenesisKeyDelegation | undefined}\n     */\n    as_genesis_key_delegation() {\n        var ret = wasm.certificate_as_genesis_key_delegation(this.ptr);\n        return ret === 0 ? undefined : GenesisKeyDelegation.__wrap(ret);\n    }\n    /**\n     * @returns {MoveInstantaneousRewardsCert | undefined}\n     */\n    as_move_instantaneous_rewards_cert() {\n        var ret = wasm.certificate_as_move_instantaneous_rewards_cert(this.ptr);\n        return ret === 0 ? undefined : MoveInstantaneousRewardsCert.__wrap(ret);\n    }\n}\n/** */\nexport class Certificates {\n    static __wrap(ptr) {\n        const obj = Object.create(Certificates.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_certificates_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.certificates_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Certificates}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.certificates_from_bytes(ptr0, len0);\n        return Certificates.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.certificates_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.certificates_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {Certificates}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.certificates_from_json(ptr0, len0);\n        return Certificates.__wrap(ret);\n    }\n    /**\n     * @returns {Certificates}\n     */\n    static new() {\n        var ret = wasm.certificates_new();\n        return Certificates.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.certificates_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {Certificate}\n     */\n    get(index) {\n        var ret = wasm.certificates_get(this.ptr, index);\n        return Certificate.__wrap(ret);\n    }\n    /**\n     * @param {Certificate} elem\n     */\n    add(elem) {\n        _assertClass(elem, Certificate);\n        wasm.certificates_add(this.ptr, elem.ptr);\n    }\n}\n/** */\nexport class ConstrPlutusData {\n    static __wrap(ptr) {\n        const obj = Object.create(ConstrPlutusData.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_constrplutusdata_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constrplutusdata_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {ConstrPlutusData}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.constrplutusdata_from_bytes(ptr0, len0);\n        return ConstrPlutusData.__wrap(ret);\n    }\n    /**\n     * @returns {BigNum}\n     */\n    alternative() {\n        var ret = wasm.constrplutusdata_alternative(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {PlutusList}\n     */\n    data() {\n        var ret = wasm.constrplutusdata_data(this.ptr);\n        return PlutusList.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} alternative\n     * @param {PlutusList} data\n     * @returns {ConstrPlutusData}\n     */\n    static new(alternative, data) {\n        _assertClass(alternative, BigNum);\n        _assertClass(data, PlutusList);\n        var ret = wasm.constrplutusdata_new(alternative.ptr, data.ptr);\n        return ConstrPlutusData.__wrap(ret);\n    }\n}\n/** */\nexport class CostModel {\n    static __wrap(ptr) {\n        const obj = Object.create(CostModel.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_costmodel_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.costmodel_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {CostModel}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.costmodel_from_bytes(ptr0, len0);\n        return CostModel.__wrap(ret);\n    }\n    /**\n     * @returns {CostModel}\n     */\n    static new() {\n        var ret = wasm.costmodel_new();\n        return CostModel.__wrap(ret);\n    }\n    /**\n     * @returns {CostModel}\n     */\n    static new_plutus_v2() {\n        var ret = wasm.costmodel_new_plutus_v2();\n        return CostModel.__wrap(ret);\n    }\n    /**\n     * @param {number} operation\n     * @param {Int} cost\n     * @returns {Int}\n     */\n    set(operation, cost) {\n        _assertClass(cost, Int);\n        var ret = wasm.costmodel_set(this.ptr, operation, cost.ptr);\n        return Int.__wrap(ret);\n    }\n    /**\n     * @param {number} operation\n     * @returns {Int}\n     */\n    get(operation) {\n        var ret = wasm.costmodel_get(this.ptr, operation);\n        return Int.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.costmodel_len(this.ptr);\n        return ret >>> 0;\n    }\n}\n/** */\nexport class Costmdls {\n    static __wrap(ptr) {\n        const obj = Object.create(Costmdls.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_costmdls_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.costmdls_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Costmdls}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.costmdls_from_bytes(ptr0, len0);\n        return Costmdls.__wrap(ret);\n    }\n    /**\n     * @returns {Costmdls}\n     */\n    static new() {\n        var ret = wasm.costmdls_new();\n        return Costmdls.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.costmdls_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {Language} key\n     * @param {CostModel} value\n     * @returns {CostModel | undefined}\n     */\n    insert(key, value) {\n        _assertClass(key, Language);\n        _assertClass(value, CostModel);\n        var ret = wasm.costmdls_insert(this.ptr, key.ptr, value.ptr);\n        return ret === 0 ? undefined : CostModel.__wrap(ret);\n    }\n    /**\n     * @param {Language} key\n     * @returns {CostModel | undefined}\n     */\n    get(key) {\n        _assertClass(key, Language);\n        var ret = wasm.costmdls_get(this.ptr, key.ptr);\n        return ret === 0 ? undefined : CostModel.__wrap(ret);\n    }\n    /**\n     * @returns {Languages}\n     */\n    keys() {\n        var ret = wasm.costmdls_keys(this.ptr);\n        return Languages.__wrap(ret);\n    }\n}\n/** */\nexport class DNSRecordAorAAAA {\n    static __wrap(ptr) {\n        const obj = Object.create(DNSRecordAorAAAA.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_dnsrecordaoraaaa_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.dnsrecordaoraaaa_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {DNSRecordAorAAAA}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.dnsrecordaoraaaa_from_bytes(ptr0, len0);\n        return DNSRecordAorAAAA.__wrap(ret);\n    }\n    /**\n     * @param {string} dns_name\n     * @returns {DNSRecordAorAAAA}\n     */\n    static new(dns_name) {\n        var ptr0 = passStringToWasm0(dns_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.dnsrecordaoraaaa_new(ptr0, len0);\n        return DNSRecordAorAAAA.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    record() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.dnsrecordaoraaaa_record(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n}\n/** */\nexport class DNSRecordSRV {\n    static __wrap(ptr) {\n        const obj = Object.create(DNSRecordSRV.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_dnsrecordsrv_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.dnsrecordsrv_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {DNSRecordSRV}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.dnsrecordsrv_from_bytes(ptr0, len0);\n        return DNSRecordSRV.__wrap(ret);\n    }\n    /**\n     * @param {string} dns_name\n     * @returns {DNSRecordSRV}\n     */\n    static new(dns_name) {\n        var ptr0 = passStringToWasm0(dns_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.dnsrecordsrv_new(ptr0, len0);\n        return DNSRecordSRV.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    record() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.dnsrecordsrv_record(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n}\n/** */\nexport class Data {\n    static __wrap(ptr) {\n        const obj = Object.create(Data.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_data_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.data_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Data}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.data_from_bytes(ptr0, len0);\n        return Data.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.data_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.data_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {Data}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.data_from_json(ptr0, len0);\n        return Data.__wrap(ret);\n    }\n    /**\n     * @param {PlutusData} plutus_data\n     * @returns {Data}\n     */\n    static new(plutus_data) {\n        _assertClass(plutus_data, PlutusData);\n        var ret = wasm.data_new(plutus_data.ptr);\n        return Data.__wrap(ret);\n    }\n    /**\n     * @returns {PlutusData}\n     */\n    get() {\n        var ret = wasm.data_get(this.ptr);\n        return PlutusData.__wrap(ret);\n    }\n}\n/** */\nexport class DataHash {\n    static __wrap(ptr) {\n        const obj = Object.create(DataHash.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_datahash_free(ptr);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {DataHash}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.datahash_from_bytes(ptr0, len0);\n        return DataHash.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.datahash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} prefix\n     * @returns {string}\n     */\n    to_bech32(prefix) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.datahash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} bech_str\n     * @returns {DataHash}\n     */\n    static from_bech32(bech_str) {\n        var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.datahash_from_bech32(ptr0, len0);\n        return DataHash.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_hex() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.datahash_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} hex\n     * @returns {DataHash}\n     */\n    static from_hex(hex) {\n        var ptr0 = passStringToWasm0(hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.datahash_from_hex(ptr0, len0);\n        return DataHash.__wrap(ret);\n    }\n}\n/** */\nexport class Datum {\n    static __wrap(ptr) {\n        const obj = Object.create(Datum.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_datum_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.datum_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Datum}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.datum_from_bytes(ptr0, len0);\n        return Datum.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.datum_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.datum_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {Datum}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.datum_from_json(ptr0, len0);\n        return Datum.__wrap(ret);\n    }\n    /**\n     * @param {DataHash} data_hash\n     * @returns {Datum}\n     */\n    static new_data_hash(data_hash) {\n        _assertClass(data_hash, DataHash);\n        var ret = wasm.datum_new_data_hash(data_hash.ptr);\n        return Datum.__wrap(ret);\n    }\n    /**\n     * @param {Data} data\n     * @returns {Datum}\n     */\n    static new_data(data) {\n        _assertClass(data, Data);\n        var ret = wasm.datum_new_data(data.ptr);\n        return Datum.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    kind() {\n        var ret = wasm.datum_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {DataHash | undefined}\n     */\n    as_data_hash() {\n        var ret = wasm.datum_as_data_hash(this.ptr);\n        return ret === 0 ? undefined : DataHash.__wrap(ret);\n    }\n    /**\n     * @returns {Data | undefined}\n     */\n    as_data() {\n        var ret = wasm.datum_as_data(this.ptr);\n        return ret === 0 ? undefined : Data.__wrap(ret);\n    }\n}\n/** */\nexport class Ed25519KeyHash {\n    static __wrap(ptr) {\n        const obj = Object.create(Ed25519KeyHash.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ed25519keyhash_free(ptr);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Ed25519KeyHash}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.ed25519keyhash_from_bytes(ptr0, len0);\n        return Ed25519KeyHash.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ed25519keyhash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} prefix\n     * @returns {string}\n     */\n    to_bech32(prefix) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.ed25519keyhash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} bech_str\n     * @returns {Ed25519KeyHash}\n     */\n    static from_bech32(bech_str) {\n        var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.ed25519keyhash_from_bech32(ptr0, len0);\n        return Ed25519KeyHash.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_hex() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ed25519keyhash_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} hex\n     * @returns {Ed25519KeyHash}\n     */\n    static from_hex(hex) {\n        var ptr0 = passStringToWasm0(hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.ed25519keyhash_from_hex(ptr0, len0);\n        return Ed25519KeyHash.__wrap(ret);\n    }\n}\n/** */\nexport class Ed25519KeyHashes {\n    static __wrap(ptr) {\n        const obj = Object.create(Ed25519KeyHashes.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ed25519keyhashes_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ed25519keyhashes_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Ed25519KeyHashes}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.ed25519keyhashes_from_bytes(ptr0, len0);\n        return Ed25519KeyHashes.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ed25519keyhashes_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.ed25519keyhashes_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {Ed25519KeyHashes}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.ed25519keyhashes_from_json(ptr0, len0);\n        return Ed25519KeyHashes.__wrap(ret);\n    }\n    /**\n     * @returns {Ed25519KeyHashes}\n     */\n    static new() {\n        var ret = wasm.ed25519keyhashes_new();\n        return Ed25519KeyHashes.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.ed25519keyhashes_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {Ed25519KeyHash}\n     */\n    get(index) {\n        var ret = wasm.ed25519keyhashes_get(this.ptr, index);\n        return Ed25519KeyHash.__wrap(ret);\n    }\n    /**\n     * @param {Ed25519KeyHash} elem\n     */\n    add(elem) {\n        _assertClass(elem, Ed25519KeyHash);\n        wasm.ed25519keyhashes_add(this.ptr, elem.ptr);\n    }\n}\n/** */\nexport class Ed25519Signature {\n    static __wrap(ptr) {\n        const obj = Object.create(Ed25519Signature.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ed25519signature_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ed25519signature_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_bech32() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ed25519signature_to_bech32(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_hex() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ed25519signature_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} bech32_str\n     * @returns {Ed25519Signature}\n     */\n    static from_bech32(bech32_str) {\n        var ptr0 = passStringToWasm0(bech32_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.ed25519signature_from_bech32(ptr0, len0);\n        return Ed25519Signature.__wrap(ret);\n    }\n    /**\n     * @param {string} input\n     * @returns {Ed25519Signature}\n     */\n    static from_hex(input) {\n        var ptr0 = passStringToWasm0(input, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.ed25519signature_from_hex(ptr0, len0);\n        return Ed25519Signature.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Ed25519Signature}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.ed25519signature_from_bytes(ptr0, len0);\n        return Ed25519Signature.__wrap(ret);\n    }\n}\n/** */\nexport class EnterpriseAddress {\n    static __wrap(ptr) {\n        const obj = Object.create(EnterpriseAddress.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_enterpriseaddress_free(ptr);\n    }\n    /**\n     * @param {number} network\n     * @param {StakeCredential} payment\n     * @returns {EnterpriseAddress}\n     */\n    static new(network, payment) {\n        _assertClass(payment, StakeCredential);\n        var ret = wasm.enterpriseaddress_new(network, payment.ptr);\n        return EnterpriseAddress.__wrap(ret);\n    }\n    /**\n     * @returns {StakeCredential}\n     */\n    payment_cred() {\n        var ret = wasm.enterpriseaddress_payment_cred(this.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n     * @returns {Address}\n     */\n    to_address() {\n        var ret = wasm.enterpriseaddress_to_address(this.ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n     * @param {Address} addr\n     * @returns {EnterpriseAddress | undefined}\n     */\n    static from_address(addr) {\n        _assertClass(addr, Address);\n        var ret = wasm.enterpriseaddress_from_address(addr.ptr);\n        return ret === 0 ? undefined : EnterpriseAddress.__wrap(ret);\n    }\n}\n/** */\nexport class ExUnitPrices {\n    static __wrap(ptr) {\n        const obj = Object.create(ExUnitPrices.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_exunitprices_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.exunitprices_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {ExUnitPrices}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.exunitprices_from_bytes(ptr0, len0);\n        return ExUnitPrices.__wrap(ret);\n    }\n    /**\n     * @returns {UnitInterval}\n     */\n    mem_price() {\n        var ret = wasm.exunitprices_mem_price(this.ptr);\n        return UnitInterval.__wrap(ret);\n    }\n    /**\n     * @returns {UnitInterval}\n     */\n    step_price() {\n        var ret = wasm.exunitprices_step_price(this.ptr);\n        return UnitInterval.__wrap(ret);\n    }\n    /**\n     * @param {UnitInterval} mem_price\n     * @param {UnitInterval} step_price\n     * @returns {ExUnitPrices}\n     */\n    static new(mem_price, step_price) {\n        _assertClass(mem_price, UnitInterval);\n        _assertClass(step_price, UnitInterval);\n        var ret = wasm.exunitprices_new(mem_price.ptr, step_price.ptr);\n        return ExUnitPrices.__wrap(ret);\n    }\n    /**\n     * @param {number} mem_price\n     * @param {number} step_price\n     * @returns {ExUnitPrices}\n     */\n    static from_float(mem_price, step_price) {\n        var ret = wasm.exunitprices_from_float(mem_price, step_price);\n        return ExUnitPrices.__wrap(ret);\n    }\n}\n/** */\nexport class ExUnits {\n    static __wrap(ptr) {\n        const obj = Object.create(ExUnits.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_exunits_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.exunits_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {ExUnits}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.exunits_from_bytes(ptr0, len0);\n        return ExUnits.__wrap(ret);\n    }\n    /**\n     * @returns {BigNum}\n     */\n    mem() {\n        var ret = wasm.exunits_mem(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {BigNum}\n     */\n    steps() {\n        var ret = wasm.exunits_steps(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} mem\n     * @param {BigNum} steps\n     * @returns {ExUnits}\n     */\n    static new(mem, steps) {\n        _assertClass(mem, BigNum);\n        _assertClass(steps, BigNum);\n        var ret = wasm.exunits_new(mem.ptr, steps.ptr);\n        return ExUnits.__wrap(ret);\n    }\n}\n/** */\nexport class GeneralTransactionMetadata {\n    static __wrap(ptr) {\n        const obj = Object.create(GeneralTransactionMetadata.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_generaltransactionmetadata_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.generaltransactionmetadata_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {GeneralTransactionMetadata}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.generaltransactionmetadata_from_bytes(ptr0, len0);\n        return GeneralTransactionMetadata.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.generaltransactionmetadata_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.generaltransactionmetadata_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {GeneralTransactionMetadata}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.generaltransactionmetadata_from_json(ptr0, len0);\n        return GeneralTransactionMetadata.__wrap(ret);\n    }\n    /**\n     * @returns {GeneralTransactionMetadata}\n     */\n    static new() {\n        var ret = wasm.generaltransactionmetadata_new();\n        return GeneralTransactionMetadata.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.generaltransactionmetadata_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {BigNum} key\n     * @param {TransactionMetadatum} value\n     * @returns {TransactionMetadatum | undefined}\n     */\n    insert(key, value) {\n        _assertClass(key, BigNum);\n        _assertClass(value, TransactionMetadatum);\n        var ret = wasm.generaltransactionmetadata_insert(this.ptr, key.ptr, value.ptr);\n        return ret === 0 ? undefined : TransactionMetadatum.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} key\n     * @returns {TransactionMetadatum | undefined}\n     */\n    get(key) {\n        _assertClass(key, BigNum);\n        var ret = wasm.generaltransactionmetadata_get(this.ptr, key.ptr);\n        return ret === 0 ? undefined : TransactionMetadatum.__wrap(ret);\n    }\n    /**\n     * @returns {TransactionMetadatumLabels}\n     */\n    keys() {\n        var ret = wasm.generaltransactionmetadata_keys(this.ptr);\n        return TransactionMetadatumLabels.__wrap(ret);\n    }\n}\n/** */\nexport class GenesisDelegateHash {\n    static __wrap(ptr) {\n        const obj = Object.create(GenesisDelegateHash.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_genesisdelegatehash_free(ptr);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {GenesisDelegateHash}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.genesisdelegatehash_from_bytes(ptr0, len0);\n        return GenesisDelegateHash.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.genesisdelegatehash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} prefix\n     * @returns {string}\n     */\n    to_bech32(prefix) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.genesisdelegatehash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} bech_str\n     * @returns {GenesisDelegateHash}\n     */\n    static from_bech32(bech_str) {\n        var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.genesisdelegatehash_from_bech32(ptr0, len0);\n        return GenesisDelegateHash.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_hex() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.genesisdelegatehash_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} hex\n     * @returns {GenesisDelegateHash}\n     */\n    static from_hex(hex) {\n        var ptr0 = passStringToWasm0(hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.genesisdelegatehash_from_hex(ptr0, len0);\n        return GenesisDelegateHash.__wrap(ret);\n    }\n}\n/** */\nexport class GenesisHash {\n    static __wrap(ptr) {\n        const obj = Object.create(GenesisHash.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_genesishash_free(ptr);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {GenesisHash}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.genesishash_from_bytes(ptr0, len0);\n        return GenesisHash.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.genesishash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} prefix\n     * @returns {string}\n     */\n    to_bech32(prefix) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.genesishash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} bech_str\n     * @returns {GenesisHash}\n     */\n    static from_bech32(bech_str) {\n        var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.genesishash_from_bech32(ptr0, len0);\n        return GenesisHash.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_hex() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.genesishash_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} hex\n     * @returns {GenesisHash}\n     */\n    static from_hex(hex) {\n        var ptr0 = passStringToWasm0(hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.genesishash_from_hex(ptr0, len0);\n        return GenesisHash.__wrap(ret);\n    }\n}\n/** */\nexport class GenesisHashes {\n    static __wrap(ptr) {\n        const obj = Object.create(GenesisHashes.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_genesishashes_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.genesishashes_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {GenesisHashes}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.genesishashes_from_bytes(ptr0, len0);\n        return GenesisHashes.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.genesishashes_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.genesishashes_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {GenesisHashes}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.genesishashes_from_json(ptr0, len0);\n        return GenesisHashes.__wrap(ret);\n    }\n    /**\n     * @returns {GenesisHashes}\n     */\n    static new() {\n        var ret = wasm.genesishashes_new();\n        return GenesisHashes.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.genesishashes_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {GenesisHash}\n     */\n    get(index) {\n        var ret = wasm.genesishashes_get(this.ptr, index);\n        return GenesisHash.__wrap(ret);\n    }\n    /**\n     * @param {GenesisHash} elem\n     */\n    add(elem) {\n        _assertClass(elem, GenesisHash);\n        wasm.genesishashes_add(this.ptr, elem.ptr);\n    }\n}\n/** */\nexport class GenesisKeyDelegation {\n    static __wrap(ptr) {\n        const obj = Object.create(GenesisKeyDelegation.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_genesiskeydelegation_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.genesiskeydelegation_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {GenesisKeyDelegation}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.genesiskeydelegation_from_bytes(ptr0, len0);\n        return GenesisKeyDelegation.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.genesiskeydelegation_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.genesiskeydelegation_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {GenesisKeyDelegation}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.genesiskeydelegation_from_json(ptr0, len0);\n        return GenesisKeyDelegation.__wrap(ret);\n    }\n    /**\n     * @returns {GenesisHash}\n     */\n    genesishash() {\n        var ret = wasm.genesiskeydelegation_genesishash(this.ptr);\n        return GenesisHash.__wrap(ret);\n    }\n    /**\n     * @returns {GenesisDelegateHash}\n     */\n    genesis_delegate_hash() {\n        var ret = wasm.genesiskeydelegation_genesis_delegate_hash(this.ptr);\n        return GenesisDelegateHash.__wrap(ret);\n    }\n    /**\n     * @returns {VRFKeyHash}\n     */\n    vrf_keyhash() {\n        var ret = wasm.genesiskeydelegation_vrf_keyhash(this.ptr);\n        return VRFKeyHash.__wrap(ret);\n    }\n    /**\n     * @param {GenesisHash} genesishash\n     * @param {GenesisDelegateHash} genesis_delegate_hash\n     * @param {VRFKeyHash} vrf_keyhash\n     * @returns {GenesisKeyDelegation}\n     */\n    static new(genesishash, genesis_delegate_hash, vrf_keyhash) {\n        _assertClass(genesishash, GenesisHash);\n        _assertClass(genesis_delegate_hash, GenesisDelegateHash);\n        _assertClass(vrf_keyhash, VRFKeyHash);\n        var ret = wasm.genesiskeydelegation_new(genesishash.ptr, genesis_delegate_hash.ptr, vrf_keyhash.ptr);\n        return GenesisKeyDelegation.__wrap(ret);\n    }\n}\n/** */\nexport class Header {\n    static __wrap(ptr) {\n        const obj = Object.create(Header.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_header_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.header_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Header}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.header_from_bytes(ptr0, len0);\n        return Header.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.header_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.header_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {Header}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.header_from_json(ptr0, len0);\n        return Header.__wrap(ret);\n    }\n    /**\n     * @returns {HeaderBody}\n     */\n    header_body() {\n        var ret = wasm.header_header_body(this.ptr);\n        return HeaderBody.__wrap(ret);\n    }\n    /**\n     * @returns {KESSignature}\n     */\n    body_signature() {\n        var ret = wasm.header_body_signature(this.ptr);\n        return KESSignature.__wrap(ret);\n    }\n    /**\n     * @param {HeaderBody} header_body\n     * @param {KESSignature} body_signature\n     * @returns {Header}\n     */\n    static new(header_body, body_signature) {\n        _assertClass(header_body, HeaderBody);\n        _assertClass(body_signature, KESSignature);\n        var ret = wasm.header_new(header_body.ptr, body_signature.ptr);\n        return Header.__wrap(ret);\n    }\n}\n/** */\nexport class HeaderBody {\n    static __wrap(ptr) {\n        const obj = Object.create(HeaderBody.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_headerbody_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.headerbody_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {HeaderBody}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.headerbody_from_bytes(ptr0, len0);\n        return HeaderBody.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.headerbody_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.headerbody_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {HeaderBody}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.headerbody_from_json(ptr0, len0);\n        return HeaderBody.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    block_number() {\n        var ret = wasm.headerbody_block_number(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {BigNum}\n     */\n    slot() {\n        var ret = wasm.headerbody_slot(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {BlockHash | undefined}\n     */\n    prev_hash() {\n        var ret = wasm.headerbody_prev_hash(this.ptr);\n        return ret === 0 ? undefined : BlockHash.__wrap(ret);\n    }\n    /**\n     * @returns {Vkey}\n     */\n    issuer_vkey() {\n        var ret = wasm.headerbody_issuer_vkey(this.ptr);\n        return Vkey.__wrap(ret);\n    }\n    /**\n     * @returns {VRFVKey}\n     */\n    vrf_vkey() {\n        var ret = wasm.headerbody_vrf_vkey(this.ptr);\n        return VRFVKey.__wrap(ret);\n    }\n    /**\n     * @returns {VRFCert}\n     */\n    nonce_vrf() {\n        var ret = wasm.headerbody_nonce_vrf(this.ptr);\n        return VRFCert.__wrap(ret);\n    }\n    /**\n     * @returns {VRFCert}\n     */\n    leader_vrf() {\n        var ret = wasm.headerbody_leader_vrf(this.ptr);\n        return VRFCert.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    block_body_size() {\n        var ret = wasm.headerbody_block_body_size(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {BlockHash}\n     */\n    block_body_hash() {\n        var ret = wasm.headerbody_block_body_hash(this.ptr);\n        return BlockHash.__wrap(ret);\n    }\n    /**\n     * @returns {OperationalCert}\n     */\n    operational_cert() {\n        var ret = wasm.headerbody_operational_cert(this.ptr);\n        return OperationalCert.__wrap(ret);\n    }\n    /**\n     * @returns {ProtocolVersion}\n     */\n    protocol_version() {\n        var ret = wasm.headerbody_protocol_version(this.ptr);\n        return ProtocolVersion.__wrap(ret);\n    }\n    /**\n     * @param {number} block_number\n     * @param {BigNum} slot\n     * @param {BlockHash | undefined} prev_hash\n     * @param {Vkey} issuer_vkey\n     * @param {VRFVKey} vrf_vkey\n     * @param {VRFCert} nonce_vrf\n     * @param {VRFCert} leader_vrf\n     * @param {number} block_body_size\n     * @param {BlockHash} block_body_hash\n     * @param {OperationalCert} operational_cert\n     * @param {ProtocolVersion} protocol_version\n     * @returns {HeaderBody}\n     */\n    static new(block_number, slot, prev_hash, issuer_vkey, vrf_vkey, nonce_vrf, leader_vrf, block_body_size, block_body_hash, operational_cert, protocol_version) {\n        _assertClass(slot, BigNum);\n        let ptr0 = 0;\n        if (!isLikeNone(prev_hash)) {\n            _assertClass(prev_hash, BlockHash);\n            ptr0 = prev_hash.ptr;\n            prev_hash.ptr = 0;\n        }\n        _assertClass(issuer_vkey, Vkey);\n        _assertClass(vrf_vkey, VRFVKey);\n        _assertClass(nonce_vrf, VRFCert);\n        _assertClass(leader_vrf, VRFCert);\n        _assertClass(block_body_hash, BlockHash);\n        _assertClass(operational_cert, OperationalCert);\n        _assertClass(protocol_version, ProtocolVersion);\n        var ret = wasm.headerbody_new(block_number, slot.ptr, ptr0, issuer_vkey.ptr, vrf_vkey.ptr, nonce_vrf.ptr, leader_vrf.ptr, block_body_size, block_body_hash.ptr, operational_cert.ptr, protocol_version.ptr);\n        return HeaderBody.__wrap(ret);\n    }\n}\n/** */\nexport class Int {\n    static __wrap(ptr) {\n        const obj = Object.create(Int.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_int_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.int_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Int}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.int_from_bytes(ptr0, len0);\n        return Int.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} x\n     * @returns {Int}\n     */\n    static new(x) {\n        _assertClass(x, BigNum);\n        var ret = wasm.int_new(x.ptr);\n        return Int.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} x\n     * @returns {Int}\n     */\n    static new_negative(x) {\n        _assertClass(x, BigNum);\n        var ret = wasm.int_new_negative(x.ptr);\n        return Int.__wrap(ret);\n    }\n    /**\n     * @param {number} x\n     * @returns {Int}\n     */\n    static new_i32(x) {\n        var ret = wasm.int_new_i32(x);\n        return Int.__wrap(ret);\n    }\n    /**\n     * @returns {boolean}\n     */\n    is_positive() {\n        var ret = wasm.int_is_positive(this.ptr);\n        return ret !== 0;\n    }\n    /**\n     * BigNum can only contain unsigned u64 values\n     *\n     * This function will return the BigNum representation\n     * only in case the underlying i128 value is positive.\n     *\n     * Otherwise nothing will be returned (undefined).\n     * @returns {BigNum | undefined}\n     */\n    as_positive() {\n        var ret = wasm.int_as_positive(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * BigNum can only contain unsigned u64 values\n     *\n     * This function will return the *absolute* BigNum representation\n     * only in case the underlying i128 value is negative.\n     *\n     * Otherwise nothing will be returned (undefined).\n     * @returns {BigNum | undefined}\n     */\n    as_negative() {\n        var ret = wasm.int_as_negative(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * !!! DEPRECATED !!!\n     * Returns an i32 value in case the underlying original i128 value is within the limits.\n     * Otherwise will just return an empty value (undefined).\n     * @returns {number | undefined}\n     */\n    as_i32() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.int_as_i32(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * Returns the underlying value converted to i32 if possible (within limits)\n     * Otherwise will just return an empty value (undefined).\n     * @returns {number | undefined}\n     */\n    as_i32_or_nothing() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.int_as_i32_or_nothing(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * Returns the underlying value converted to i32 if possible (within limits)\n     * JsError in case of out of boundary overflow\n     * @returns {number}\n     */\n    as_i32_or_fail() {\n        var ret = wasm.int_as_i32_or_fail(this.ptr);\n        return ret;\n    }\n    /**\n     * Returns string representation of the underlying i128 value directly.\n     * Might contain the minus sign (-) in case of negative value.\n     * @returns {string}\n     */\n    to_str() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.int_to_str(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} string\n     * @returns {Int}\n     */\n    static from_str(string) {\n        var ptr0 = passStringToWasm0(string, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.int_from_str(ptr0, len0);\n        return Int.__wrap(ret);\n    }\n}\n/** */\nexport class Ipv4 {\n    static __wrap(ptr) {\n        const obj = Object.create(Ipv4.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ipv4_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ipv4_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Ipv4}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.ipv4_from_bytes(ptr0, len0);\n        return Ipv4.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ipv4_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.ipv4_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {Ipv4}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.ipv4_from_json(ptr0, len0);\n        return Ipv4.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} data\n     * @returns {Ipv4}\n     */\n    static new(data) {\n        var ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.ipv4_new(ptr0, len0);\n        return Ipv4.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    ip() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ipv4_ip(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/** */\nexport class Ipv6 {\n    static __wrap(ptr) {\n        const obj = Object.create(Ipv6.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ipv6_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ipv6_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Ipv6}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.ipv6_from_bytes(ptr0, len0);\n        return Ipv6.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ipv6_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.ipv6_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {Ipv6}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.ipv6_from_json(ptr0, len0);\n        return Ipv6.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} data\n     * @returns {Ipv6}\n     */\n    static new(data) {\n        var ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.ipv6_new(ptr0, len0);\n        return Ipv6.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    ip() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ipv6_ip(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/** */\nexport class KESSignature {\n    static __wrap(ptr) {\n        const obj = Object.create(KESSignature.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_kessignature_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.kessignature_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {KESSignature}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.kessignature_from_bytes(ptr0, len0);\n        return KESSignature.__wrap(ret);\n    }\n}\n/** */\nexport class KESVKey {\n    static __wrap(ptr) {\n        const obj = Object.create(KESVKey.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_kesvkey_free(ptr);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {KESVKey}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.kesvkey_from_bytes(ptr0, len0);\n        return KESVKey.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.kesvkey_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} prefix\n     * @returns {string}\n     */\n    to_bech32(prefix) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.kesvkey_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} bech_str\n     * @returns {KESVKey}\n     */\n    static from_bech32(bech_str) {\n        var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.kesvkey_from_bech32(ptr0, len0);\n        return KESVKey.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_hex() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.kesvkey_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} hex\n     * @returns {KESVKey}\n     */\n    static from_hex(hex) {\n        var ptr0 = passStringToWasm0(hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.kesvkey_from_hex(ptr0, len0);\n        return KESVKey.__wrap(ret);\n    }\n}\n/** */\nexport class Language {\n    static __wrap(ptr) {\n        const obj = Object.create(Language.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_language_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.language_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Language}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.language_from_bytes(ptr0, len0);\n        return Language.__wrap(ret);\n    }\n    /**\n     * @returns {Language}\n     */\n    static new_plutus_v1() {\n        var ret = wasm.language_new_plutus_v1();\n        return Language.__wrap(ret);\n    }\n    /**\n     * @returns {Language}\n     */\n    static new_plutus_v2() {\n        var ret = wasm.language_new_plutus_v2();\n        return Language.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    kind() {\n        var ret = wasm.language_kind(this.ptr);\n        return ret >>> 0;\n    }\n}\n/** */\nexport class Languages {\n    static __wrap(ptr) {\n        const obj = Object.create(Languages.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_languages_free(ptr);\n    }\n    /**\n     * @returns {Languages}\n     */\n    static new() {\n        var ret = wasm.languages_new();\n        return Languages.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.languages_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {Language}\n     */\n    get(index) {\n        var ret = wasm.languages_get(this.ptr, index);\n        return Language.__wrap(ret);\n    }\n    /**\n     * @param {Language} elem\n     */\n    add(elem) {\n        _assertClass(elem, Language);\n        var ptr0 = elem.ptr;\n        elem.ptr = 0;\n        wasm.languages_add(this.ptr, ptr0);\n    }\n}\n/** */\nexport class LegacyDaedalusPrivateKey {\n    static __wrap(ptr) {\n        const obj = Object.create(LegacyDaedalusPrivateKey.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_legacydaedalusprivatekey_free(ptr);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {LegacyDaedalusPrivateKey}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.legacydaedalusprivatekey_from_bytes(ptr0, len0);\n        return LegacyDaedalusPrivateKey.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    as_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.legacydaedalusprivatekey_as_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    chaincode() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.legacydaedalusprivatekey_chaincode(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/** */\nexport class LinearFee {\n    static __wrap(ptr) {\n        const obj = Object.create(LinearFee.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_linearfee_free(ptr);\n    }\n    /**\n     * @returns {BigNum}\n     */\n    constant() {\n        var ret = wasm.linearfee_constant(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {BigNum}\n     */\n    coefficient() {\n        var ret = wasm.linearfee_coefficient(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} coefficient\n     * @param {BigNum} constant\n     * @returns {LinearFee}\n     */\n    static new(coefficient, constant) {\n        _assertClass(coefficient, BigNum);\n        _assertClass(constant, BigNum);\n        var ret = wasm.linearfee_new(coefficient.ptr, constant.ptr);\n        return LinearFee.__wrap(ret);\n    }\n}\n/** */\nexport class MIRToStakeCredentials {\n    static __wrap(ptr) {\n        const obj = Object.create(MIRToStakeCredentials.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_mirtostakecredentials_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.mirtostakecredentials_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {MIRToStakeCredentials}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.mirtostakecredentials_from_bytes(ptr0, len0);\n        return MIRToStakeCredentials.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.mirtostakecredentials_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.mirtostakecredentials_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {MIRToStakeCredentials}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.mirtostakecredentials_from_json(ptr0, len0);\n        return MIRToStakeCredentials.__wrap(ret);\n    }\n    /**\n     * @returns {MIRToStakeCredentials}\n     */\n    static new() {\n        var ret = wasm.mirtostakecredentials_new();\n        return MIRToStakeCredentials.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.mirtostakecredentials_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {StakeCredential} cred\n     * @param {Int} delta\n     * @returns {Int | undefined}\n     */\n    insert(cred, delta) {\n        _assertClass(cred, StakeCredential);\n        _assertClass(delta, Int);\n        var ret = wasm.mirtostakecredentials_insert(this.ptr, cred.ptr, delta.ptr);\n        return ret === 0 ? undefined : Int.__wrap(ret);\n    }\n    /**\n     * @param {StakeCredential} cred\n     * @returns {Int | undefined}\n     */\n    get(cred) {\n        _assertClass(cred, StakeCredential);\n        var ret = wasm.mirtostakecredentials_get(this.ptr, cred.ptr);\n        return ret === 0 ? undefined : Int.__wrap(ret);\n    }\n    /**\n     * @returns {StakeCredentials}\n     */\n    keys() {\n        var ret = wasm.mirtostakecredentials_keys(this.ptr);\n        return StakeCredentials.__wrap(ret);\n    }\n}\n/** */\nexport class MetadataList {\n    static __wrap(ptr) {\n        const obj = Object.create(MetadataList.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_metadatalist_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.metadatalist_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {MetadataList}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.metadatalist_from_bytes(ptr0, len0);\n        return MetadataList.__wrap(ret);\n    }\n    /**\n     * @returns {MetadataList}\n     */\n    static new() {\n        var ret = wasm.metadatalist_new();\n        return MetadataList.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.metadatalist_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {TransactionMetadatum}\n     */\n    get(index) {\n        var ret = wasm.metadatalist_get(this.ptr, index);\n        return TransactionMetadatum.__wrap(ret);\n    }\n    /**\n     * @param {TransactionMetadatum} elem\n     */\n    add(elem) {\n        _assertClass(elem, TransactionMetadatum);\n        wasm.metadatalist_add(this.ptr, elem.ptr);\n    }\n}\n/** */\nexport class MetadataMap {\n    static __wrap(ptr) {\n        const obj = Object.create(MetadataMap.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_metadatamap_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.metadatamap_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {MetadataMap}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.metadatamap_from_bytes(ptr0, len0);\n        return MetadataMap.__wrap(ret);\n    }\n    /**\n     * @returns {MetadataMap}\n     */\n    static new() {\n        var ret = wasm.metadatamap_new();\n        return MetadataMap.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.metadatamap_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {TransactionMetadatum} key\n     * @param {TransactionMetadatum} value\n     * @returns {TransactionMetadatum | undefined}\n     */\n    insert(key, value) {\n        _assertClass(key, TransactionMetadatum);\n        _assertClass(value, TransactionMetadatum);\n        var ret = wasm.metadatamap_insert(this.ptr, key.ptr, value.ptr);\n        return ret === 0 ? undefined : TransactionMetadatum.__wrap(ret);\n    }\n    /**\n     * @param {string} key\n     * @param {TransactionMetadatum} value\n     * @returns {TransactionMetadatum | undefined}\n     */\n    insert_str(key, value) {\n        var ptr0 = passStringToWasm0(key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        _assertClass(value, TransactionMetadatum);\n        var ret = wasm.metadatamap_insert_str(this.ptr, ptr0, len0, value.ptr);\n        return ret === 0 ? undefined : TransactionMetadatum.__wrap(ret);\n    }\n    /**\n     * @param {number} key\n     * @param {TransactionMetadatum} value\n     * @returns {TransactionMetadatum | undefined}\n     */\n    insert_i32(key, value) {\n        _assertClass(value, TransactionMetadatum);\n        var ret = wasm.metadatamap_insert_i32(this.ptr, key, value.ptr);\n        return ret === 0 ? undefined : TransactionMetadatum.__wrap(ret);\n    }\n    /**\n     * @param {TransactionMetadatum} key\n     * @returns {TransactionMetadatum}\n     */\n    get(key) {\n        _assertClass(key, TransactionMetadatum);\n        var ret = wasm.metadatamap_get(this.ptr, key.ptr);\n        return TransactionMetadatum.__wrap(ret);\n    }\n    /**\n     * @param {string} key\n     * @returns {TransactionMetadatum}\n     */\n    get_str(key) {\n        var ptr0 = passStringToWasm0(key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.metadatamap_get_str(this.ptr, ptr0, len0);\n        return TransactionMetadatum.__wrap(ret);\n    }\n    /**\n     * @param {number} key\n     * @returns {TransactionMetadatum}\n     */\n    get_i32(key) {\n        var ret = wasm.metadatamap_get_i32(this.ptr, key);\n        return TransactionMetadatum.__wrap(ret);\n    }\n    /**\n     * @param {TransactionMetadatum} key\n     * @returns {boolean}\n     */\n    has(key) {\n        _assertClass(key, TransactionMetadatum);\n        var ret = wasm.metadatamap_has(this.ptr, key.ptr);\n        return ret !== 0;\n    }\n    /**\n     * @returns {MetadataList}\n     */\n    keys() {\n        var ret = wasm.metadatamap_keys(this.ptr);\n        return MetadataList.__wrap(ret);\n    }\n}\n/** */\nexport class Mint {\n    static __wrap(ptr) {\n        const obj = Object.create(Mint.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_mint_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.mint_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Mint}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.mint_from_bytes(ptr0, len0);\n        return Mint.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.mint_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.mint_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {Mint}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.mint_from_json(ptr0, len0);\n        return Mint.__wrap(ret);\n    }\n    /**\n     * @returns {Mint}\n     */\n    static new() {\n        var ret = wasm.mint_new();\n        return Mint.__wrap(ret);\n    }\n    /**\n     * @param {ScriptHash} key\n     * @param {MintAssets} value\n     * @returns {Mint}\n     */\n    static new_from_entry(key, value) {\n        _assertClass(key, ScriptHash);\n        _assertClass(value, MintAssets);\n        var ret = wasm.mint_new_from_entry(key.ptr, value.ptr);\n        return Mint.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.mint_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {ScriptHash} key\n     * @param {MintAssets} value\n     * @returns {MintAssets | undefined}\n     */\n    insert(key, value) {\n        _assertClass(key, ScriptHash);\n        _assertClass(value, MintAssets);\n        var ret = wasm.mint_insert(this.ptr, key.ptr, value.ptr);\n        return ret === 0 ? undefined : MintAssets.__wrap(ret);\n    }\n    /**\n     * @param {ScriptHash} key\n     * @returns {MintAssets | undefined}\n     */\n    get(key) {\n        _assertClass(key, ScriptHash);\n        var ret = wasm.mint_get(this.ptr, key.ptr);\n        return ret === 0 ? undefined : MintAssets.__wrap(ret);\n    }\n    /**\n     * @returns {ScriptHashes}\n     */\n    keys() {\n        var ret = wasm.mint_keys(this.ptr);\n        return ScriptHashes.__wrap(ret);\n    }\n    /**\n     * Returns the multiasset where only positive (minting) entries are present\n     * @returns {MultiAsset}\n     */\n    as_positive_multiasset() {\n        var ret = wasm.mint_as_positive_multiasset(this.ptr);\n        return MultiAsset.__wrap(ret);\n    }\n    /**\n     * Returns the multiasset where only negative (burning) entries are present\n     * @returns {MultiAsset}\n     */\n    as_negative_multiasset() {\n        var ret = wasm.mint_as_negative_multiasset(this.ptr);\n        return MultiAsset.__wrap(ret);\n    }\n}\n/** */\nexport class MintAssets {\n    static __wrap(ptr) {\n        const obj = Object.create(MintAssets.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_mintassets_free(ptr);\n    }\n    /**\n     * @returns {MintAssets}\n     */\n    static new() {\n        var ret = wasm.mintassets_new();\n        return MintAssets.__wrap(ret);\n    }\n    /**\n     * @param {AssetName} key\n     * @param {Int} value\n     * @returns {MintAssets}\n     */\n    static new_from_entry(key, value) {\n        _assertClass(key, AssetName);\n        _assertClass(value, Int);\n        var ptr0 = value.ptr;\n        value.ptr = 0;\n        var ret = wasm.mintassets_new_from_entry(key.ptr, ptr0);\n        return MintAssets.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.mintassets_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {AssetName} key\n     * @param {Int} value\n     * @returns {Int | undefined}\n     */\n    insert(key, value) {\n        _assertClass(key, AssetName);\n        _assertClass(value, Int);\n        var ptr0 = value.ptr;\n        value.ptr = 0;\n        var ret = wasm.mintassets_insert(this.ptr, key.ptr, ptr0);\n        return ret === 0 ? undefined : Int.__wrap(ret);\n    }\n    /**\n     * @param {AssetName} key\n     * @returns {Int | undefined}\n     */\n    get(key) {\n        _assertClass(key, AssetName);\n        var ret = wasm.mintassets_get(this.ptr, key.ptr);\n        return ret === 0 ? undefined : Int.__wrap(ret);\n    }\n    /**\n     * @returns {AssetNames}\n     */\n    keys() {\n        var ret = wasm.mintassets_keys(this.ptr);\n        return AssetNames.__wrap(ret);\n    }\n}\n/** */\nexport class MoveInstantaneousReward {\n    static __wrap(ptr) {\n        const obj = Object.create(MoveInstantaneousReward.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_moveinstantaneousreward_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.moveinstantaneousreward_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {MoveInstantaneousReward}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.moveinstantaneousreward_from_bytes(ptr0, len0);\n        return MoveInstantaneousReward.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.moveinstantaneousreward_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.moveinstantaneousreward_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {MoveInstantaneousReward}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.moveinstantaneousreward_from_json(ptr0, len0);\n        return MoveInstantaneousReward.__wrap(ret);\n    }\n    /**\n     * @param {number} pot\n     * @param {BigNum} amount\n     * @returns {MoveInstantaneousReward}\n     */\n    static new_to_other_pot(pot, amount) {\n        _assertClass(amount, BigNum);\n        var ret = wasm.moveinstantaneousreward_new_to_other_pot(pot, amount.ptr);\n        return MoveInstantaneousReward.__wrap(ret);\n    }\n    /**\n     * @param {number} pot\n     * @param {MIRToStakeCredentials} amounts\n     * @returns {MoveInstantaneousReward}\n     */\n    static new_to_stake_creds(pot, amounts) {\n        _assertClass(amounts, MIRToStakeCredentials);\n        var ret = wasm.moveinstantaneousreward_new_to_stake_creds(pot, amounts.ptr);\n        return MoveInstantaneousReward.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    pot() {\n        var ret = wasm.moveinstantaneousreward_pot(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {number}\n     */\n    kind() {\n        var ret = wasm.moveinstantaneousreward_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {BigNum | undefined}\n     */\n    as_to_other_pot() {\n        var ret = wasm.moveinstantaneousreward_as_to_other_pot(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {MIRToStakeCredentials | undefined}\n     */\n    as_to_stake_creds() {\n        var ret = wasm.moveinstantaneousreward_as_to_stake_creds(this.ptr);\n        return ret === 0 ? undefined : MIRToStakeCredentials.__wrap(ret);\n    }\n}\n/** */\nexport class MoveInstantaneousRewardsCert {\n    static __wrap(ptr) {\n        const obj = Object.create(MoveInstantaneousRewardsCert.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_moveinstantaneousrewardscert_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.moveinstantaneousrewardscert_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {MoveInstantaneousRewardsCert}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.moveinstantaneousrewardscert_from_bytes(ptr0, len0);\n        return MoveInstantaneousRewardsCert.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.moveinstantaneousrewardscert_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.moveinstantaneousrewardscert_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {MoveInstantaneousRewardsCert}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.moveinstantaneousrewardscert_from_json(ptr0, len0);\n        return MoveInstantaneousRewardsCert.__wrap(ret);\n    }\n    /**\n     * @returns {MoveInstantaneousReward}\n     */\n    move_instantaneous_reward() {\n        var ret = wasm.moveinstantaneousrewardscert_move_instantaneous_reward(this.ptr);\n        return MoveInstantaneousReward.__wrap(ret);\n    }\n    /**\n     * @param {MoveInstantaneousReward} move_instantaneous_reward\n     * @returns {MoveInstantaneousRewardsCert}\n     */\n    static new(move_instantaneous_reward) {\n        _assertClass(move_instantaneous_reward, MoveInstantaneousReward);\n        var ret = wasm.moveinstantaneousrewardscert_new(move_instantaneous_reward.ptr);\n        return MoveInstantaneousRewardsCert.__wrap(ret);\n    }\n}\n/** */\nexport class MultiAsset {\n    static __wrap(ptr) {\n        const obj = Object.create(MultiAsset.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_multiasset_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.multiasset_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {MultiAsset}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.multiasset_from_bytes(ptr0, len0);\n        return MultiAsset.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.multiasset_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.multiasset_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {MultiAsset}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.multiasset_from_json(ptr0, len0);\n        return MultiAsset.__wrap(ret);\n    }\n    /**\n     * @returns {MultiAsset}\n     */\n    static new() {\n        var ret = wasm.multiasset_new();\n        return MultiAsset.__wrap(ret);\n    }\n    /**\n     * the number of unique policy IDs in the multiasset\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.multiasset_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * set (and replace if it exists) all assets with policy {policy_id} to a copy of {assets}\n     * @param {ScriptHash} policy_id\n     * @param {Assets} assets\n     * @returns {Assets | undefined}\n     */\n    insert(policy_id, assets) {\n        _assertClass(policy_id, ScriptHash);\n        _assertClass(assets, Assets);\n        var ret = wasm.multiasset_insert(this.ptr, policy_id.ptr, assets.ptr);\n        return ret === 0 ? undefined : Assets.__wrap(ret);\n    }\n    /**\n     * all assets under {policy_id}, if any exist, or else None (undefined in JS)\n     * @param {ScriptHash} policy_id\n     * @returns {Assets | undefined}\n     */\n    get(policy_id) {\n        _assertClass(policy_id, ScriptHash);\n        var ret = wasm.multiasset_get(this.ptr, policy_id.ptr);\n        return ret === 0 ? undefined : Assets.__wrap(ret);\n    }\n    /**\n     * sets the asset {asset_name} to {value} under policy {policy_id}\n     * returns the previous amount if it was set, or else None (undefined in JS)\n     * @param {ScriptHash} policy_id\n     * @param {AssetName} asset_name\n     * @param {BigNum} value\n     * @returns {BigNum | undefined}\n     */\n    set_asset(policy_id, asset_name, value) {\n        _assertClass(policy_id, ScriptHash);\n        _assertClass(asset_name, AssetName);\n        _assertClass(value, BigNum);\n        var ptr0 = value.ptr;\n        value.ptr = 0;\n        var ret = wasm.multiasset_set_asset(this.ptr, policy_id.ptr, asset_name.ptr, ptr0);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * returns the amount of asset {asset_name} under policy {policy_id}\n     * If such an asset does not exist, 0 is returned.\n     * @param {ScriptHash} policy_id\n     * @param {AssetName} asset_name\n     * @returns {BigNum}\n     */\n    get_asset(policy_id, asset_name) {\n        _assertClass(policy_id, ScriptHash);\n        _assertClass(asset_name, AssetName);\n        var ret = wasm.multiasset_get_asset(this.ptr, policy_id.ptr, asset_name.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * returns all policy IDs used by assets in this multiasset\n     * @returns {ScriptHashes}\n     */\n    keys() {\n        var ret = wasm.multiasset_keys(this.ptr);\n        return ScriptHashes.__wrap(ret);\n    }\n    /**\n     * removes an asset from the list if the result is 0 or less\n     * does not modify this object, instead the result is returned\n     * @param {MultiAsset} rhs_ma\n     * @returns {MultiAsset}\n     */\n    sub(rhs_ma) {\n        _assertClass(rhs_ma, MultiAsset);\n        var ret = wasm.multiasset_sub(this.ptr, rhs_ma.ptr);\n        return MultiAsset.__wrap(ret);\n    }\n}\n/** */\nexport class MultiHostName {\n    static __wrap(ptr) {\n        const obj = Object.create(MultiHostName.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_multihostname_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.multihostname_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {MultiHostName}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.multihostname_from_bytes(ptr0, len0);\n        return MultiHostName.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.multihostname_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.multihostname_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {MultiHostName}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.multihostname_from_json(ptr0, len0);\n        return MultiHostName.__wrap(ret);\n    }\n    /**\n     * @returns {DNSRecordSRV}\n     */\n    dns_name() {\n        var ret = wasm.multihostname_dns_name(this.ptr);\n        return DNSRecordSRV.__wrap(ret);\n    }\n    /**\n     * @param {DNSRecordSRV} dns_name\n     * @returns {MultiHostName}\n     */\n    static new(dns_name) {\n        _assertClass(dns_name, DNSRecordSRV);\n        var ret = wasm.multihostname_new(dns_name.ptr);\n        return MultiHostName.__wrap(ret);\n    }\n}\n/** */\nexport class NativeScript {\n    static __wrap(ptr) {\n        const obj = Object.create(NativeScript.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_nativescript_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.nativescript_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {NativeScript}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.nativescript_from_bytes(ptr0, len0);\n        return NativeScript.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.nativescript_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.nativescript_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {NativeScript}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.nativescript_from_json(ptr0, len0);\n        return NativeScript.__wrap(ret);\n    }\n    /**\n     * @param {number} namespace\n     * @returns {ScriptHash}\n     */\n    hash(namespace) {\n        var ret = wasm.nativescript_hash(this.ptr, namespace);\n        return ScriptHash.__wrap(ret);\n    }\n    /**\n     * @param {ScriptPubkey} script_pubkey\n     * @returns {NativeScript}\n     */\n    static new_script_pubkey(script_pubkey) {\n        _assertClass(script_pubkey, ScriptPubkey);\n        var ret = wasm.nativescript_new_script_pubkey(script_pubkey.ptr);\n        return NativeScript.__wrap(ret);\n    }\n    /**\n     * @param {ScriptAll} script_all\n     * @returns {NativeScript}\n     */\n    static new_script_all(script_all) {\n        _assertClass(script_all, ScriptAll);\n        var ret = wasm.nativescript_new_script_all(script_all.ptr);\n        return NativeScript.__wrap(ret);\n    }\n    /**\n     * @param {ScriptAny} script_any\n     * @returns {NativeScript}\n     */\n    static new_script_any(script_any) {\n        _assertClass(script_any, ScriptAny);\n        var ret = wasm.nativescript_new_script_any(script_any.ptr);\n        return NativeScript.__wrap(ret);\n    }\n    /**\n     * @param {ScriptNOfK} script_n_of_k\n     * @returns {NativeScript}\n     */\n    static new_script_n_of_k(script_n_of_k) {\n        _assertClass(script_n_of_k, ScriptNOfK);\n        var ret = wasm.nativescript_new_script_n_of_k(script_n_of_k.ptr);\n        return NativeScript.__wrap(ret);\n    }\n    /**\n     * @param {TimelockStart} timelock_start\n     * @returns {NativeScript}\n     */\n    static new_timelock_start(timelock_start) {\n        _assertClass(timelock_start, TimelockStart);\n        var ret = wasm.nativescript_new_timelock_start(timelock_start.ptr);\n        return NativeScript.__wrap(ret);\n    }\n    /**\n     * @param {TimelockExpiry} timelock_expiry\n     * @returns {NativeScript}\n     */\n    static new_timelock_expiry(timelock_expiry) {\n        _assertClass(timelock_expiry, TimelockExpiry);\n        var ret = wasm.nativescript_new_timelock_expiry(timelock_expiry.ptr);\n        return NativeScript.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    kind() {\n        var ret = wasm.nativescript_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {ScriptPubkey | undefined}\n     */\n    as_script_pubkey() {\n        var ret = wasm.nativescript_as_script_pubkey(this.ptr);\n        return ret === 0 ? undefined : ScriptPubkey.__wrap(ret);\n    }\n    /**\n     * @returns {ScriptAll | undefined}\n     */\n    as_script_all() {\n        var ret = wasm.nativescript_as_script_all(this.ptr);\n        return ret === 0 ? undefined : ScriptAll.__wrap(ret);\n    }\n    /**\n     * @returns {ScriptAny | undefined}\n     */\n    as_script_any() {\n        var ret = wasm.nativescript_as_script_any(this.ptr);\n        return ret === 0 ? undefined : ScriptAny.__wrap(ret);\n    }\n    /**\n     * @returns {ScriptNOfK | undefined}\n     */\n    as_script_n_of_k() {\n        var ret = wasm.nativescript_as_script_n_of_k(this.ptr);\n        return ret === 0 ? undefined : ScriptNOfK.__wrap(ret);\n    }\n    /**\n     * @returns {TimelockStart | undefined}\n     */\n    as_timelock_start() {\n        var ret = wasm.nativescript_as_timelock_start(this.ptr);\n        return ret === 0 ? undefined : TimelockStart.__wrap(ret);\n    }\n    /**\n     * @returns {TimelockExpiry | undefined}\n     */\n    as_timelock_expiry() {\n        var ret = wasm.nativescript_as_timelock_expiry(this.ptr);\n        return ret === 0 ? undefined : TimelockExpiry.__wrap(ret);\n    }\n    /**\n     * Returns an array of unique Ed25519KeyHashes\n     * contained within this script recursively on any depth level.\n     * The order of the keys in the result is not determined in any way.\n     * @returns {Ed25519KeyHashes}\n     */\n    get_required_signers() {\n        var ret = wasm.nativescript_get_required_signers(this.ptr);\n        return Ed25519KeyHashes.__wrap(ret);\n    }\n}\n/** */\nexport class NativeScripts {\n    static __wrap(ptr) {\n        const obj = Object.create(NativeScripts.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_nativescripts_free(ptr);\n    }\n    /**\n     * @returns {NativeScripts}\n     */\n    static new() {\n        var ret = wasm.nativescripts_new();\n        return NativeScripts.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.nativescripts_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {NativeScript}\n     */\n    get(index) {\n        var ret = wasm.nativescripts_get(this.ptr, index);\n        return NativeScript.__wrap(ret);\n    }\n    /**\n     * @param {NativeScript} elem\n     */\n    add(elem) {\n        _assertClass(elem, NativeScript);\n        wasm.nativescripts_add(this.ptr, elem.ptr);\n    }\n}\n/** */\nexport class NetworkId {\n    static __wrap(ptr) {\n        const obj = Object.create(NetworkId.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_networkid_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.networkid_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {NetworkId}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.networkid_from_bytes(ptr0, len0);\n        return NetworkId.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.networkid_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.networkid_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {NetworkId}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.networkid_from_json(ptr0, len0);\n        return NetworkId.__wrap(ret);\n    }\n    /**\n     * @returns {NetworkId}\n     */\n    static testnet() {\n        var ret = wasm.networkid_testnet();\n        return NetworkId.__wrap(ret);\n    }\n    /**\n     * @returns {NetworkId}\n     */\n    static mainnet() {\n        var ret = wasm.networkid_mainnet();\n        return NetworkId.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    kind() {\n        var ret = wasm.networkid_kind(this.ptr);\n        return ret >>> 0;\n    }\n}\n/** */\nexport class NetworkInfo {\n    static __wrap(ptr) {\n        const obj = Object.create(NetworkInfo.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_networkinfo_free(ptr);\n    }\n    /**\n     * @param {number} network_id\n     * @param {number} protocol_magic\n     * @returns {NetworkInfo}\n     */\n    static new(network_id, protocol_magic) {\n        var ret = wasm.networkinfo_new(network_id, protocol_magic);\n        return NetworkInfo.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    network_id() {\n        var ret = wasm.networkinfo_network_id(this.ptr);\n        return ret;\n    }\n    /**\n     * @returns {number}\n     */\n    protocol_magic() {\n        var ret = wasm.networkinfo_protocol_magic(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {NetworkInfo}\n     */\n    static testnet() {\n        var ret = wasm.networkinfo_testnet();\n        return NetworkInfo.__wrap(ret);\n    }\n    /**\n     * @returns {NetworkInfo}\n     */\n    static mainnet() {\n        var ret = wasm.networkinfo_mainnet();\n        return NetworkInfo.__wrap(ret);\n    }\n}\n/** */\nexport class Nonce {\n    static __wrap(ptr) {\n        const obj = Object.create(Nonce.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_nonce_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.nonce_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Nonce}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.nonce_from_bytes(ptr0, len0);\n        return Nonce.__wrap(ret);\n    }\n    /**\n     * @returns {Nonce}\n     */\n    static new_identity() {\n        var ret = wasm.nonce_new_identity();\n        return Nonce.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} hash\n     * @returns {Nonce}\n     */\n    static new_from_hash(hash) {\n        var ptr0 = passArray8ToWasm0(hash, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.nonce_new_from_hash(ptr0, len0);\n        return Nonce.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    get_hash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.nonce_get_hash(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/** */\nexport class OperationalCert {\n    static __wrap(ptr) {\n        const obj = Object.create(OperationalCert.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_operationalcert_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.operationalcert_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {OperationalCert}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.operationalcert_from_bytes(ptr0, len0);\n        return OperationalCert.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.operationalcert_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.operationalcert_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {OperationalCert}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.operationalcert_from_json(ptr0, len0);\n        return OperationalCert.__wrap(ret);\n    }\n    /**\n     * @returns {KESVKey}\n     */\n    hot_vkey() {\n        var ret = wasm.operationalcert_hot_vkey(this.ptr);\n        return KESVKey.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    sequence_number() {\n        var ret = wasm.operationalcert_sequence_number(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {number}\n     */\n    kes_period() {\n        var ret = wasm.operationalcert_kes_period(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {Ed25519Signature}\n     */\n    sigma() {\n        var ret = wasm.operationalcert_sigma(this.ptr);\n        return Ed25519Signature.__wrap(ret);\n    }\n    /**\n     * @param {KESVKey} hot_vkey\n     * @param {number} sequence_number\n     * @param {number} kes_period\n     * @param {Ed25519Signature} sigma\n     * @returns {OperationalCert}\n     */\n    static new(hot_vkey, sequence_number, kes_period, sigma) {\n        _assertClass(hot_vkey, KESVKey);\n        _assertClass(sigma, Ed25519Signature);\n        var ret = wasm.operationalcert_new(hot_vkey.ptr, sequence_number, kes_period, sigma.ptr);\n        return OperationalCert.__wrap(ret);\n    }\n}\n/** */\nexport class PlutusData {\n    static __wrap(ptr) {\n        const obj = Object.create(PlutusData.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_plutusdata_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.plutusdata_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {PlutusData}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.plutusdata_from_bytes(ptr0, len0);\n        return PlutusData.__wrap(ret);\n    }\n    /**\n     * @param {ConstrPlutusData} constr_plutus_data\n     * @returns {PlutusData}\n     */\n    static new_constr_plutus_data(constr_plutus_data) {\n        _assertClass(constr_plutus_data, ConstrPlutusData);\n        var ret = wasm.plutusdata_new_constr_plutus_data(constr_plutus_data.ptr);\n        return PlutusData.__wrap(ret);\n    }\n    /**\n     * @param {PlutusMap} map\n     * @returns {PlutusData}\n     */\n    static new_map(map) {\n        _assertClass(map, PlutusMap);\n        var ret = wasm.plutusdata_new_map(map.ptr);\n        return PlutusData.__wrap(ret);\n    }\n    /**\n     * @param {PlutusList} list\n     * @returns {PlutusData}\n     */\n    static new_list(list) {\n        _assertClass(list, PlutusList);\n        var ret = wasm.plutusdata_new_list(list.ptr);\n        return PlutusData.__wrap(ret);\n    }\n    /**\n     * @param {BigInt} integer\n     * @returns {PlutusData}\n     */\n    static new_integer(integer) {\n        _assertClass(integer, BigInt);\n        var ret = wasm.plutusdata_new_integer(integer.ptr);\n        return PlutusData.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {PlutusData}\n     */\n    static new_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.plutusdata_new_bytes(ptr0, len0);\n        return PlutusData.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    kind() {\n        var ret = wasm.plutusdata_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {ConstrPlutusData | undefined}\n     */\n    as_constr_plutus_data() {\n        var ret = wasm.plutusdata_as_constr_plutus_data(this.ptr);\n        return ret === 0 ? undefined : ConstrPlutusData.__wrap(ret);\n    }\n    /**\n     * @returns {PlutusMap | undefined}\n     */\n    as_map() {\n        var ret = wasm.plutusdata_as_map(this.ptr);\n        return ret === 0 ? undefined : PlutusMap.__wrap(ret);\n    }\n    /**\n     * @returns {PlutusList | undefined}\n     */\n    as_list() {\n        var ret = wasm.plutusdata_as_list(this.ptr);\n        return ret === 0 ? undefined : PlutusList.__wrap(ret);\n    }\n    /**\n     * @returns {BigInt | undefined}\n     */\n    as_integer() {\n        var ret = wasm.plutusdata_as_integer(this.ptr);\n        return ret === 0 ? undefined : BigInt.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    as_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.plutusdata_as_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/** */\nexport class PlutusList {\n    static __wrap(ptr) {\n        const obj = Object.create(PlutusList.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_plutuslist_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.plutuslist_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {PlutusList}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.plutuslist_from_bytes(ptr0, len0);\n        return PlutusList.__wrap(ret);\n    }\n    /**\n     * @returns {PlutusList}\n     */\n    static new() {\n        var ret = wasm.plutuslist_new();\n        return PlutusList.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.plutuslist_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {PlutusData}\n     */\n    get(index) {\n        var ret = wasm.plutuslist_get(this.ptr, index);\n        return PlutusData.__wrap(ret);\n    }\n    /**\n     * @param {PlutusData} elem\n     */\n    add(elem) {\n        _assertClass(elem, PlutusData);\n        wasm.plutuslist_add(this.ptr, elem.ptr);\n    }\n}\n/** */\nexport class PlutusMap {\n    static __wrap(ptr) {\n        const obj = Object.create(PlutusMap.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_plutusmap_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.plutusmap_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {PlutusMap}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.plutusmap_from_bytes(ptr0, len0);\n        return PlutusMap.__wrap(ret);\n    }\n    /**\n     * @returns {PlutusMap}\n     */\n    static new() {\n        var ret = wasm.plutusmap_new();\n        return PlutusMap.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.plutusmap_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {PlutusData} key\n     * @param {PlutusData} value\n     * @returns {PlutusData | undefined}\n     */\n    insert(key, value) {\n        _assertClass(key, PlutusData);\n        _assertClass(value, PlutusData);\n        var ret = wasm.plutusmap_insert(this.ptr, key.ptr, value.ptr);\n        return ret === 0 ? undefined : PlutusData.__wrap(ret);\n    }\n    /**\n     * @param {PlutusData} key\n     * @returns {PlutusData | undefined}\n     */\n    get(key) {\n        _assertClass(key, PlutusData);\n        var ret = wasm.plutusmap_get(this.ptr, key.ptr);\n        return ret === 0 ? undefined : PlutusData.__wrap(ret);\n    }\n    /**\n     * @returns {PlutusList}\n     */\n    keys() {\n        var ret = wasm.plutusmap_keys(this.ptr);\n        return PlutusList.__wrap(ret);\n    }\n}\n/** */\nexport class PlutusScript {\n    static __wrap(ptr) {\n        const obj = Object.create(PlutusScript.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_plutusscript_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.plutusscript_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {PlutusScript}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.plutusscript_from_bytes(ptr0, len0);\n        return PlutusScript.__wrap(ret);\n    }\n    /**\n     * @param {number} namespace\n     * @returns {ScriptHash}\n     */\n    hash(namespace) {\n        var ret = wasm.plutusscript_hash(this.ptr, namespace);\n        return ScriptHash.__wrap(ret);\n    }\n    /**\n     *     * Creates a new Plutus script from the RAW bytes of the compiled script.\n     *     * This does NOT include any CBOR encoding around these bytes (e.g. from \"cborBytes\" in cardano-cli)\n     *     * If you creating this from those you should use PlutusScript::from_bytes() instead.\n     *\n     * @param {Uint8Array} bytes\n     * @returns {PlutusScript}\n     */\n    static new(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.plutusscript_new(ptr0, len0);\n        return PlutusScript.__wrap(ret);\n    }\n    /**\n     *     * The raw bytes of this compiled Plutus script.\n     *     * If you need \"cborBytes\" for cardano-cli use PlutusScript::to_bytes() instead.\n     *\n     * @returns {Uint8Array}\n     */\n    bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.plutusscript_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/** */\nexport class PlutusScripts {\n    static __wrap(ptr) {\n        const obj = Object.create(PlutusScripts.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_plutusscripts_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.plutusscripts_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {PlutusScripts}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.plutusscripts_from_bytes(ptr0, len0);\n        return PlutusScripts.__wrap(ret);\n    }\n    /**\n     * @returns {PlutusScripts}\n     */\n    static new() {\n        var ret = wasm.plutusscripts_new();\n        return PlutusScripts.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.plutusscripts_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {PlutusScript}\n     */\n    get(index) {\n        var ret = wasm.plutusscripts_get(this.ptr, index);\n        return PlutusScript.__wrap(ret);\n    }\n    /**\n     * @param {PlutusScript} elem\n     */\n    add(elem) {\n        _assertClass(elem, PlutusScript);\n        wasm.plutusscripts_add(this.ptr, elem.ptr);\n    }\n}\n/** */\nexport class PlutusWitness {\n    static __wrap(ptr) {\n        const obj = Object.create(PlutusWitness.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_plutuswitness_free(ptr);\n    }\n    /**\n     * Plutus V1 witness or witness where no script is attached and so version doesn't matter\n     * @param {PlutusData} redeemer\n     * @param {PlutusData | undefined} plutus_data\n     * @param {PlutusScript | undefined} script\n     * @returns {PlutusWitness}\n     */\n    static new(redeemer, plutus_data, script) {\n        _assertClass(redeemer, PlutusData);\n        let ptr0 = 0;\n        if (!isLikeNone(plutus_data)) {\n            _assertClass(plutus_data, PlutusData);\n            ptr0 = plutus_data.ptr;\n            plutus_data.ptr = 0;\n        }\n        let ptr1 = 0;\n        if (!isLikeNone(script)) {\n            _assertClass(script, PlutusScript);\n            ptr1 = script.ptr;\n            script.ptr = 0;\n        }\n        var ret = wasm.plutuswitness_new(redeemer.ptr, ptr0, ptr1);\n        return PlutusWitness.__wrap(ret);\n    }\n    /**\n     * @param {PlutusData} redeemer\n     * @param {PlutusData | undefined} plutus_data\n     * @param {PlutusScript | undefined} script\n     * @returns {PlutusWitness}\n     */\n    static new_plutus_v2(redeemer, plutus_data, script) {\n        _assertClass(redeemer, PlutusData);\n        let ptr0 = 0;\n        if (!isLikeNone(plutus_data)) {\n            _assertClass(plutus_data, PlutusData);\n            ptr0 = plutus_data.ptr;\n            plutus_data.ptr = 0;\n        }\n        let ptr1 = 0;\n        if (!isLikeNone(script)) {\n            _assertClass(script, PlutusScript);\n            ptr1 = script.ptr;\n            script.ptr = 0;\n        }\n        var ret = wasm.plutuswitness_new_plutus_v2(redeemer.ptr, ptr0, ptr1);\n        return PlutusWitness.__wrap(ret);\n    }\n    /**\n     * @returns {PlutusData | undefined}\n     */\n    plutus_data() {\n        var ret = wasm.plutuswitness_plutus_data(this.ptr);\n        return ret === 0 ? undefined : PlutusData.__wrap(ret);\n    }\n    /**\n     * @returns {PlutusData}\n     */\n    redeemer() {\n        var ret = wasm.plutuswitness_redeemer(this.ptr);\n        return PlutusData.__wrap(ret);\n    }\n    /**\n     * @returns {PlutusScript | undefined}\n     */\n    script() {\n        var ret = wasm.plutuswitness_script(this.ptr);\n        return ret === 0 ? undefined : PlutusScript.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    version() {\n        var ret = wasm.plutuswitness_version(this.ptr);\n        return ret >>> 0;\n    }\n}\n/** */\nexport class Pointer {\n    static __wrap(ptr) {\n        const obj = Object.create(Pointer.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_pointer_free(ptr);\n    }\n    /**\n     * @param {BigNum} slot\n     * @param {BigNum} tx_index\n     * @param {BigNum} cert_index\n     * @returns {Pointer}\n     */\n    static new(slot, tx_index, cert_index) {\n        _assertClass(slot, BigNum);\n        _assertClass(tx_index, BigNum);\n        _assertClass(cert_index, BigNum);\n        var ret = wasm.pointer_new(slot.ptr, tx_index.ptr, cert_index.ptr);\n        return Pointer.__wrap(ret);\n    }\n    /**\n     * @returns {BigNum}\n     */\n    slot() {\n        var ret = wasm.pointer_slot(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {BigNum}\n     */\n    tx_index() {\n        var ret = wasm.pointer_tx_index(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {BigNum}\n     */\n    cert_index() {\n        var ret = wasm.pointer_cert_index(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n}\n/** */\nexport class PointerAddress {\n    static __wrap(ptr) {\n        const obj = Object.create(PointerAddress.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_pointeraddress_free(ptr);\n    }\n    /**\n     * @param {number} network\n     * @param {StakeCredential} payment\n     * @param {Pointer} stake\n     * @returns {PointerAddress}\n     */\n    static new(network, payment, stake) {\n        _assertClass(payment, StakeCredential);\n        _assertClass(stake, Pointer);\n        var ret = wasm.pointeraddress_new(network, payment.ptr, stake.ptr);\n        return PointerAddress.__wrap(ret);\n    }\n    /**\n     * @returns {StakeCredential}\n     */\n    payment_cred() {\n        var ret = wasm.pointeraddress_payment_cred(this.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n     * @returns {Pointer}\n     */\n    stake_pointer() {\n        var ret = wasm.pointeraddress_stake_pointer(this.ptr);\n        return Pointer.__wrap(ret);\n    }\n    /**\n     * @returns {Address}\n     */\n    to_address() {\n        var ret = wasm.pointeraddress_to_address(this.ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n     * @param {Address} addr\n     * @returns {PointerAddress | undefined}\n     */\n    static from_address(addr) {\n        _assertClass(addr, Address);\n        var ret = wasm.pointeraddress_from_address(addr.ptr);\n        return ret === 0 ? undefined : PointerAddress.__wrap(ret);\n    }\n}\n/** */\nexport class PoolMetadata {\n    static __wrap(ptr) {\n        const obj = Object.create(PoolMetadata.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_poolmetadata_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.poolmetadata_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {PoolMetadata}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.poolmetadata_from_bytes(ptr0, len0);\n        return PoolMetadata.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.poolmetadata_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.poolmetadata_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {PoolMetadata}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.poolmetadata_from_json(ptr0, len0);\n        return PoolMetadata.__wrap(ret);\n    }\n    /**\n     * @returns {URL}\n     */\n    url() {\n        var ret = wasm.poolmetadata_url(this.ptr);\n        return URL.__wrap(ret);\n    }\n    /**\n     * @returns {PoolMetadataHash}\n     */\n    pool_metadata_hash() {\n        var ret = wasm.poolmetadata_pool_metadata_hash(this.ptr);\n        return PoolMetadataHash.__wrap(ret);\n    }\n    /**\n     * @param {URL} url\n     * @param {PoolMetadataHash} pool_metadata_hash\n     * @returns {PoolMetadata}\n     */\n    static new(url, pool_metadata_hash) {\n        _assertClass(url, URL);\n        _assertClass(pool_metadata_hash, PoolMetadataHash);\n        var ret = wasm.poolmetadata_new(url.ptr, pool_metadata_hash.ptr);\n        return PoolMetadata.__wrap(ret);\n    }\n}\n/** */\nexport class PoolMetadataHash {\n    static __wrap(ptr) {\n        const obj = Object.create(PoolMetadataHash.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_poolmetadatahash_free(ptr);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {PoolMetadataHash}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.poolmetadatahash_from_bytes(ptr0, len0);\n        return PoolMetadataHash.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.poolmetadatahash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} prefix\n     * @returns {string}\n     */\n    to_bech32(prefix) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.poolmetadatahash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} bech_str\n     * @returns {PoolMetadataHash}\n     */\n    static from_bech32(bech_str) {\n        var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.poolmetadatahash_from_bech32(ptr0, len0);\n        return PoolMetadataHash.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_hex() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.poolmetadatahash_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} hex\n     * @returns {PoolMetadataHash}\n     */\n    static from_hex(hex) {\n        var ptr0 = passStringToWasm0(hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.poolmetadatahash_from_hex(ptr0, len0);\n        return PoolMetadataHash.__wrap(ret);\n    }\n}\n/** */\nexport class PoolParams {\n    static __wrap(ptr) {\n        const obj = Object.create(PoolParams.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_poolparams_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.poolparams_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {PoolParams}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.poolparams_from_bytes(ptr0, len0);\n        return PoolParams.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.poolparams_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.poolparams_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {PoolParams}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.poolparams_from_json(ptr0, len0);\n        return PoolParams.__wrap(ret);\n    }\n    /**\n     * @returns {Ed25519KeyHash}\n     */\n    operator() {\n        var ret = wasm.poolparams_operator(this.ptr);\n        return Ed25519KeyHash.__wrap(ret);\n    }\n    /**\n     * @returns {VRFKeyHash}\n     */\n    vrf_keyhash() {\n        var ret = wasm.poolparams_vrf_keyhash(this.ptr);\n        return VRFKeyHash.__wrap(ret);\n    }\n    /**\n     * @returns {BigNum}\n     */\n    pledge() {\n        var ret = wasm.poolparams_pledge(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {BigNum}\n     */\n    cost() {\n        var ret = wasm.poolparams_cost(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {UnitInterval}\n     */\n    margin() {\n        var ret = wasm.poolparams_margin(this.ptr);\n        return UnitInterval.__wrap(ret);\n    }\n    /**\n     * @returns {RewardAddress}\n     */\n    reward_account() {\n        var ret = wasm.poolparams_reward_account(this.ptr);\n        return RewardAddress.__wrap(ret);\n    }\n    /**\n     * @returns {Ed25519KeyHashes}\n     */\n    pool_owners() {\n        var ret = wasm.poolparams_pool_owners(this.ptr);\n        return Ed25519KeyHashes.__wrap(ret);\n    }\n    /**\n     * @returns {Relays}\n     */\n    relays() {\n        var ret = wasm.poolparams_relays(this.ptr);\n        return Relays.__wrap(ret);\n    }\n    /**\n     * @returns {PoolMetadata | undefined}\n     */\n    pool_metadata() {\n        var ret = wasm.poolparams_pool_metadata(this.ptr);\n        return ret === 0 ? undefined : PoolMetadata.__wrap(ret);\n    }\n    /**\n     * @param {Ed25519KeyHash} operator\n     * @param {VRFKeyHash} vrf_keyhash\n     * @param {BigNum} pledge\n     * @param {BigNum} cost\n     * @param {UnitInterval} margin\n     * @param {RewardAddress} reward_account\n     * @param {Ed25519KeyHashes} pool_owners\n     * @param {Relays} relays\n     * @param {PoolMetadata | undefined} pool_metadata\n     * @returns {PoolParams}\n     */\n    static new(operator, vrf_keyhash, pledge, cost, margin, reward_account, pool_owners, relays, pool_metadata) {\n        _assertClass(operator, Ed25519KeyHash);\n        _assertClass(vrf_keyhash, VRFKeyHash);\n        _assertClass(pledge, BigNum);\n        _assertClass(cost, BigNum);\n        _assertClass(margin, UnitInterval);\n        _assertClass(reward_account, RewardAddress);\n        _assertClass(pool_owners, Ed25519KeyHashes);\n        _assertClass(relays, Relays);\n        let ptr0 = 0;\n        if (!isLikeNone(pool_metadata)) {\n            _assertClass(pool_metadata, PoolMetadata);\n            ptr0 = pool_metadata.ptr;\n            pool_metadata.ptr = 0;\n        }\n        var ret = wasm.poolparams_new(operator.ptr, vrf_keyhash.ptr, pledge.ptr, cost.ptr, margin.ptr, reward_account.ptr, pool_owners.ptr, relays.ptr, ptr0);\n        return PoolParams.__wrap(ret);\n    }\n}\n/** */\nexport class PoolRegistration {\n    static __wrap(ptr) {\n        const obj = Object.create(PoolRegistration.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_poolregistration_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.poolregistration_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {PoolRegistration}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.poolregistration_from_bytes(ptr0, len0);\n        return PoolRegistration.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.poolregistration_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.poolregistration_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {PoolRegistration}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.poolregistration_from_json(ptr0, len0);\n        return PoolRegistration.__wrap(ret);\n    }\n    /**\n     * @returns {PoolParams}\n     */\n    pool_params() {\n        var ret = wasm.poolregistration_pool_params(this.ptr);\n        return PoolParams.__wrap(ret);\n    }\n    /**\n     * @param {PoolParams} pool_params\n     * @returns {PoolRegistration}\n     */\n    static new(pool_params) {\n        _assertClass(pool_params, PoolParams);\n        var ret = wasm.poolregistration_new(pool_params.ptr);\n        return PoolRegistration.__wrap(ret);\n    }\n    /**\n     * @param {boolean} update\n     */\n    set_is_update(update) {\n        wasm.poolregistration_set_is_update(this.ptr, update);\n    }\n}\n/** */\nexport class PoolRetirement {\n    static __wrap(ptr) {\n        const obj = Object.create(PoolRetirement.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_poolretirement_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.poolretirement_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {PoolRetirement}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.poolretirement_from_bytes(ptr0, len0);\n        return PoolRetirement.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.poolretirement_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.poolretirement_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {PoolRetirement}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.poolretirement_from_json(ptr0, len0);\n        return PoolRetirement.__wrap(ret);\n    }\n    /**\n     * @returns {Ed25519KeyHash}\n     */\n    pool_keyhash() {\n        var ret = wasm.poolretirement_pool_keyhash(this.ptr);\n        return Ed25519KeyHash.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    epoch() {\n        var ret = wasm.poolretirement_epoch(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {Ed25519KeyHash} pool_keyhash\n     * @param {number} epoch\n     * @returns {PoolRetirement}\n     */\n    static new(pool_keyhash, epoch) {\n        _assertClass(pool_keyhash, Ed25519KeyHash);\n        var ret = wasm.poolretirement_new(pool_keyhash.ptr, epoch);\n        return PoolRetirement.__wrap(ret);\n    }\n}\n/** */\nexport class PrivateKey {\n    static __wrap(ptr) {\n        const obj = Object.create(PrivateKey.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_privatekey_free(ptr);\n    }\n    /**\n     * @returns {PublicKey}\n     */\n    to_public() {\n        var ret = wasm.privatekey_to_public(this.ptr);\n        return PublicKey.__wrap(ret);\n    }\n    /**\n     * @returns {PrivateKey}\n     */\n    static generate_ed25519() {\n        var ret = wasm.privatekey_generate_ed25519();\n        return PrivateKey.__wrap(ret);\n    }\n    /**\n     * @returns {PrivateKey}\n     */\n    static generate_ed25519extended() {\n        var ret = wasm.privatekey_generate_ed25519extended();\n        return PrivateKey.__wrap(ret);\n    }\n    /**\n     * Get private key from its bech32 representation\n     * ```javascript\n     * PrivateKey.from_bech32(&#39;ed25519_sk1ahfetf02qwwg4dkq7mgp4a25lx5vh9920cr5wnxmpzz9906qvm8qwvlts0&#39;);\n     * ```\n     * For an extended 25519 key\n     * ```javascript\n     * PrivateKey.from_bech32(&#39;ed25519e_sk1gqwl4szuwwh6d0yk3nsqcc6xxc3fpvjlevgwvt60df59v8zd8f8prazt8ln3lmz096ux3xvhhvm3ca9wj2yctdh3pnw0szrma07rt5gl748fp&#39;);\n     * ```\n     * @param {string} bech32_str\n     * @returns {PrivateKey}\n     */\n    static from_bech32(bech32_str) {\n        var ptr0 = passStringToWasm0(bech32_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.privatekey_from_bech32(ptr0, len0);\n        return PrivateKey.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_bech32() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.privatekey_to_bech32(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    as_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.privatekey_as_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {PrivateKey}\n     */\n    static from_extended_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.privatekey_from_extended_bytes(ptr0, len0);\n        return PrivateKey.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {PrivateKey}\n     */\n    static from_normal_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.privatekey_from_normal_bytes(ptr0, len0);\n        return PrivateKey.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} message\n     * @returns {Ed25519Signature}\n     */\n    sign(message) {\n        var ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.privatekey_sign(this.ptr, ptr0, len0);\n        return Ed25519Signature.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {PrivateKey}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.privatekey_from_bytes(ptr0, len0);\n        return PrivateKey.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.privatekey_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/** */\nexport class ProposedProtocolParameterUpdates {\n    static __wrap(ptr) {\n        const obj = Object.create(ProposedProtocolParameterUpdates.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_proposedprotocolparameterupdates_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.proposedprotocolparameterupdates_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {ProposedProtocolParameterUpdates}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.proposedprotocolparameterupdates_from_bytes(ptr0, len0);\n        return ProposedProtocolParameterUpdates.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.proposedprotocolparameterupdates_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.proposedprotocolparameterupdates_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {ProposedProtocolParameterUpdates}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.proposedprotocolparameterupdates_from_json(ptr0, len0);\n        return ProposedProtocolParameterUpdates.__wrap(ret);\n    }\n    /**\n     * @returns {ProposedProtocolParameterUpdates}\n     */\n    static new() {\n        var ret = wasm.proposedprotocolparameterupdates_new();\n        return ProposedProtocolParameterUpdates.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.proposedprotocolparameterupdates_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {GenesisHash} key\n     * @param {ProtocolParamUpdate} value\n     * @returns {ProtocolParamUpdate | undefined}\n     */\n    insert(key, value) {\n        _assertClass(key, GenesisHash);\n        _assertClass(value, ProtocolParamUpdate);\n        var ret = wasm.proposedprotocolparameterupdates_insert(this.ptr, key.ptr, value.ptr);\n        return ret === 0 ? undefined : ProtocolParamUpdate.__wrap(ret);\n    }\n    /**\n     * @param {GenesisHash} key\n     * @returns {ProtocolParamUpdate | undefined}\n     */\n    get(key) {\n        _assertClass(key, GenesisHash);\n        var ret = wasm.proposedprotocolparameterupdates_get(this.ptr, key.ptr);\n        return ret === 0 ? undefined : ProtocolParamUpdate.__wrap(ret);\n    }\n    /**\n     * @returns {GenesisHashes}\n     */\n    keys() {\n        var ret = wasm.proposedprotocolparameterupdates_keys(this.ptr);\n        return GenesisHashes.__wrap(ret);\n    }\n}\n/** */\nexport class ProtocolParamUpdate {\n    static __wrap(ptr) {\n        const obj = Object.create(ProtocolParamUpdate.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_protocolparamupdate_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.protocolparamupdate_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {ProtocolParamUpdate}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.protocolparamupdate_from_bytes(ptr0, len0);\n        return ProtocolParamUpdate.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.protocolparamupdate_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.protocolparamupdate_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {ProtocolParamUpdate}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.protocolparamupdate_from_json(ptr0, len0);\n        return ProtocolParamUpdate.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} minfee_a\n     */\n    set_minfee_a(minfee_a) {\n        _assertClass(minfee_a, BigNum);\n        wasm.protocolparamupdate_set_minfee_a(this.ptr, minfee_a.ptr);\n    }\n    /**\n     * @returns {BigNum | undefined}\n     */\n    minfee_a() {\n        var ret = wasm.protocolparamupdate_minfee_a(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} minfee_b\n     */\n    set_minfee_b(minfee_b) {\n        _assertClass(minfee_b, BigNum);\n        wasm.protocolparamupdate_set_minfee_b(this.ptr, minfee_b.ptr);\n    }\n    /**\n     * @returns {BigNum | undefined}\n     */\n    minfee_b() {\n        var ret = wasm.protocolparamupdate_minfee_b(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * @param {number} max_block_body_size\n     */\n    set_max_block_body_size(max_block_body_size) {\n        wasm.protocolparamupdate_set_max_block_body_size(this.ptr, max_block_body_size);\n    }\n    /**\n     * @returns {number | undefined}\n     */\n    max_block_body_size() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.protocolparamupdate_max_block_body_size(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1 >>> 0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} max_tx_size\n     */\n    set_max_tx_size(max_tx_size) {\n        wasm.protocolparamupdate_set_max_tx_size(this.ptr, max_tx_size);\n    }\n    /**\n     * @returns {number | undefined}\n     */\n    max_tx_size() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.protocolparamupdate_max_tx_size(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1 >>> 0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} max_block_header_size\n     */\n    set_max_block_header_size(max_block_header_size) {\n        wasm.protocolparamupdate_set_max_block_header_size(this.ptr, max_block_header_size);\n    }\n    /**\n     * @returns {number | undefined}\n     */\n    max_block_header_size() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.protocolparamupdate_max_block_header_size(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1 >>> 0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {BigNum} key_deposit\n     */\n    set_key_deposit(key_deposit) {\n        _assertClass(key_deposit, BigNum);\n        wasm.protocolparamupdate_set_key_deposit(this.ptr, key_deposit.ptr);\n    }\n    /**\n     * @returns {BigNum | undefined}\n     */\n    key_deposit() {\n        var ret = wasm.protocolparamupdate_key_deposit(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} pool_deposit\n     */\n    set_pool_deposit(pool_deposit) {\n        _assertClass(pool_deposit, BigNum);\n        wasm.protocolparamupdate_set_pool_deposit(this.ptr, pool_deposit.ptr);\n    }\n    /**\n     * @returns {BigNum | undefined}\n     */\n    pool_deposit() {\n        var ret = wasm.protocolparamupdate_pool_deposit(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * @param {number} max_epoch\n     */\n    set_max_epoch(max_epoch) {\n        wasm.protocolparamupdate_set_max_epoch(this.ptr, max_epoch);\n    }\n    /**\n     * @returns {number | undefined}\n     */\n    max_epoch() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.protocolparamupdate_max_epoch(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1 >>> 0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} n_opt\n     */\n    set_n_opt(n_opt) {\n        wasm.protocolparamupdate_set_n_opt(this.ptr, n_opt);\n    }\n    /**\n     * @returns {number | undefined}\n     */\n    n_opt() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.protocolparamupdate_n_opt(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1 >>> 0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {UnitInterval} pool_pledge_influence\n     */\n    set_pool_pledge_influence(pool_pledge_influence) {\n        _assertClass(pool_pledge_influence, UnitInterval);\n        wasm.protocolparamupdate_set_pool_pledge_influence(this.ptr, pool_pledge_influence.ptr);\n    }\n    /**\n     * @returns {UnitInterval | undefined}\n     */\n    pool_pledge_influence() {\n        var ret = wasm.protocolparamupdate_pool_pledge_influence(this.ptr);\n        return ret === 0 ? undefined : UnitInterval.__wrap(ret);\n    }\n    /**\n     * @param {UnitInterval} expansion_rate\n     */\n    set_expansion_rate(expansion_rate) {\n        _assertClass(expansion_rate, UnitInterval);\n        wasm.protocolparamupdate_set_expansion_rate(this.ptr, expansion_rate.ptr);\n    }\n    /**\n     * @returns {UnitInterval | undefined}\n     */\n    expansion_rate() {\n        var ret = wasm.protocolparamupdate_expansion_rate(this.ptr);\n        return ret === 0 ? undefined : UnitInterval.__wrap(ret);\n    }\n    /**\n     * @param {UnitInterval} treasury_growth_rate\n     */\n    set_treasury_growth_rate(treasury_growth_rate) {\n        _assertClass(treasury_growth_rate, UnitInterval);\n        wasm.protocolparamupdate_set_treasury_growth_rate(this.ptr, treasury_growth_rate.ptr);\n    }\n    /**\n     * @returns {UnitInterval | undefined}\n     */\n    treasury_growth_rate() {\n        var ret = wasm.protocolparamupdate_treasury_growth_rate(this.ptr);\n        return ret === 0 ? undefined : UnitInterval.__wrap(ret);\n    }\n    /**\n     * @param {UnitInterval} d\n     */\n    set_d(d) {\n        _assertClass(d, UnitInterval);\n        wasm.protocolparamupdate_set_d(this.ptr, d.ptr);\n    }\n    /**\n     * @returns {UnitInterval | undefined}\n     */\n    d() {\n        var ret = wasm.protocolparamupdate_d(this.ptr);\n        return ret === 0 ? undefined : UnitInterval.__wrap(ret);\n    }\n    /**\n     * @param {Nonce} extra_entropy\n     */\n    set_extra_entropy(extra_entropy) {\n        _assertClass(extra_entropy, Nonce);\n        wasm.protocolparamupdate_set_extra_entropy(this.ptr, extra_entropy.ptr);\n    }\n    /**\n     * @returns {Nonce | undefined}\n     */\n    extra_entropy() {\n        var ret = wasm.protocolparamupdate_extra_entropy(this.ptr);\n        return ret === 0 ? undefined : Nonce.__wrap(ret);\n    }\n    /**\n     * @param {ProtocolVersion} protocol_version\n     */\n    set_protocol_version(protocol_version) {\n        _assertClass(protocol_version, ProtocolVersion);\n        wasm.protocolparamupdate_set_protocol_version(this.ptr, protocol_version.ptr);\n    }\n    /**\n     * @returns {ProtocolVersion | undefined}\n     */\n    protocol_version() {\n        var ret = wasm.protocolparamupdate_protocol_version(this.ptr);\n        return ret === 0 ? undefined : ProtocolVersion.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} min_pool_cost\n     */\n    set_min_pool_cost(min_pool_cost) {\n        _assertClass(min_pool_cost, BigNum);\n        wasm.protocolparamupdate_set_min_pool_cost(this.ptr, min_pool_cost.ptr);\n    }\n    /**\n     * @returns {BigNum | undefined}\n     */\n    min_pool_cost() {\n        var ret = wasm.protocolparamupdate_min_pool_cost(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} ada_per_utxo_byte\n     */\n    set_ada_per_utxo_byte(ada_per_utxo_byte) {\n        _assertClass(ada_per_utxo_byte, BigNum);\n        wasm.protocolparamupdate_set_ada_per_utxo_byte(this.ptr, ada_per_utxo_byte.ptr);\n    }\n    /**\n     * @returns {BigNum | undefined}\n     */\n    ada_per_utxo_byte() {\n        var ret = wasm.protocolparamupdate_ada_per_utxo_byte(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * @param {Costmdls} cost_models\n     */\n    set_cost_models(cost_models) {\n        _assertClass(cost_models, Costmdls);\n        wasm.protocolparamupdate_set_cost_models(this.ptr, cost_models.ptr);\n    }\n    /**\n     * @returns {Costmdls | undefined}\n     */\n    cost_models() {\n        var ret = wasm.protocolparamupdate_cost_models(this.ptr);\n        return ret === 0 ? undefined : Costmdls.__wrap(ret);\n    }\n    /**\n     * @param {ExUnitPrices} execution_costs\n     */\n    set_execution_costs(execution_costs) {\n        _assertClass(execution_costs, ExUnitPrices);\n        wasm.protocolparamupdate_set_execution_costs(this.ptr, execution_costs.ptr);\n    }\n    /**\n     * @returns {ExUnitPrices | undefined}\n     */\n    execution_costs() {\n        var ret = wasm.protocolparamupdate_execution_costs(this.ptr);\n        return ret === 0 ? undefined : ExUnitPrices.__wrap(ret);\n    }\n    /**\n     * @param {ExUnits} max_tx_ex_units\n     */\n    set_max_tx_ex_units(max_tx_ex_units) {\n        _assertClass(max_tx_ex_units, ExUnits);\n        wasm.protocolparamupdate_set_max_tx_ex_units(this.ptr, max_tx_ex_units.ptr);\n    }\n    /**\n     * @returns {ExUnits | undefined}\n     */\n    max_tx_ex_units() {\n        var ret = wasm.protocolparamupdate_max_tx_ex_units(this.ptr);\n        return ret === 0 ? undefined : ExUnits.__wrap(ret);\n    }\n    /**\n     * @param {ExUnits} max_block_ex_units\n     */\n    set_max_block_ex_units(max_block_ex_units) {\n        _assertClass(max_block_ex_units, ExUnits);\n        wasm.protocolparamupdate_set_max_block_ex_units(this.ptr, max_block_ex_units.ptr);\n    }\n    /**\n     * @returns {ExUnits | undefined}\n     */\n    max_block_ex_units() {\n        var ret = wasm.protocolparamupdate_max_block_ex_units(this.ptr);\n        return ret === 0 ? undefined : ExUnits.__wrap(ret);\n    }\n    /**\n     * @param {number} max_value_size\n     */\n    set_max_value_size(max_value_size) {\n        wasm.protocolparamupdate_set_max_value_size(this.ptr, max_value_size);\n    }\n    /**\n     * @returns {number | undefined}\n     */\n    max_value_size() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.protocolparamupdate_max_value_size(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1 >>> 0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} collateral_percentage\n     */\n    set_collateral_percentage(collateral_percentage) {\n        wasm.protocolparamupdate_set_collateral_percentage(this.ptr, collateral_percentage);\n    }\n    /**\n     * @returns {number | undefined}\n     */\n    collateral_percentage() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.protocolparamupdate_collateral_percentage(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1 >>> 0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} max_collateral_inputs\n     */\n    set_max_collateral_inputs(max_collateral_inputs) {\n        wasm.protocolparamupdate_set_max_collateral_inputs(this.ptr, max_collateral_inputs);\n    }\n    /**\n     * @returns {number | undefined}\n     */\n    max_collateral_inputs() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.protocolparamupdate_max_collateral_inputs(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1 >>> 0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {ProtocolParamUpdate}\n     */\n    static new() {\n        var ret = wasm.protocolparamupdate_new();\n        return ProtocolParamUpdate.__wrap(ret);\n    }\n}\n/** */\nexport class ProtocolVersion {\n    static __wrap(ptr) {\n        const obj = Object.create(ProtocolVersion.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_protocolversion_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.protocolversion_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {ProtocolVersion}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.protocolversion_from_bytes(ptr0, len0);\n        return ProtocolVersion.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.protocolversion_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.protocolversion_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {ProtocolVersion}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.protocolversion_from_json(ptr0, len0);\n        return ProtocolVersion.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    major() {\n        var ret = wasm.protocolversion_major(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {number}\n     */\n    minor() {\n        var ret = wasm.protocolversion_minor(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} major\n     * @param {number} minor\n     * @returns {ProtocolVersion}\n     */\n    static new(major, minor) {\n        var ret = wasm.protocolversion_new(major, minor);\n        return ProtocolVersion.__wrap(ret);\n    }\n}\n/**\n * ED25519 key used as public key\n */\nexport class PublicKey {\n    static __wrap(ptr) {\n        const obj = Object.create(PublicKey.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_publickey_free(ptr);\n    }\n    /**\n     * Get public key from its bech32 representation\n     * Example:\n     * ```javascript\n     * const pkey = PublicKey.from_bech32(&#39;ed25519_pk1dgaagyh470y66p899txcl3r0jaeaxu6yd7z2dxyk55qcycdml8gszkxze2&#39;);\n     * ```\n     * @param {string} bech32_str\n     * @returns {PublicKey}\n     */\n    static from_bech32(bech32_str) {\n        var ptr0 = passStringToWasm0(bech32_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.publickey_from_bech32(ptr0, len0);\n        return PublicKey.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_bech32() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.publickey_to_bech32(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    as_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.publickey_as_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {PublicKey}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.publickey_from_bytes(ptr0, len0);\n        return PublicKey.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} data\n     * @param {Ed25519Signature} signature\n     * @returns {boolean}\n     */\n    verify(data, signature) {\n        var ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        _assertClass(signature, Ed25519Signature);\n        var ret = wasm.publickey_verify(this.ptr, ptr0, len0, signature.ptr);\n        return ret !== 0;\n    }\n    /**\n     * @returns {Ed25519KeyHash}\n     */\n    hash() {\n        var ret = wasm.publickey_hash(this.ptr);\n        return Ed25519KeyHash.__wrap(ret);\n    }\n}\n/** */\nexport class PublicKeys {\n    static __wrap(ptr) {\n        const obj = Object.create(PublicKeys.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_publickeys_free(ptr);\n    }\n    /** */\n    constructor() {\n        var ret = wasm.publickeys_new();\n        return PublicKeys.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    size() {\n        var ret = wasm.publickeys_size(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {PublicKey}\n     */\n    get(index) {\n        var ret = wasm.publickeys_get(this.ptr, index);\n        return PublicKey.__wrap(ret);\n    }\n    /**\n     * @param {PublicKey} key\n     */\n    add(key) {\n        _assertClass(key, PublicKey);\n        wasm.publickeys_add(this.ptr, key.ptr);\n    }\n}\n/** */\nexport class Redeemer {\n    static __wrap(ptr) {\n        const obj = Object.create(Redeemer.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_redeemer_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.redeemer_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Redeemer}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.redeemer_from_bytes(ptr0, len0);\n        return Redeemer.__wrap(ret);\n    }\n    /**\n     * @returns {RedeemerTag}\n     */\n    tag() {\n        var ret = wasm.redeemer_tag(this.ptr);\n        return RedeemerTag.__wrap(ret);\n    }\n    /**\n     * @returns {BigNum}\n     */\n    index() {\n        var ret = wasm.redeemer_index(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {PlutusData}\n     */\n    data() {\n        var ret = wasm.redeemer_data(this.ptr);\n        return PlutusData.__wrap(ret);\n    }\n    /**\n     * @returns {ExUnits}\n     */\n    ex_units() {\n        var ret = wasm.redeemer_ex_units(this.ptr);\n        return ExUnits.__wrap(ret);\n    }\n    /**\n     * @param {RedeemerTag} tag\n     * @param {BigNum} index\n     * @param {PlutusData} data\n     * @param {ExUnits} ex_units\n     * @returns {Redeemer}\n     */\n    static new(tag, index, data, ex_units) {\n        _assertClass(tag, RedeemerTag);\n        _assertClass(index, BigNum);\n        _assertClass(data, PlutusData);\n        _assertClass(ex_units, ExUnits);\n        var ret = wasm.redeemer_new(tag.ptr, index.ptr, data.ptr, ex_units.ptr);\n        return Redeemer.__wrap(ret);\n    }\n}\n/** */\nexport class RedeemerTag {\n    static __wrap(ptr) {\n        const obj = Object.create(RedeemerTag.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_redeemertag_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.redeemertag_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {RedeemerTag}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.redeemertag_from_bytes(ptr0, len0);\n        return RedeemerTag.__wrap(ret);\n    }\n    /**\n     * @returns {RedeemerTag}\n     */\n    static new_spend() {\n        var ret = wasm.redeemertag_new_spend();\n        return RedeemerTag.__wrap(ret);\n    }\n    /**\n     * @returns {RedeemerTag}\n     */\n    static new_mint() {\n        var ret = wasm.redeemertag_new_mint();\n        return RedeemerTag.__wrap(ret);\n    }\n    /**\n     * @returns {RedeemerTag}\n     */\n    static new_cert() {\n        var ret = wasm.redeemertag_new_cert();\n        return RedeemerTag.__wrap(ret);\n    }\n    /**\n     * @returns {RedeemerTag}\n     */\n    static new_reward() {\n        var ret = wasm.redeemertag_new_reward();\n        return RedeemerTag.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    kind() {\n        var ret = wasm.redeemertag_kind(this.ptr);\n        return ret >>> 0;\n    }\n}\n/** */\nexport class RedeemerWitnessKey {\n    static __wrap(ptr) {\n        const obj = Object.create(RedeemerWitnessKey.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_redeemerwitnesskey_free(ptr);\n    }\n    /**\n     * @returns {RedeemerTag}\n     */\n    tag() {\n        var ret = wasm.redeemerwitnesskey_tag(this.ptr);\n        return RedeemerTag.__wrap(ret);\n    }\n    /**\n     * @returns {BigNum}\n     */\n    index() {\n        var ret = wasm.redeemerwitnesskey_index(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @param {RedeemerTag} tag\n     * @param {BigNum} index\n     * @returns {RedeemerWitnessKey}\n     */\n    static new(tag, index) {\n        _assertClass(tag, RedeemerTag);\n        _assertClass(index, BigNum);\n        var ret = wasm.redeemerwitnesskey_new(tag.ptr, index.ptr);\n        return RedeemerWitnessKey.__wrap(ret);\n    }\n}\n/** */\nexport class Redeemers {\n    static __wrap(ptr) {\n        const obj = Object.create(Redeemers.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_redeemers_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.redeemers_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Redeemers}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.redeemers_from_bytes(ptr0, len0);\n        return Redeemers.__wrap(ret);\n    }\n    /**\n     * @returns {Redeemers}\n     */\n    static new() {\n        var ret = wasm.redeemers_new();\n        return Redeemers.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.redeemers_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {Redeemer}\n     */\n    get(index) {\n        var ret = wasm.redeemers_get(this.ptr, index);\n        return Redeemer.__wrap(ret);\n    }\n    /**\n     * @param {Redeemer} elem\n     */\n    add(elem) {\n        _assertClass(elem, Redeemer);\n        wasm.redeemers_add(this.ptr, elem.ptr);\n    }\n}\n/** */\nexport class Relay {\n    static __wrap(ptr) {\n        const obj = Object.create(Relay.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_relay_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.relay_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Relay}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.relay_from_bytes(ptr0, len0);\n        return Relay.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.relay_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.relay_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {Relay}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.relay_from_json(ptr0, len0);\n        return Relay.__wrap(ret);\n    }\n    /**\n     * @param {SingleHostAddr} single_host_addr\n     * @returns {Relay}\n     */\n    static new_single_host_addr(single_host_addr) {\n        _assertClass(single_host_addr, SingleHostAddr);\n        var ret = wasm.relay_new_single_host_addr(single_host_addr.ptr);\n        return Relay.__wrap(ret);\n    }\n    /**\n     * @param {SingleHostName} single_host_name\n     * @returns {Relay}\n     */\n    static new_single_host_name(single_host_name) {\n        _assertClass(single_host_name, SingleHostName);\n        var ret = wasm.relay_new_single_host_name(single_host_name.ptr);\n        return Relay.__wrap(ret);\n    }\n    /**\n     * @param {MultiHostName} multi_host_name\n     * @returns {Relay}\n     */\n    static new_multi_host_name(multi_host_name) {\n        _assertClass(multi_host_name, MultiHostName);\n        var ret = wasm.relay_new_multi_host_name(multi_host_name.ptr);\n        return Relay.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    kind() {\n        var ret = wasm.relay_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {SingleHostAddr | undefined}\n     */\n    as_single_host_addr() {\n        var ret = wasm.relay_as_single_host_addr(this.ptr);\n        return ret === 0 ? undefined : SingleHostAddr.__wrap(ret);\n    }\n    /**\n     * @returns {SingleHostName | undefined}\n     */\n    as_single_host_name() {\n        var ret = wasm.relay_as_single_host_name(this.ptr);\n        return ret === 0 ? undefined : SingleHostName.__wrap(ret);\n    }\n    /**\n     * @returns {MultiHostName | undefined}\n     */\n    as_multi_host_name() {\n        var ret = wasm.relay_as_multi_host_name(this.ptr);\n        return ret === 0 ? undefined : MultiHostName.__wrap(ret);\n    }\n}\n/** */\nexport class Relays {\n    static __wrap(ptr) {\n        const obj = Object.create(Relays.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_relays_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.relays_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Relays}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.relays_from_bytes(ptr0, len0);\n        return Relays.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.relays_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.relays_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {Relays}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.relays_from_json(ptr0, len0);\n        return Relays.__wrap(ret);\n    }\n    /**\n     * @returns {Relays}\n     */\n    static new() {\n        var ret = wasm.relays_new();\n        return Relays.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.relays_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {Relay}\n     */\n    get(index) {\n        var ret = wasm.relays_get(this.ptr, index);\n        return Relay.__wrap(ret);\n    }\n    /**\n     * @param {Relay} elem\n     */\n    add(elem) {\n        _assertClass(elem, Relay);\n        wasm.relays_add(this.ptr, elem.ptr);\n    }\n}\n/** */\nexport class RequiredWitnessSet {\n    static __wrap(ptr) {\n        const obj = Object.create(RequiredWitnessSet.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_requiredwitnessset_free(ptr);\n    }\n    /**\n     * @param {Vkeywitness} vkey\n     */\n    add_vkey(vkey) {\n        _assertClass(vkey, Vkeywitness);\n        wasm.requiredwitnessset_add_vkey(this.ptr, vkey.ptr);\n    }\n    /**\n     * @param {Vkey} vkey\n     */\n    add_vkey_key(vkey) {\n        _assertClass(vkey, Vkey);\n        wasm.requiredwitnessset_add_vkey_key(this.ptr, vkey.ptr);\n    }\n    /**\n     * @param {Ed25519KeyHash} hash\n     */\n    add_vkey_key_hash(hash) {\n        _assertClass(hash, Ed25519KeyHash);\n        wasm.requiredwitnessset_add_vkey_key_hash(this.ptr, hash.ptr);\n    }\n    /**\n     * @param {BootstrapWitness} bootstrap\n     */\n    add_bootstrap(bootstrap) {\n        _assertClass(bootstrap, BootstrapWitness);\n        wasm.requiredwitnessset_add_bootstrap(this.ptr, bootstrap.ptr);\n    }\n    /**\n     * @param {Vkey} bootstrap\n     */\n    add_bootstrap_key(bootstrap) {\n        _assertClass(bootstrap, Vkey);\n        wasm.requiredwitnessset_add_bootstrap_key(this.ptr, bootstrap.ptr);\n    }\n    /**\n     * @param {Ed25519KeyHash} hash\n     */\n    add_bootstrap_key_hash(hash) {\n        _assertClass(hash, Ed25519KeyHash);\n        wasm.requiredwitnessset_add_bootstrap_key_hash(this.ptr, hash.ptr);\n    }\n    /**\n     * @param {NativeScript} native_script\n     */\n    add_native_script(native_script) {\n        _assertClass(native_script, NativeScript);\n        wasm.requiredwitnessset_add_native_script(this.ptr, native_script.ptr);\n    }\n    /**\n     * @param {ScriptHash} native_script\n     */\n    add_native_script_hash(native_script) {\n        _assertClass(native_script, ScriptHash);\n        wasm.requiredwitnessset_add_native_script_hash(this.ptr, native_script.ptr);\n    }\n    /**\n     * @param {PlutusScript} plutus_script\n     */\n    add_plutus_script(plutus_script) {\n        _assertClass(plutus_script, PlutusScript);\n        wasm.requiredwitnessset_add_plutus_script(this.ptr, plutus_script.ptr);\n    }\n    /**\n     * @param {PlutusScript} plutus_script\n     */\n    add_plutus_v2_script(plutus_script) {\n        _assertClass(plutus_script, PlutusScript);\n        wasm.requiredwitnessset_add_plutus_v2_script(this.ptr, plutus_script.ptr);\n    }\n    /**\n     * @param {ScriptHash} plutus_script\n     */\n    add_plutus_hash(plutus_script) {\n        _assertClass(plutus_script, ScriptHash);\n        wasm.requiredwitnessset_add_plutus_hash(this.ptr, plutus_script.ptr);\n    }\n    /**\n     * @param {PlutusData} plutus_datum\n     */\n    add_plutus_datum(plutus_datum) {\n        _assertClass(plutus_datum, PlutusData);\n        wasm.requiredwitnessset_add_plutus_datum(this.ptr, plutus_datum.ptr);\n    }\n    /**\n     * @param {DataHash} plutus_datum\n     */\n    add_plutus_datum_hash(plutus_datum) {\n        _assertClass(plutus_datum, DataHash);\n        wasm.requiredwitnessset_add_plutus_datum_hash(this.ptr, plutus_datum.ptr);\n    }\n    /**\n     * @param {Redeemer} redeemer\n     */\n    add_redeemer(redeemer) {\n        _assertClass(redeemer, Redeemer);\n        wasm.requiredwitnessset_add_redeemer(this.ptr, redeemer.ptr);\n    }\n    /**\n     * @param {RedeemerWitnessKey} redeemer\n     */\n    add_redeemer_tag(redeemer) {\n        _assertClass(redeemer, RedeemerWitnessKey);\n        wasm.requiredwitnessset_add_redeemer_tag(this.ptr, redeemer.ptr);\n    }\n    /**\n     * @param {RequiredWitnessSet} requirements\n     */\n    add_all(requirements) {\n        _assertClass(requirements, RequiredWitnessSet);\n        wasm.requiredwitnessset_add_all(this.ptr, requirements.ptr);\n    }\n    /**\n     * @returns {RequiredWitnessSet}\n     */\n    static new() {\n        var ret = wasm.requiredwitnessset_new();\n        return RequiredWitnessSet.__wrap(ret);\n    }\n}\n/** */\nexport class RewardAddress {\n    static __wrap(ptr) {\n        const obj = Object.create(RewardAddress.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rewardaddress_free(ptr);\n    }\n    /**\n     * @param {number} network\n     * @param {StakeCredential} payment\n     * @returns {RewardAddress}\n     */\n    static new(network, payment) {\n        _assertClass(payment, StakeCredential);\n        var ret = wasm.rewardaddress_new(network, payment.ptr);\n        return RewardAddress.__wrap(ret);\n    }\n    /**\n     * @returns {StakeCredential}\n     */\n    payment_cred() {\n        var ret = wasm.rewardaddress_payment_cred(this.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n     * @returns {Address}\n     */\n    to_address() {\n        var ret = wasm.rewardaddress_to_address(this.ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n     * @param {Address} addr\n     * @returns {RewardAddress | undefined}\n     */\n    static from_address(addr) {\n        _assertClass(addr, Address);\n        var ret = wasm.rewardaddress_from_address(addr.ptr);\n        return ret === 0 ? undefined : RewardAddress.__wrap(ret);\n    }\n}\n/** */\nexport class RewardAddresses {\n    static __wrap(ptr) {\n        const obj = Object.create(RewardAddresses.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rewardaddresses_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.rewardaddresses_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {RewardAddresses}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.rewardaddresses_from_bytes(ptr0, len0);\n        return RewardAddresses.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.rewardaddresses_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.rewardaddresses_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {RewardAddresses}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.rewardaddresses_from_json(ptr0, len0);\n        return RewardAddresses.__wrap(ret);\n    }\n    /**\n     * @returns {RewardAddresses}\n     */\n    static new() {\n        var ret = wasm.rewardaddresses_new();\n        return RewardAddresses.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.rewardaddresses_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {RewardAddress}\n     */\n    get(index) {\n        var ret = wasm.rewardaddresses_get(this.ptr, index);\n        return RewardAddress.__wrap(ret);\n    }\n    /**\n     * @param {RewardAddress} elem\n     */\n    add(elem) {\n        _assertClass(elem, RewardAddress);\n        wasm.rewardaddresses_add(this.ptr, elem.ptr);\n    }\n}\n/** */\nexport class Script {\n    static __wrap(ptr) {\n        const obj = Object.create(Script.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_script_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.script_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Script}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.script_from_bytes(ptr0, len0);\n        return Script.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.script_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.script_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {Script}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.script_from_json(ptr0, len0);\n        return Script.__wrap(ret);\n    }\n    /**\n     * @param {NativeScript} native_script\n     * @returns {Script}\n     */\n    static new_native(native_script) {\n        _assertClass(native_script, NativeScript);\n        var ret = wasm.script_new_native(native_script.ptr);\n        return Script.__wrap(ret);\n    }\n    /**\n     * @param {PlutusScript} plutus_script\n     * @returns {Script}\n     */\n    static new_plutus_v1(plutus_script) {\n        _assertClass(plutus_script, PlutusScript);\n        var ret = wasm.script_new_plutus_v1(plutus_script.ptr);\n        return Script.__wrap(ret);\n    }\n    /**\n     * @param {PlutusScript} plutus_script\n     * @returns {Script}\n     */\n    static new_plutus_v2(plutus_script) {\n        _assertClass(plutus_script, PlutusScript);\n        var ret = wasm.script_new_plutus_v2(plutus_script.ptr);\n        return Script.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    kind() {\n        var ret = wasm.script_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {NativeScript | undefined}\n     */\n    as_native() {\n        var ret = wasm.script_as_native(this.ptr);\n        return ret === 0 ? undefined : NativeScript.__wrap(ret);\n    }\n    /**\n     * @returns {PlutusScript | undefined}\n     */\n    as_plutus_v1() {\n        var ret = wasm.script_as_plutus_v1(this.ptr);\n        return ret === 0 ? undefined : PlutusScript.__wrap(ret);\n    }\n    /**\n     * @returns {PlutusScript | undefined}\n     */\n    as_plutus_v2() {\n        var ret = wasm.script_as_plutus_v2(this.ptr);\n        return ret === 0 ? undefined : PlutusScript.__wrap(ret);\n    }\n}\n/** */\nexport class ScriptAll {\n    static __wrap(ptr) {\n        const obj = Object.create(ScriptAll.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_scriptall_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.scriptall_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {ScriptAll}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.scriptall_from_bytes(ptr0, len0);\n        return ScriptAll.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.scriptall_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.scriptall_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {ScriptAll}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.scriptall_from_json(ptr0, len0);\n        return ScriptAll.__wrap(ret);\n    }\n    /**\n     * @returns {NativeScripts}\n     */\n    native_scripts() {\n        var ret = wasm.scriptall_native_scripts(this.ptr);\n        return NativeScripts.__wrap(ret);\n    }\n    /**\n     * @param {NativeScripts} native_scripts\n     * @returns {ScriptAll}\n     */\n    static new(native_scripts) {\n        _assertClass(native_scripts, NativeScripts);\n        var ret = wasm.scriptall_new(native_scripts.ptr);\n        return ScriptAll.__wrap(ret);\n    }\n}\n/** */\nexport class ScriptAny {\n    static __wrap(ptr) {\n        const obj = Object.create(ScriptAny.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_scriptany_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.scriptany_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {ScriptAny}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.scriptany_from_bytes(ptr0, len0);\n        return ScriptAny.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.scriptany_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.scriptany_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {ScriptAny}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.scriptany_from_json(ptr0, len0);\n        return ScriptAny.__wrap(ret);\n    }\n    /**\n     * @returns {NativeScripts}\n     */\n    native_scripts() {\n        var ret = wasm.scriptany_native_scripts(this.ptr);\n        return NativeScripts.__wrap(ret);\n    }\n    /**\n     * @param {NativeScripts} native_scripts\n     * @returns {ScriptAny}\n     */\n    static new(native_scripts) {\n        _assertClass(native_scripts, NativeScripts);\n        var ret = wasm.scriptany_new(native_scripts.ptr);\n        return ScriptAny.__wrap(ret);\n    }\n}\n/** */\nexport class ScriptDataHash {\n    static __wrap(ptr) {\n        const obj = Object.create(ScriptDataHash.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_scriptdatahash_free(ptr);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {ScriptDataHash}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.scriptdatahash_from_bytes(ptr0, len0);\n        return ScriptDataHash.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.scriptdatahash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} prefix\n     * @returns {string}\n     */\n    to_bech32(prefix) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.scriptdatahash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} bech_str\n     * @returns {ScriptDataHash}\n     */\n    static from_bech32(bech_str) {\n        var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.scriptdatahash_from_bech32(ptr0, len0);\n        return ScriptDataHash.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_hex() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.scriptdatahash_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} hex\n     * @returns {ScriptDataHash}\n     */\n    static from_hex(hex) {\n        var ptr0 = passStringToWasm0(hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.scriptdatahash_from_hex(ptr0, len0);\n        return ScriptDataHash.__wrap(ret);\n    }\n}\n/** */\nexport class ScriptHash {\n    static __wrap(ptr) {\n        const obj = Object.create(ScriptHash.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_scripthash_free(ptr);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {ScriptHash}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.scripthash_from_bytes(ptr0, len0);\n        return ScriptHash.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.scripthash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} prefix\n     * @returns {string}\n     */\n    to_bech32(prefix) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.scripthash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} bech_str\n     * @returns {ScriptHash}\n     */\n    static from_bech32(bech_str) {\n        var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.scripthash_from_bech32(ptr0, len0);\n        return ScriptHash.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_hex() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.scripthash_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} hex\n     * @returns {ScriptHash}\n     */\n    static from_hex(hex) {\n        var ptr0 = passStringToWasm0(hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.scripthash_from_hex(ptr0, len0);\n        return ScriptHash.__wrap(ret);\n    }\n}\n/** */\nexport class ScriptHashes {\n    static __wrap(ptr) {\n        const obj = Object.create(ScriptHashes.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_scripthashes_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.scripthashes_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {ScriptHashes}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.scripthashes_from_bytes(ptr0, len0);\n        return ScriptHashes.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.scripthashes_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.scripthashes_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {ScriptHashes}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.scripthashes_from_json(ptr0, len0);\n        return ScriptHashes.__wrap(ret);\n    }\n    /**\n     * @returns {ScriptHashes}\n     */\n    static new() {\n        var ret = wasm.scripthashes_new();\n        return ScriptHashes.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.scripthashes_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {ScriptHash}\n     */\n    get(index) {\n        var ret = wasm.scripthashes_get(this.ptr, index);\n        return ScriptHash.__wrap(ret);\n    }\n    /**\n     * @param {ScriptHash} elem\n     */\n    add(elem) {\n        _assertClass(elem, ScriptHash);\n        wasm.scripthashes_add(this.ptr, elem.ptr);\n    }\n}\n/** */\nexport class ScriptNOfK {\n    static __wrap(ptr) {\n        const obj = Object.create(ScriptNOfK.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_scriptnofk_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.scriptnofk_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {ScriptNOfK}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.scriptnofk_from_bytes(ptr0, len0);\n        return ScriptNOfK.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.scriptnofk_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.scriptnofk_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {ScriptNOfK}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.scriptnofk_from_json(ptr0, len0);\n        return ScriptNOfK.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    n() {\n        var ret = wasm.scriptnofk_n(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {NativeScripts}\n     */\n    native_scripts() {\n        var ret = wasm.scriptnofk_native_scripts(this.ptr);\n        return NativeScripts.__wrap(ret);\n    }\n    /**\n     * @param {number} n\n     * @param {NativeScripts} native_scripts\n     * @returns {ScriptNOfK}\n     */\n    static new(n, native_scripts) {\n        _assertClass(native_scripts, NativeScripts);\n        var ret = wasm.scriptnofk_new(n, native_scripts.ptr);\n        return ScriptNOfK.__wrap(ret);\n    }\n}\n/** */\nexport class ScriptPubkey {\n    static __wrap(ptr) {\n        const obj = Object.create(ScriptPubkey.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_scriptpubkey_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.scriptpubkey_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {ScriptPubkey}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.scriptpubkey_from_bytes(ptr0, len0);\n        return ScriptPubkey.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.scriptpubkey_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.scriptpubkey_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {ScriptPubkey}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.scriptpubkey_from_json(ptr0, len0);\n        return ScriptPubkey.__wrap(ret);\n    }\n    /**\n     * @returns {Ed25519KeyHash}\n     */\n    addr_keyhash() {\n        var ret = wasm.scriptpubkey_addr_keyhash(this.ptr);\n        return Ed25519KeyHash.__wrap(ret);\n    }\n    /**\n     * @param {Ed25519KeyHash} addr_keyhash\n     * @returns {ScriptPubkey}\n     */\n    static new(addr_keyhash) {\n        _assertClass(addr_keyhash, Ed25519KeyHash);\n        var ret = wasm.scriptpubkey_new(addr_keyhash.ptr);\n        return ScriptPubkey.__wrap(ret);\n    }\n}\n/** */\nexport class ScriptRef {\n    static __wrap(ptr) {\n        const obj = Object.create(ScriptRef.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_scriptref_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.scriptref_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {ScriptRef}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.scriptref_from_bytes(ptr0, len0);\n        return ScriptRef.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.scriptref_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.scriptref_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {ScriptRef}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.scriptref_from_json(ptr0, len0);\n        return ScriptRef.__wrap(ret);\n    }\n    /**\n     * @param {Script} script\n     * @returns {ScriptRef}\n     */\n    static new(script) {\n        _assertClass(script, Script);\n        var ret = wasm.scriptref_new(script.ptr);\n        return ScriptRef.__wrap(ret);\n    }\n    /**\n     * @returns {Script}\n     */\n    get() {\n        var ret = wasm.scriptref_get(this.ptr);\n        return Script.__wrap(ret);\n    }\n}\n/** */\nexport class ScriptWitness {\n    static __wrap(ptr) {\n        const obj = Object.create(ScriptWitness.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_scriptwitness_free(ptr);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.scriptwitness_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.scriptwitness_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {ScriptWitness}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.scriptwitness_from_json(ptr0, len0);\n        return ScriptWitness.__wrap(ret);\n    }\n    /**\n     * @param {NativeScript} native_script\n     * @returns {ScriptWitness}\n     */\n    static new_native_witness(native_script) {\n        _assertClass(native_script, NativeScript);\n        var ret = wasm.scriptwitness_new_native_witness(native_script.ptr);\n        return ScriptWitness.__wrap(ret);\n    }\n    /**\n     * @param {PlutusWitness} plutus_witness\n     * @returns {ScriptWitness}\n     */\n    static new_plutus_witness(plutus_witness) {\n        _assertClass(plutus_witness, PlutusWitness);\n        var ret = wasm.scriptwitness_new_plutus_witness(plutus_witness.ptr);\n        return ScriptWitness.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    kind() {\n        var ret = wasm.scriptwitness_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {NativeScript | undefined}\n     */\n    as_native_witness() {\n        var ret = wasm.scriptwitness_as_native_witness(this.ptr);\n        return ret === 0 ? undefined : NativeScript.__wrap(ret);\n    }\n    /**\n     * @returns {PlutusWitness | undefined}\n     */\n    as_plutus_witness() {\n        var ret = wasm.scriptwitness_as_plutus_witness(this.ptr);\n        return ret === 0 ? undefined : PlutusWitness.__wrap(ret);\n    }\n}\n/** */\nexport class SingleHostAddr {\n    static __wrap(ptr) {\n        const obj = Object.create(SingleHostAddr.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_singlehostaddr_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.singlehostaddr_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {SingleHostAddr}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.singlehostaddr_from_bytes(ptr0, len0);\n        return SingleHostAddr.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.singlehostaddr_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.singlehostaddr_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {SingleHostAddr}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.singlehostaddr_from_json(ptr0, len0);\n        return SingleHostAddr.__wrap(ret);\n    }\n    /**\n     * @returns {number | undefined}\n     */\n    port() {\n        var ret = wasm.singlehostaddr_port(this.ptr);\n        return ret === 0xFFFFFF ? undefined : ret;\n    }\n    /**\n     * @returns {Ipv4 | undefined}\n     */\n    ipv4() {\n        var ret = wasm.singlehostaddr_ipv4(this.ptr);\n        return ret === 0 ? undefined : Ipv4.__wrap(ret);\n    }\n    /**\n     * @returns {Ipv6 | undefined}\n     */\n    ipv6() {\n        var ret = wasm.singlehostaddr_ipv6(this.ptr);\n        return ret === 0 ? undefined : Ipv6.__wrap(ret);\n    }\n    /**\n     * @param {number | undefined} port\n     * @param {Ipv4 | undefined} ipv4\n     * @param {Ipv6 | undefined} ipv6\n     * @returns {SingleHostAddr}\n     */\n    static new(port, ipv4, ipv6) {\n        let ptr0 = 0;\n        if (!isLikeNone(ipv4)) {\n            _assertClass(ipv4, Ipv4);\n            ptr0 = ipv4.ptr;\n            ipv4.ptr = 0;\n        }\n        let ptr1 = 0;\n        if (!isLikeNone(ipv6)) {\n            _assertClass(ipv6, Ipv6);\n            ptr1 = ipv6.ptr;\n            ipv6.ptr = 0;\n        }\n        var ret = wasm.singlehostaddr_new(isLikeNone(port) ? 0xFFFFFF : port, ptr0, ptr1);\n        return SingleHostAddr.__wrap(ret);\n    }\n}\n/** */\nexport class SingleHostName {\n    static __wrap(ptr) {\n        const obj = Object.create(SingleHostName.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_singlehostname_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.singlehostname_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {SingleHostName}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.singlehostname_from_bytes(ptr0, len0);\n        return SingleHostName.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.singlehostname_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.singlehostname_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {SingleHostName}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.singlehostname_from_json(ptr0, len0);\n        return SingleHostName.__wrap(ret);\n    }\n    /**\n     * @returns {number | undefined}\n     */\n    port() {\n        var ret = wasm.singlehostname_port(this.ptr);\n        return ret === 0xFFFFFF ? undefined : ret;\n    }\n    /**\n     * @returns {DNSRecordAorAAAA}\n     */\n    dns_name() {\n        var ret = wasm.singlehostname_dns_name(this.ptr);\n        return DNSRecordAorAAAA.__wrap(ret);\n    }\n    /**\n     * @param {number | undefined} port\n     * @param {DNSRecordAorAAAA} dns_name\n     * @returns {SingleHostName}\n     */\n    static new(port, dns_name) {\n        _assertClass(dns_name, DNSRecordAorAAAA);\n        var ret = wasm.singlehostname_new(isLikeNone(port) ? 0xFFFFFF : port, dns_name.ptr);\n        return SingleHostName.__wrap(ret);\n    }\n}\n/** */\nexport class StakeCredential {\n    static __wrap(ptr) {\n        const obj = Object.create(StakeCredential.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_stakecredential_free(ptr);\n    }\n    /**\n     * @param {Ed25519KeyHash} hash\n     * @returns {StakeCredential}\n     */\n    static from_keyhash(hash) {\n        _assertClass(hash, Ed25519KeyHash);\n        var ret = wasm.stakecredential_from_keyhash(hash.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n     * @param {ScriptHash} hash\n     * @returns {StakeCredential}\n     */\n    static from_scripthash(hash) {\n        _assertClass(hash, ScriptHash);\n        var ret = wasm.stakecredential_from_scripthash(hash.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n     * @returns {Ed25519KeyHash | undefined}\n     */\n    to_keyhash() {\n        var ret = wasm.stakecredential_to_keyhash(this.ptr);\n        return ret === 0 ? undefined : Ed25519KeyHash.__wrap(ret);\n    }\n    /**\n     * @returns {ScriptHash | undefined}\n     */\n    to_scripthash() {\n        var ret = wasm.stakecredential_to_scripthash(this.ptr);\n        return ret === 0 ? undefined : ScriptHash.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    kind() {\n        var ret = wasm.stakecredential_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.stakecredential_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {StakeCredential}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.stakecredential_from_bytes(ptr0, len0);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.stakecredential_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.stakecredential_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {StakeCredential}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.stakecredential_from_json(ptr0, len0);\n        return StakeCredential.__wrap(ret);\n    }\n}\n/** */\nexport class StakeCredentials {\n    static __wrap(ptr) {\n        const obj = Object.create(StakeCredentials.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_stakecredentials_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.stakecredentials_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {StakeCredentials}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.stakecredentials_from_bytes(ptr0, len0);\n        return StakeCredentials.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.stakecredentials_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.stakecredentials_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {StakeCredentials}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.stakecredentials_from_json(ptr0, len0);\n        return StakeCredentials.__wrap(ret);\n    }\n    /**\n     * @returns {StakeCredentials}\n     */\n    static new() {\n        var ret = wasm.stakecredentials_new();\n        return StakeCredentials.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.stakecredentials_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {StakeCredential}\n     */\n    get(index) {\n        var ret = wasm.stakecredentials_get(this.ptr, index);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n     * @param {StakeCredential} elem\n     */\n    add(elem) {\n        _assertClass(elem, StakeCredential);\n        wasm.stakecredentials_add(this.ptr, elem.ptr);\n    }\n}\n/** */\nexport class StakeDelegation {\n    static __wrap(ptr) {\n        const obj = Object.create(StakeDelegation.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_stakedelegation_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.stakedelegation_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {StakeDelegation}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.stakedelegation_from_bytes(ptr0, len0);\n        return StakeDelegation.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.stakedelegation_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.stakedelegation_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {StakeDelegation}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.stakedelegation_from_json(ptr0, len0);\n        return StakeDelegation.__wrap(ret);\n    }\n    /**\n     * @returns {StakeCredential}\n     */\n    stake_credential() {\n        var ret = wasm.stakedelegation_stake_credential(this.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n     * @returns {Ed25519KeyHash}\n     */\n    pool_keyhash() {\n        var ret = wasm.stakedelegation_pool_keyhash(this.ptr);\n        return Ed25519KeyHash.__wrap(ret);\n    }\n    /**\n     * @param {StakeCredential} stake_credential\n     * @param {Ed25519KeyHash} pool_keyhash\n     * @returns {StakeDelegation}\n     */\n    static new(stake_credential, pool_keyhash) {\n        _assertClass(stake_credential, StakeCredential);\n        _assertClass(pool_keyhash, Ed25519KeyHash);\n        var ret = wasm.stakedelegation_new(stake_credential.ptr, pool_keyhash.ptr);\n        return StakeDelegation.__wrap(ret);\n    }\n}\n/** */\nexport class StakeDeregistration {\n    static __wrap(ptr) {\n        const obj = Object.create(StakeDeregistration.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_stakederegistration_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.stakederegistration_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {StakeDeregistration}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.stakederegistration_from_bytes(ptr0, len0);\n        return StakeDeregistration.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.stakederegistration_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.stakederegistration_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {StakeDeregistration}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.stakederegistration_from_json(ptr0, len0);\n        return StakeDeregistration.__wrap(ret);\n    }\n    /**\n     * @returns {StakeCredential}\n     */\n    stake_credential() {\n        var ret = wasm.stakederegistration_stake_credential(this.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n     * @param {StakeCredential} stake_credential\n     * @returns {StakeDeregistration}\n     */\n    static new(stake_credential) {\n        _assertClass(stake_credential, StakeCredential);\n        var ret = wasm.stakederegistration_new(stake_credential.ptr);\n        return StakeDeregistration.__wrap(ret);\n    }\n}\n/** */\nexport class StakeRegistration {\n    static __wrap(ptr) {\n        const obj = Object.create(StakeRegistration.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_stakeregistration_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.stakeregistration_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {StakeRegistration}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.stakeregistration_from_bytes(ptr0, len0);\n        return StakeRegistration.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.stakeregistration_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.stakeregistration_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {StakeRegistration}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.stakeregistration_from_json(ptr0, len0);\n        return StakeRegistration.__wrap(ret);\n    }\n    /**\n     * @returns {StakeCredential}\n     */\n    stake_credential() {\n        var ret = wasm.stakeregistration_stake_credential(this.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n     * @param {StakeCredential} stake_credential\n     * @returns {StakeRegistration}\n     */\n    static new(stake_credential) {\n        _assertClass(stake_credential, StakeCredential);\n        var ret = wasm.stakeregistration_new(stake_credential.ptr);\n        return StakeRegistration.__wrap(ret);\n    }\n}\n/** */\nexport class Strings {\n    static __wrap(ptr) {\n        const obj = Object.create(Strings.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_strings_free(ptr);\n    }\n    /**\n     * @returns {Strings}\n     */\n    static new() {\n        var ret = wasm.strings_new();\n        return Strings.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.strings_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {string}\n     */\n    get(index) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.strings_get(retptr, this.ptr, index);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} elem\n     */\n    add(elem) {\n        var ptr0 = passStringToWasm0(elem, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.strings_add(this.ptr, ptr0, len0);\n    }\n}\n/** */\nexport class TimelockExpiry {\n    static __wrap(ptr) {\n        const obj = Object.create(TimelockExpiry.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_timelockexpiry_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.timelockexpiry_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TimelockExpiry}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.timelockexpiry_from_bytes(ptr0, len0);\n        return TimelockExpiry.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.timelockexpiry_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.timelockexpiry_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {TimelockExpiry}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.timelockexpiry_from_json(ptr0, len0);\n        return TimelockExpiry.__wrap(ret);\n    }\n    /**\n     * @returns {BigNum}\n     */\n    slot() {\n        var ret = wasm.timelockexpiry_slot(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} slot\n     * @returns {TimelockExpiry}\n     */\n    static new(slot) {\n        _assertClass(slot, BigNum);\n        var ret = wasm.timelockexpiry_new(slot.ptr);\n        return TimelockExpiry.__wrap(ret);\n    }\n}\n/** */\nexport class TimelockStart {\n    static __wrap(ptr) {\n        const obj = Object.create(TimelockStart.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_timelockstart_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.timelockstart_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TimelockStart}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.timelockstart_from_bytes(ptr0, len0);\n        return TimelockStart.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.timelockstart_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.timelockstart_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {TimelockStart}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.timelockstart_from_json(ptr0, len0);\n        return TimelockStart.__wrap(ret);\n    }\n    /**\n     * @returns {BigNum}\n     */\n    slot() {\n        var ret = wasm.timelockstart_slot(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} slot\n     * @returns {TimelockStart}\n     */\n    static new(slot) {\n        _assertClass(slot, BigNum);\n        var ret = wasm.timelockstart_new(slot.ptr);\n        return TimelockStart.__wrap(ret);\n    }\n}\n/** */\nexport class Transaction {\n    static __wrap(ptr) {\n        const obj = Object.create(Transaction.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transaction_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transaction_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Transaction}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transaction_from_bytes(ptr0, len0);\n        return Transaction.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transaction_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.transaction_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {Transaction}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transaction_from_json(ptr0, len0);\n        return Transaction.__wrap(ret);\n    }\n    /**\n     * @returns {TransactionBody}\n     */\n    body() {\n        var ret = wasm.transaction_body(this.ptr);\n        return TransactionBody.__wrap(ret);\n    }\n    /**\n     * @returns {TransactionWitnessSet}\n     */\n    witness_set() {\n        var ret = wasm.transaction_witness_set(this.ptr);\n        return TransactionWitnessSet.__wrap(ret);\n    }\n    /**\n     * @returns {boolean}\n     */\n    is_valid() {\n        var ret = wasm.transaction_is_valid(this.ptr);\n        return ret !== 0;\n    }\n    /**\n     * @returns {AuxiliaryData | undefined}\n     */\n    auxiliary_data() {\n        var ret = wasm.transaction_auxiliary_data(this.ptr);\n        return ret === 0 ? undefined : AuxiliaryData.__wrap(ret);\n    }\n    /**\n     * @param {boolean} valid\n     */\n    set_is_valid(valid) {\n        wasm.transaction_set_is_valid(this.ptr, valid);\n    }\n    /**\n     * @param {TransactionBody} body\n     * @param {TransactionWitnessSet} witness_set\n     * @param {AuxiliaryData | undefined} auxiliary_data\n     * @returns {Transaction}\n     */\n    static new(body, witness_set, auxiliary_data) {\n        _assertClass(body, TransactionBody);\n        _assertClass(witness_set, TransactionWitnessSet);\n        let ptr0 = 0;\n        if (!isLikeNone(auxiliary_data)) {\n            _assertClass(auxiliary_data, AuxiliaryData);\n            ptr0 = auxiliary_data.ptr;\n            auxiliary_data.ptr = 0;\n        }\n        var ret = wasm.transaction_new(body.ptr, witness_set.ptr, ptr0);\n        return Transaction.__wrap(ret);\n    }\n}\n/** */\nexport class TransactionBodies {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionBodies.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionbodies_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionbodies_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TransactionBodies}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactionbodies_from_bytes(ptr0, len0);\n        return TransactionBodies.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionbodies_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.transactionbodies_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {TransactionBodies}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactionbodies_from_json(ptr0, len0);\n        return TransactionBodies.__wrap(ret);\n    }\n    /**\n     * @returns {TransactionBodies}\n     */\n    static new() {\n        var ret = wasm.transactionbodies_new();\n        return TransactionBodies.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.transactionbodies_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {TransactionBody}\n     */\n    get(index) {\n        var ret = wasm.transactionbodies_get(this.ptr, index);\n        return TransactionBody.__wrap(ret);\n    }\n    /**\n     * @param {TransactionBody} elem\n     */\n    add(elem) {\n        _assertClass(elem, TransactionBody);\n        wasm.transactionbodies_add(this.ptr, elem.ptr);\n    }\n}\n/** */\nexport class TransactionBody {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionBody.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionbody_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionbody_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TransactionBody}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactionbody_from_bytes(ptr0, len0);\n        return TransactionBody.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionbody_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.transactionbody_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {TransactionBody}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactionbody_from_json(ptr0, len0);\n        return TransactionBody.__wrap(ret);\n    }\n    /**\n     * @returns {TransactionInputs}\n     */\n    inputs() {\n        var ret = wasm.transactionbody_inputs(this.ptr);\n        return TransactionInputs.__wrap(ret);\n    }\n    /**\n     * @returns {TransactionOutputs}\n     */\n    outputs() {\n        var ret = wasm.transactionbody_outputs(this.ptr);\n        return TransactionOutputs.__wrap(ret);\n    }\n    /**\n     * @returns {BigNum}\n     */\n    fee() {\n        var ret = wasm.transactionbody_fee(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {BigNum | undefined}\n     */\n    ttl() {\n        var ret = wasm.transactionbody_ttl(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * @param {Certificates} certs\n     */\n    set_certs(certs) {\n        _assertClass(certs, Certificates);\n        wasm.transactionbody_set_certs(this.ptr, certs.ptr);\n    }\n    /**\n     * @returns {Certificates | undefined}\n     */\n    certs() {\n        var ret = wasm.transactionbody_certs(this.ptr);\n        return ret === 0 ? undefined : Certificates.__wrap(ret);\n    }\n    /**\n     * @param {Withdrawals} withdrawals\n     */\n    set_withdrawals(withdrawals) {\n        _assertClass(withdrawals, Withdrawals);\n        wasm.transactionbody_set_withdrawals(this.ptr, withdrawals.ptr);\n    }\n    /**\n     * @returns {Withdrawals | undefined}\n     */\n    withdrawals() {\n        var ret = wasm.transactionbody_withdrawals(this.ptr);\n        return ret === 0 ? undefined : Withdrawals.__wrap(ret);\n    }\n    /**\n     * @param {Update} update\n     */\n    set_update(update) {\n        _assertClass(update, Update);\n        wasm.transactionbody_set_update(this.ptr, update.ptr);\n    }\n    /**\n     * @returns {Update | undefined}\n     */\n    update() {\n        var ret = wasm.transactionbody_update(this.ptr);\n        return ret === 0 ? undefined : Update.__wrap(ret);\n    }\n    /**\n     * @param {AuxiliaryDataHash} auxiliary_data_hash\n     */\n    set_auxiliary_data_hash(auxiliary_data_hash) {\n        _assertClass(auxiliary_data_hash, AuxiliaryDataHash);\n        wasm.transactionbody_set_auxiliary_data_hash(this.ptr, auxiliary_data_hash.ptr);\n    }\n    /**\n     * @returns {AuxiliaryDataHash | undefined}\n     */\n    auxiliary_data_hash() {\n        var ret = wasm.transactionbody_auxiliary_data_hash(this.ptr);\n        return ret === 0 ? undefined : AuxiliaryDataHash.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} validity_start_interval\n     */\n    set_validity_start_interval(validity_start_interval) {\n        _assertClass(validity_start_interval, BigNum);\n        wasm.transactionbody_set_validity_start_interval(this.ptr, validity_start_interval.ptr);\n    }\n    /**\n     * @returns {BigNum | undefined}\n     */\n    validity_start_interval() {\n        var ret = wasm.transactionbody_validity_start_interval(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * @param {Mint} mint\n     */\n    set_mint(mint) {\n        _assertClass(mint, Mint);\n        wasm.transactionbody_set_mint(this.ptr, mint.ptr);\n    }\n    /**\n     * @returns {Mint | undefined}\n     */\n    mint() {\n        var ret = wasm.transactionbody_mint(this.ptr);\n        return ret === 0 ? undefined : Mint.__wrap(ret);\n    }\n    /**\n     * @param {ScriptDataHash} script_data_hash\n     */\n    set_script_data_hash(script_data_hash) {\n        _assertClass(script_data_hash, ScriptDataHash);\n        wasm.transactionbody_set_script_data_hash(this.ptr, script_data_hash.ptr);\n    }\n    /**\n     * @returns {ScriptDataHash | undefined}\n     */\n    script_data_hash() {\n        var ret = wasm.transactionbody_script_data_hash(this.ptr);\n        return ret === 0 ? undefined : ScriptDataHash.__wrap(ret);\n    }\n    /**\n     * @param {TransactionInputs} collateral\n     */\n    set_collateral(collateral) {\n        _assertClass(collateral, TransactionInputs);\n        wasm.transactionbody_set_collateral(this.ptr, collateral.ptr);\n    }\n    /**\n     * @returns {TransactionInputs | undefined}\n     */\n    collateral() {\n        var ret = wasm.transactionbody_collateral(this.ptr);\n        return ret === 0 ? undefined : TransactionInputs.__wrap(ret);\n    }\n    /**\n     * @param {Ed25519KeyHashes} required_signers\n     */\n    set_required_signers(required_signers) {\n        _assertClass(required_signers, Ed25519KeyHashes);\n        wasm.transactionbody_set_required_signers(this.ptr, required_signers.ptr);\n    }\n    /**\n     * @returns {Ed25519KeyHashes | undefined}\n     */\n    required_signers() {\n        var ret = wasm.transactionbody_required_signers(this.ptr);\n        return ret === 0 ? undefined : Ed25519KeyHashes.__wrap(ret);\n    }\n    /**\n     * @param {NetworkId} network_id\n     */\n    set_network_id(network_id) {\n        _assertClass(network_id, NetworkId);\n        wasm.transactionbody_set_network_id(this.ptr, network_id.ptr);\n    }\n    /**\n     * @returns {NetworkId | undefined}\n     */\n    network_id() {\n        var ret = wasm.transactionbody_network_id(this.ptr);\n        return ret === 0 ? undefined : NetworkId.__wrap(ret);\n    }\n    /**\n     * @param {TransactionOutput} collateral_return\n     */\n    set_collateral_return(collateral_return) {\n        _assertClass(collateral_return, TransactionOutput);\n        wasm.transactionbody_set_collateral_return(this.ptr, collateral_return.ptr);\n    }\n    /**\n     * @returns {TransactionOutput | undefined}\n     */\n    collateral_return() {\n        var ret = wasm.transactionbody_collateral_return(this.ptr);\n        return ret === 0 ? undefined : TransactionOutput.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} total_collateral\n     */\n    set_total_collateral(total_collateral) {\n        _assertClass(total_collateral, BigNum);\n        wasm.transactionbody_set_total_collateral(this.ptr, total_collateral.ptr);\n    }\n    /**\n     * @returns {BigNum | undefined}\n     */\n    total_collateral() {\n        var ret = wasm.transactionbody_total_collateral(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * @param {TransactionInputs} reference_inputs\n     */\n    set_reference_inputs(reference_inputs) {\n        _assertClass(reference_inputs, TransactionInputs);\n        wasm.transactionbody_set_reference_inputs(this.ptr, reference_inputs.ptr);\n    }\n    /**\n     * @returns {TransactionInputs | undefined}\n     */\n    reference_inputs() {\n        var ret = wasm.transactionbody_reference_inputs(this.ptr);\n        return ret === 0 ? undefined : TransactionInputs.__wrap(ret);\n    }\n    /**\n     * @param {TransactionInputs} inputs\n     * @param {TransactionOutputs} outputs\n     * @param {BigNum} fee\n     * @param {BigNum | undefined} ttl\n     * @returns {TransactionBody}\n     */\n    static new(inputs, outputs, fee, ttl) {\n        _assertClass(inputs, TransactionInputs);\n        _assertClass(outputs, TransactionOutputs);\n        _assertClass(fee, BigNum);\n        let ptr0 = 0;\n        if (!isLikeNone(ttl)) {\n            _assertClass(ttl, BigNum);\n            ptr0 = ttl.ptr;\n            ttl.ptr = 0;\n        }\n        var ret = wasm.transactionbody_new(inputs.ptr, outputs.ptr, fee.ptr, ptr0);\n        return TransactionBody.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    raw() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionbody_raw(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/** */\nexport class TransactionBuilder {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionBuilder.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionbuilder_free(ptr);\n    }\n    /**\n     * This automatically selects and adds inputs from {inputs} consisting of just enough to cover\n     * the outputs that have already been added.\n     * This should be called after adding all certs/outputs/etc and will be an error otherwise.\n     * Adding a change output must be called after via TransactionBuilder::balance()\n     * inputs to cover the minimum fees. This does not, however, set the txbuilder's fee.\n     *\n     * change_address is required here in order to determine the min ada requirement precisely\n     * @param {TransactionUnspentOutputs} inputs\n     * @param {Address} change_address\n     */\n    add_inputs_from(inputs, change_address) {\n        _assertClass(inputs, TransactionUnspentOutputs);\n        _assertClass(change_address, Address);\n        wasm.transactionbuilder_add_inputs_from(this.ptr, inputs.ptr, change_address.ptr);\n    }\n    /**\n     * @param {TransactionUnspentOutput} utxo\n     * @param {ScriptWitness | undefined} script_witness\n     */\n    add_input(utxo, script_witness) {\n        _assertClass(utxo, TransactionUnspentOutput);\n        let ptr0 = 0;\n        if (!isLikeNone(script_witness)) {\n            _assertClass(script_witness, ScriptWitness);\n            ptr0 = script_witness.ptr;\n            script_witness.ptr = 0;\n        }\n        wasm.transactionbuilder_add_input(this.ptr, utxo.ptr, ptr0);\n    }\n    /**\n     * @param {TransactionUnspentOutput} utxo\n     */\n    add_reference_input(utxo) {\n        _assertClass(utxo, TransactionUnspentOutput);\n        wasm.transactionbuilder_add_reference_input(this.ptr, utxo.ptr);\n    }\n    /**\n     * calculates how much the fee would increase if you added a given output\n     * @param {Address} address\n     * @param {TransactionInput} input\n     * @param {Value} amount\n     * @returns {BigNum}\n     */\n    fee_for_input(address, input, amount) {\n        _assertClass(address, Address);\n        _assertClass(input, TransactionInput);\n        _assertClass(amount, Value);\n        var ret = wasm.transactionbuilder_fee_for_input(this.ptr, address.ptr, input.ptr, amount.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * Add explicit output via a TransactionOutput object\n     * @param {TransactionOutput} output\n     */\n    add_output(output) {\n        _assertClass(output, TransactionOutput);\n        wasm.transactionbuilder_add_output(this.ptr, output.ptr);\n    }\n    /**\n     * Add plutus scripts via a PlutusScripts object\n     * @param {PlutusScript} plutus_script\n     */\n    add_plutus_script(plutus_script) {\n        _assertClass(plutus_script, PlutusScript);\n        wasm.transactionbuilder_add_plutus_script(this.ptr, plutus_script.ptr);\n    }\n    /**\n     * Add plutus v2 scripts via a PlutusScripts object\n     * @param {PlutusScript} plutus_script\n     */\n    add_plutus_v2_script(plutus_script) {\n        _assertClass(plutus_script, PlutusScript);\n        wasm.transactionbuilder_add_plutus_v2_script(this.ptr, plutus_script.ptr);\n    }\n    /**\n     * Add plutus data via a PlutusData object\n     * @param {PlutusData} plutus_data\n     */\n    add_plutus_data(plutus_data) {\n        _assertClass(plutus_data, PlutusData);\n        wasm.transactionbuilder_add_plutus_data(this.ptr, plutus_data.ptr);\n    }\n    /**\n     * Add native scripts via a NativeScripts object\n     * @param {NativeScript} native_script\n     */\n    add_native_script(native_script) {\n        _assertClass(native_script, NativeScript);\n        wasm.transactionbuilder_add_native_script(this.ptr, native_script.ptr);\n    }\n    /**\n     * Add certificate via a Certificates object\n     * @param {Certificate} certificate\n     * @param {ScriptWitness | undefined} script_witness\n     */\n    add_certificate(certificate, script_witness) {\n        _assertClass(certificate, Certificate);\n        let ptr0 = 0;\n        if (!isLikeNone(script_witness)) {\n            _assertClass(script_witness, ScriptWitness);\n            ptr0 = script_witness.ptr;\n            script_witness.ptr = 0;\n        }\n        wasm.transactionbuilder_add_certificate(this.ptr, certificate.ptr, ptr0);\n    }\n    /**\n     * calculates how much the fee would increase if you added a given output\n     * @param {TransactionOutput} output\n     * @returns {BigNum}\n     */\n    fee_for_output(output) {\n        _assertClass(output, TransactionOutput);\n        var ret = wasm.transactionbuilder_fee_for_output(this.ptr, output.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} ttl\n     */\n    set_ttl(ttl) {\n        _assertClass(ttl, BigNum);\n        wasm.transactionbuilder_set_ttl(this.ptr, ttl.ptr);\n    }\n    /**\n     * @param {BigNum} validity_start_interval\n     */\n    set_validity_start_interval(validity_start_interval) {\n        _assertClass(validity_start_interval, BigNum);\n        wasm.transactionbuilder_set_validity_start_interval(this.ptr, validity_start_interval.ptr);\n    }\n    /**\n     * @param {RewardAddress} reward_address\n     * @param {BigNum} coin\n     * @param {ScriptWitness | undefined} script_witness\n     */\n    add_withdrawal(reward_address, coin, script_witness) {\n        _assertClass(reward_address, RewardAddress);\n        _assertClass(coin, BigNum);\n        let ptr0 = 0;\n        if (!isLikeNone(script_witness)) {\n            _assertClass(script_witness, ScriptWitness);\n            ptr0 = script_witness.ptr;\n            script_witness.ptr = 0;\n        }\n        wasm.transactionbuilder_add_withdrawal(this.ptr, reward_address.ptr, coin.ptr, ptr0);\n    }\n    /**\n     * @returns {AuxiliaryData | undefined}\n     */\n    auxiliary_data() {\n        var ret = wasm.transactionbuilder_auxiliary_data(this.ptr);\n        return ret === 0 ? undefined : AuxiliaryData.__wrap(ret);\n    }\n    /**\n     * Set explicit auxiliary data via an AuxiliaryData object\n     * It might contain some metadata plus native or Plutus scripts\n     * @param {AuxiliaryData} auxiliary_data\n     */\n    set_auxiliary_data(auxiliary_data) {\n        _assertClass(auxiliary_data, AuxiliaryData);\n        wasm.transactionbuilder_set_auxiliary_data(this.ptr, auxiliary_data.ptr);\n    }\n    /**\n     * Set metadata using a GeneralTransactionMetadata object\n     * It will be set to the existing or new auxiliary data in this builder\n     * @param {GeneralTransactionMetadata} metadata\n     */\n    set_metadata(metadata) {\n        _assertClass(metadata, GeneralTransactionMetadata);\n        wasm.transactionbuilder_set_metadata(this.ptr, metadata.ptr);\n    }\n    /**\n     * Add a single metadatum using TransactionMetadatumLabel and TransactionMetadatum objects\n     * It will be securely added to existing or new metadata in this builder\n     * @param {BigNum} key\n     * @param {TransactionMetadatum} val\n     */\n    add_metadatum(key, val) {\n        _assertClass(key, BigNum);\n        _assertClass(val, TransactionMetadatum);\n        wasm.transactionbuilder_add_metadatum(this.ptr, key.ptr, val.ptr);\n    }\n    /**\n     * Add a single JSON metadatum using a TransactionMetadatumLabel and a String\n     * It will be securely added to existing or new metadata in this builder\n     * @param {BigNum} key\n     * @param {string} val\n     */\n    add_json_metadatum(key, val) {\n        _assertClass(key, BigNum);\n        var ptr0 = passStringToWasm0(val, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.transactionbuilder_add_json_metadatum(this.ptr, key.ptr, ptr0, len0);\n    }\n    /**\n     * Add a single JSON metadatum using a TransactionMetadatumLabel, a String, and a MetadataJsonSchema object\n     * It will be securely added to existing or new metadata in this builder\n     * @param {BigNum} key\n     * @param {string} val\n     * @param {number} schema\n     */\n    add_json_metadatum_with_schema(key, val, schema) {\n        _assertClass(key, BigNum);\n        var ptr0 = passStringToWasm0(val, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.transactionbuilder_add_json_metadatum_with_schema(this.ptr, key.ptr, ptr0, len0, schema);\n    }\n    /**\n     * Returns a copy of the current mint state in the builder\n     * @returns {Mint | undefined}\n     */\n    mint() {\n        var ret = wasm.transactionbuilder_mint(this.ptr);\n        return ret === 0 ? undefined : Mint.__wrap(ret);\n    }\n    /**\n     * @returns {Certificates | undefined}\n     */\n    certificates() {\n        var ret = wasm.transactionbuilder_certificates(this.ptr);\n        return ret === 0 ? undefined : Certificates.__wrap(ret);\n    }\n    /**\n     * @returns {Withdrawals | undefined}\n     */\n    withdrawals() {\n        var ret = wasm.transactionbuilder_withdrawals(this.ptr);\n        return ret === 0 ? undefined : Withdrawals.__wrap(ret);\n    }\n    /**\n     * Returns a copy of the current witness native scripts in the builder\n     * @returns {NativeScripts | undefined}\n     */\n    native_scripts() {\n        var ret = wasm.transactionbuilder_native_scripts(this.ptr);\n        return ret === 0 ? undefined : NativeScripts.__wrap(ret);\n    }\n    /**\n     * Add a mint entry to this builder using a PolicyID and MintAssets object\n     * It will be securely added to existing or new Mint in this builder\n     * It will securely add assets to an existing PolicyID\n     * But it will replace/overwrite any existing mint assets with the same PolicyID\n     * first redeemer applied to a PolicyID is taken for all further assets added to the same PolicyID\n     * @param {ScriptHash} policy_id\n     * @param {MintAssets} mint_assets\n     * @param {ScriptWitness | undefined} script_witness\n     */\n    add_mint(policy_id, mint_assets, script_witness) {\n        _assertClass(policy_id, ScriptHash);\n        _assertClass(mint_assets, MintAssets);\n        let ptr0 = 0;\n        if (!isLikeNone(script_witness)) {\n            _assertClass(script_witness, ScriptWitness);\n            ptr0 = script_witness.ptr;\n            script_witness.ptr = 0;\n        }\n        wasm.transactionbuilder_add_mint(this.ptr, policy_id.ptr, mint_assets.ptr, ptr0);\n    }\n    /**\n     * @param {TransactionBuilderConfig} cfg\n     * @returns {TransactionBuilder}\n     */\n    static new(cfg) {\n        _assertClass(cfg, TransactionBuilderConfig);\n        var ret = wasm.transactionbuilder_new(cfg.ptr);\n        return TransactionBuilder.__wrap(ret);\n    }\n    /**\n     * @returns {ScriptDataHash | undefined}\n     */\n    script_data_hash() {\n        var ret = wasm.transactionbuilder_script_data_hash(this.ptr);\n        return ret === 0 ? undefined : ScriptDataHash.__wrap(ret);\n    }\n    /**\n     * @param {TransactionUnspentOutput} utxo\n     */\n    add_collateral(utxo) {\n        _assertClass(utxo, TransactionUnspentOutput);\n        wasm.transactionbuilder_add_collateral(this.ptr, utxo.ptr);\n    }\n    /**\n     * @returns {TransactionInputs | undefined}\n     */\n    get_collateral() {\n        var ret = wasm.transactionbuilder_get_collateral(this.ptr);\n        return ret === 0 ? undefined : TransactionInputs.__wrap(ret);\n    }\n    /**\n     * @param {Ed25519KeyHash} required_signer\n     */\n    add_required_signer(required_signer) {\n        _assertClass(required_signer, Ed25519KeyHash);\n        wasm.transactionbuilder_add_required_signer(this.ptr, required_signer.ptr);\n    }\n    /**\n     * @returns {Ed25519KeyHashes | undefined}\n     */\n    required_signers() {\n        var ret = wasm.transactionbuilder_required_signers(this.ptr);\n        return ret === 0 ? undefined : Ed25519KeyHashes.__wrap(ret);\n    }\n    /**\n     * @param {NetworkId} network_id\n     */\n    set_network_id(network_id) {\n        _assertClass(network_id, NetworkId);\n        var ptr0 = network_id.ptr;\n        network_id.ptr = 0;\n        wasm.transactionbuilder_set_network_id(this.ptr, ptr0);\n    }\n    /**\n     * @returns {NetworkId | undefined}\n     */\n    network_id() {\n        var ret = wasm.transactionbuilder_network_id(this.ptr);\n        return ret === 0 ? undefined : NetworkId.__wrap(ret);\n    }\n    /**\n     * @returns {Redeemers | undefined}\n     */\n    redeemers() {\n        var ret = wasm.transactionbuilder_redeemers(this.ptr);\n        return ret === 0 ? undefined : Redeemers.__wrap(ret);\n    }\n    /**\n     * does not include refunds or withdrawals\n     * @returns {Value}\n     */\n    get_explicit_input() {\n        var ret = wasm.transactionbuilder_get_explicit_input(this.ptr);\n        return Value.__wrap(ret);\n    }\n    /**\n     * withdrawals and refunds\n     * @returns {Value}\n     */\n    get_implicit_input() {\n        var ret = wasm.transactionbuilder_get_implicit_input(this.ptr);\n        return Value.__wrap(ret);\n    }\n    /**\n     * Return explicit input plus implicit input plus mint\n     * @returns {Value}\n     */\n    get_total_input() {\n        var ret = wasm.transactionbuilder_get_total_input(this.ptr);\n        return Value.__wrap(ret);\n    }\n    /**\n     * Return explicit output plus implicit output plus burn (does not consider fee directly)\n     * @returns {Value}\n     */\n    get_total_output() {\n        var ret = wasm.transactionbuilder_get_total_output(this.ptr);\n        return Value.__wrap(ret);\n    }\n    /**\n     * does not include fee\n     * @returns {Value}\n     */\n    get_explicit_output() {\n        var ret = wasm.transactionbuilder_get_explicit_output(this.ptr);\n        return Value.__wrap(ret);\n    }\n    /**\n     * @returns {BigNum}\n     */\n    get_deposit() {\n        var ret = wasm.transactionbuilder_get_deposit(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {BigNum | undefined}\n     */\n    get_fee_if_set() {\n        var ret = wasm.transactionbuilder_get_fee_if_set(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * Warning: this function will mutate the /fee/ field\n     * Make sure to call this function last after setting all other tx-body properties\n     * Editing inputs, outputs, mint, etc. after change been calculated\n     * might cause a mismatch in calculated fee versus the required fee\n     * @param {Address} change_address\n     * @param {Datum | undefined} datum\n     */\n    balance(change_address, datum) {\n        _assertClass(change_address, Address);\n        let ptr0 = 0;\n        if (!isLikeNone(datum)) {\n            _assertClass(datum, Datum);\n            ptr0 = datum.ptr;\n            datum.ptr = 0;\n        }\n        wasm.transactionbuilder_balance(this.ptr, change_address.ptr, ptr0);\n    }\n    /**\n     * Returns the TransactionBody.\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionbuilder_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {number}\n     */\n    full_size() {\n        var ret = wasm.transactionbuilder_full_size(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {Uint32Array}\n     */\n    output_sizes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionbuilder_output_sizes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU32FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 4);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {TransactionOutputs}\n     */\n    outputs() {\n        var ret = wasm.transactionbuilder_outputs(this.ptr);\n        return TransactionOutputs.__wrap(ret);\n    }\n    /**\n     * Returns full Transaction object with the body and the auxiliary data\n     *\n     * NOTE: witness_set will contain all mint_scripts if any been added or set\n     *\n     * takes fetched ex units into consideration\n     *\n     * add collateral utxos and collateral change receiver in case you redeem from plutus script utxos\n     *\n     * async call\n     *\n     * NOTE: is_valid set to true\n     * @param {TransactionUnspentOutputs | undefined} collateral_utxos\n     * @param {Address | undefined} collateral_change_address\n     * @param {boolean | undefined} native_uplc\n     * @returns {Promise<Transaction>}\n     */\n    construct(collateral_utxos, collateral_change_address, native_uplc) {\n        const ptr = this.__destroy_into_raw();\n        let ptr0 = 0;\n        if (!isLikeNone(collateral_utxos)) {\n            _assertClass(collateral_utxos, TransactionUnspentOutputs);\n            ptr0 = collateral_utxos.ptr;\n            collateral_utxos.ptr = 0;\n        }\n        let ptr1 = 0;\n        if (!isLikeNone(collateral_change_address)) {\n            _assertClass(collateral_change_address, Address);\n            ptr1 = collateral_change_address.ptr;\n            collateral_change_address.ptr = 0;\n        }\n        var ret = wasm.transactionbuilder_construct(ptr, ptr0, ptr1, isLikeNone(native_uplc) ? 0xFFFFFF : native_uplc ? 1 : 0);\n        return takeObject(ret);\n    }\n    /**\n     * Returns full Transaction object with the body and the auxiliary data\n     * NOTE: witness_set will contain all mint_scripts if any been added or set\n     * NOTE: is_valid set to true\n     * @returns {Transaction}\n     */\n    build_tx() {\n        var ret = wasm.transactionbuilder_build_tx(this.ptr);\n        return Transaction.__wrap(ret);\n    }\n    /**\n     * warning: sum of all parts of a transaction must equal 0. You cannot just set the fee to the min value and forget about it\n     * warning: min_fee may be slightly larger than the actual minimum fee (ex: a few lovelaces)\n     * this is done to simplify the library code, but can be fixed later\n     * @returns {BigNum}\n     */\n    min_fee() {\n        var ret = wasm.transactionbuilder_min_fee(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n}\n/** */\nexport class TransactionBuilderConfig {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionBuilderConfig.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionbuilderconfig_free(ptr);\n    }\n}\n/** */\nexport class TransactionBuilderConfigBuilder {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionBuilderConfigBuilder.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionbuilderconfigbuilder_free(ptr);\n    }\n    /**\n     * @returns {TransactionBuilderConfigBuilder}\n     */\n    static new() {\n        var ret = wasm.transactionbuilderconfigbuilder_new();\n        return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n     * @param {LinearFee} fee_algo\n     * @returns {TransactionBuilderConfigBuilder}\n     */\n    fee_algo(fee_algo) {\n        _assertClass(fee_algo, LinearFee);\n        var ret = wasm.transactionbuilderconfigbuilder_fee_algo(this.ptr, fee_algo.ptr);\n        return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} coins_per_utxo_byte\n     * @returns {TransactionBuilderConfigBuilder}\n     */\n    coins_per_utxo_byte(coins_per_utxo_byte) {\n        _assertClass(coins_per_utxo_byte, BigNum);\n        var ret = wasm.transactionbuilderconfigbuilder_coins_per_utxo_byte(this.ptr, coins_per_utxo_byte.ptr);\n        return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} pool_deposit\n     * @returns {TransactionBuilderConfigBuilder}\n     */\n    pool_deposit(pool_deposit) {\n        _assertClass(pool_deposit, BigNum);\n        var ret = wasm.transactionbuilderconfigbuilder_pool_deposit(this.ptr, pool_deposit.ptr);\n        return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} key_deposit\n     * @returns {TransactionBuilderConfigBuilder}\n     */\n    key_deposit(key_deposit) {\n        _assertClass(key_deposit, BigNum);\n        var ret = wasm.transactionbuilderconfigbuilder_key_deposit(this.ptr, key_deposit.ptr);\n        return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n     * @param {number} max_value_size\n     * @returns {TransactionBuilderConfigBuilder}\n     */\n    max_value_size(max_value_size) {\n        var ret = wasm.transactionbuilderconfigbuilder_max_value_size(this.ptr, max_value_size);\n        return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n     * @param {number} max_tx_size\n     * @returns {TransactionBuilderConfigBuilder}\n     */\n    max_tx_size(max_tx_size) {\n        var ret = wasm.transactionbuilderconfigbuilder_max_tx_size(this.ptr, max_tx_size);\n        return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n     * @param {ExUnitPrices} ex_unit_prices\n     * @returns {TransactionBuilderConfigBuilder}\n     */\n    ex_unit_prices(ex_unit_prices) {\n        _assertClass(ex_unit_prices, ExUnitPrices);\n        var ret = wasm.transactionbuilderconfigbuilder_ex_unit_prices(this.ptr, ex_unit_prices.ptr);\n        return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n     * @param {ExUnits} max_tx_ex_units\n     * @returns {TransactionBuilderConfigBuilder}\n     */\n    max_tx_ex_units(max_tx_ex_units) {\n        _assertClass(max_tx_ex_units, ExUnits);\n        var ret = wasm.transactionbuilderconfigbuilder_max_tx_ex_units(this.ptr, max_tx_ex_units.ptr);\n        return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n     * @param {Costmdls} costmdls\n     * @returns {TransactionBuilderConfigBuilder}\n     */\n    costmdls(costmdls) {\n        _assertClass(costmdls, Costmdls);\n        var ret = wasm.transactionbuilderconfigbuilder_costmdls(this.ptr, costmdls.ptr);\n        return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n     * @param {number} collateral_percentage\n     * @returns {TransactionBuilderConfigBuilder}\n     */\n    collateral_percentage(collateral_percentage) {\n        var ret = wasm.transactionbuilderconfigbuilder_collateral_percentage(this.ptr, collateral_percentage);\n        return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n     * @param {number} max_collateral_inputs\n     * @returns {TransactionBuilderConfigBuilder}\n     */\n    max_collateral_inputs(max_collateral_inputs) {\n        var ret = wasm.transactionbuilderconfigbuilder_max_collateral_inputs(this.ptr, max_collateral_inputs);\n        return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} zero_time\n     * @param {BigNum} zero_slot\n     * @param {number} slot_length\n     * @returns {TransactionBuilderConfigBuilder}\n     */\n    slot_config(zero_time, zero_slot, slot_length) {\n        _assertClass(zero_time, BigNum);\n        _assertClass(zero_slot, BigNum);\n        var ret = wasm.transactionbuilderconfigbuilder_slot_config(this.ptr, zero_time.ptr, zero_slot.ptr, slot_length);\n        return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n     * @param {Blockfrost} blockfrost\n     * @returns {TransactionBuilderConfigBuilder}\n     */\n    blockfrost(blockfrost) {\n        _assertClass(blockfrost, Blockfrost);\n        var ret = wasm.transactionbuilderconfigbuilder_blockfrost(this.ptr, blockfrost.ptr);\n        return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n     * @returns {TransactionBuilderConfig}\n     */\n    build() {\n        var ret = wasm.transactionbuilderconfigbuilder_build(this.ptr);\n        return TransactionBuilderConfig.__wrap(ret);\n    }\n}\n/** */\nexport class TransactionHash {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionHash.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionhash_free(ptr);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TransactionHash}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactionhash_from_bytes(ptr0, len0);\n        return TransactionHash.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionhash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} prefix\n     * @returns {string}\n     */\n    to_bech32(prefix) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.transactionhash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} bech_str\n     * @returns {TransactionHash}\n     */\n    static from_bech32(bech_str) {\n        var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactionhash_from_bech32(ptr0, len0);\n        return TransactionHash.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_hex() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionhash_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} hex\n     * @returns {TransactionHash}\n     */\n    static from_hex(hex) {\n        var ptr0 = passStringToWasm0(hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactionhash_from_hex(ptr0, len0);\n        return TransactionHash.__wrap(ret);\n    }\n}\n/** */\nexport class TransactionIndexes {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionIndexes.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionindexes_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionindexes_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TransactionIndexes}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactionindexes_from_bytes(ptr0, len0);\n        return TransactionIndexes.__wrap(ret);\n    }\n    /**\n     * @returns {TransactionIndexes}\n     */\n    static new() {\n        var ret = wasm.transactionindexes_new();\n        return TransactionIndexes.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.transactionindexes_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {BigNum}\n     */\n    get(index) {\n        var ret = wasm.transactionindexes_get(this.ptr, index);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} elem\n     */\n    add(elem) {\n        _assertClass(elem, BigNum);\n        wasm.transactionindexes_add(this.ptr, elem.ptr);\n    }\n}\n/** */\nexport class TransactionInput {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionInput.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactioninput_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactioninput_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TransactionInput}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactioninput_from_bytes(ptr0, len0);\n        return TransactionInput.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactioninput_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.transactioninput_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {TransactionInput}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactioninput_from_json(ptr0, len0);\n        return TransactionInput.__wrap(ret);\n    }\n    /**\n     * @returns {TransactionHash}\n     */\n    transaction_id() {\n        var ret = wasm.transactioninput_transaction_id(this.ptr);\n        return TransactionHash.__wrap(ret);\n    }\n    /**\n     * @returns {BigNum}\n     */\n    index() {\n        var ret = wasm.transactioninput_index(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @param {TransactionHash} transaction_id\n     * @param {BigNum} index\n     * @returns {TransactionInput}\n     */\n    static new(transaction_id, index) {\n        _assertClass(transaction_id, TransactionHash);\n        _assertClass(index, BigNum);\n        var ret = wasm.transactioninput_new(transaction_id.ptr, index.ptr);\n        return TransactionInput.__wrap(ret);\n    }\n}\n/** */\nexport class TransactionInputs {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionInputs.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactioninputs_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactioninputs_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TransactionInputs}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactioninputs_from_bytes(ptr0, len0);\n        return TransactionInputs.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactioninputs_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.transactioninputs_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {TransactionInputs}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactioninputs_from_json(ptr0, len0);\n        return TransactionInputs.__wrap(ret);\n    }\n    /**\n     * @returns {TransactionInputs}\n     */\n    static new() {\n        var ret = wasm.transactioninputs_new();\n        return TransactionInputs.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.transactioninputs_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {TransactionInput}\n     */\n    get(index) {\n        var ret = wasm.transactioninputs_get(this.ptr, index);\n        return TransactionInput.__wrap(ret);\n    }\n    /**\n     * @param {TransactionInput} elem\n     */\n    add(elem) {\n        _assertClass(elem, TransactionInput);\n        wasm.transactioninputs_add(this.ptr, elem.ptr);\n    }\n}\n/** */\nexport class TransactionMetadatum {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionMetadatum.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionmetadatum_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionmetadatum_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TransactionMetadatum}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactionmetadatum_from_bytes(ptr0, len0);\n        return TransactionMetadatum.__wrap(ret);\n    }\n    /**\n     * @param {MetadataMap} map\n     * @returns {TransactionMetadatum}\n     */\n    static new_map(map) {\n        _assertClass(map, MetadataMap);\n        var ret = wasm.transactionmetadatum_new_map(map.ptr);\n        return TransactionMetadatum.__wrap(ret);\n    }\n    /**\n     * @param {MetadataList} list\n     * @returns {TransactionMetadatum}\n     */\n    static new_list(list) {\n        _assertClass(list, MetadataList);\n        var ret = wasm.transactionmetadatum_new_list(list.ptr);\n        return TransactionMetadatum.__wrap(ret);\n    }\n    /**\n     * @param {Int} int\n     * @returns {TransactionMetadatum}\n     */\n    static new_int(int) {\n        _assertClass(int, Int);\n        var ret = wasm.transactionmetadatum_new_int(int.ptr);\n        return TransactionMetadatum.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TransactionMetadatum}\n     */\n    static new_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactionmetadatum_new_bytes(ptr0, len0);\n        return TransactionMetadatum.__wrap(ret);\n    }\n    /**\n     * @param {string} text\n     * @returns {TransactionMetadatum}\n     */\n    static new_text(text) {\n        var ptr0 = passStringToWasm0(text, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactionmetadatum_new_text(ptr0, len0);\n        return TransactionMetadatum.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    kind() {\n        var ret = wasm.transactionmetadatum_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {MetadataMap}\n     */\n    as_map() {\n        var ret = wasm.transactionmetadatum_as_map(this.ptr);\n        return MetadataMap.__wrap(ret);\n    }\n    /**\n     * @returns {MetadataList}\n     */\n    as_list() {\n        var ret = wasm.transactionmetadatum_as_list(this.ptr);\n        return MetadataList.__wrap(ret);\n    }\n    /**\n     * @returns {Int}\n     */\n    as_int() {\n        var ret = wasm.transactionmetadatum_as_int(this.ptr);\n        return Int.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    as_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionmetadatum_as_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    as_text() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionmetadatum_as_text(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n}\n/** */\nexport class TransactionMetadatumLabels {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionMetadatumLabels.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionmetadatumlabels_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionmetadatumlabels_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TransactionMetadatumLabels}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactionmetadatumlabels_from_bytes(ptr0, len0);\n        return TransactionMetadatumLabels.__wrap(ret);\n    }\n    /**\n     * @returns {TransactionMetadatumLabels}\n     */\n    static new() {\n        var ret = wasm.transactionmetadatumlabels_new();\n        return TransactionMetadatumLabels.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.transactionmetadatumlabels_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {BigNum}\n     */\n    get(index) {\n        var ret = wasm.transactionmetadatumlabels_get(this.ptr, index);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} elem\n     */\n    add(elem) {\n        _assertClass(elem, BigNum);\n        wasm.transactionmetadatumlabels_add(this.ptr, elem.ptr);\n    }\n}\n/** */\nexport class TransactionOutput {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionOutput.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionoutput_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionoutput_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TransactionOutput}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactionoutput_from_bytes(ptr0, len0);\n        return TransactionOutput.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionoutput_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.transactionoutput_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {TransactionOutput}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactionoutput_from_json(ptr0, len0);\n        return TransactionOutput.__wrap(ret);\n    }\n    /**\n     * @returns {Address}\n     */\n    address() {\n        var ret = wasm.transactionoutput_address(this.ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n     * @returns {Value}\n     */\n    amount() {\n        var ret = wasm.transactionoutput_amount(this.ptr);\n        return Value.__wrap(ret);\n    }\n    /**\n     * @returns {Datum | undefined}\n     */\n    datum() {\n        var ret = wasm.transactionoutput_datum(this.ptr);\n        return ret === 0 ? undefined : Datum.__wrap(ret);\n    }\n    /**\n     * @returns {ScriptRef | undefined}\n     */\n    script_ref() {\n        var ret = wasm.transactionoutput_script_ref(this.ptr);\n        return ret === 0 ? undefined : ScriptRef.__wrap(ret);\n    }\n    /**\n     * @param {Datum} datum\n     */\n    set_datum(datum) {\n        _assertClass(datum, Datum);\n        wasm.transactionoutput_set_datum(this.ptr, datum.ptr);\n    }\n    /**\n     * @param {ScriptRef} script_ref\n     */\n    set_script_ref(script_ref) {\n        _assertClass(script_ref, ScriptRef);\n        wasm.transactionoutput_set_script_ref(this.ptr, script_ref.ptr);\n    }\n    /**\n     * @param {Address} address\n     * @param {Value} amount\n     * @returns {TransactionOutput}\n     */\n    static new(address, amount) {\n        _assertClass(address, Address);\n        _assertClass(amount, Value);\n        var ret = wasm.transactionoutput_new(address.ptr, amount.ptr);\n        return TransactionOutput.__wrap(ret);\n    }\n    /**\n     * legacy support: serialize output as array array\n     *\n     * does not support inline datum and script_ref!\n     * @returns {Uint8Array}\n     */\n    to_legacy_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionoutput_to_legacy_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/** */\nexport class TransactionOutputAmountBuilder {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionOutputAmountBuilder.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionoutputamountbuilder_free(ptr);\n    }\n    /**\n     * @param {Value} amount\n     * @returns {TransactionOutputAmountBuilder}\n     */\n    with_value(amount) {\n        _assertClass(amount, Value);\n        var ret = wasm.transactionoutputamountbuilder_with_value(this.ptr, amount.ptr);\n        return TransactionOutputAmountBuilder.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} coin\n     * @returns {TransactionOutputAmountBuilder}\n     */\n    with_coin(coin) {\n        _assertClass(coin, BigNum);\n        var ret = wasm.transactionoutputamountbuilder_with_coin(this.ptr, coin.ptr);\n        return TransactionOutputAmountBuilder.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} coin\n     * @param {MultiAsset} multiasset\n     * @returns {TransactionOutputAmountBuilder}\n     */\n    with_coin_and_asset(coin, multiasset) {\n        _assertClass(coin, BigNum);\n        _assertClass(multiasset, MultiAsset);\n        var ret = wasm.transactionoutputamountbuilder_with_coin_and_asset(this.ptr, coin.ptr, multiasset.ptr);\n        return TransactionOutputAmountBuilder.__wrap(ret);\n    }\n    /**\n     * @param {MultiAsset} multiasset\n     * @param {BigNum} coins_per_utxo_word\n     * @returns {TransactionOutputAmountBuilder}\n     */\n    with_asset_and_min_required_coin(multiasset, coins_per_utxo_word) {\n        _assertClass(multiasset, MultiAsset);\n        _assertClass(coins_per_utxo_word, BigNum);\n        var ret = wasm\n            .transactionoutputamountbuilder_with_asset_and_min_required_coin(this.ptr, multiasset.ptr, coins_per_utxo_word.ptr);\n        return TransactionOutputAmountBuilder.__wrap(ret);\n    }\n    /**\n     * @returns {TransactionOutput}\n     */\n    build() {\n        var ret = wasm.transactionoutputamountbuilder_build(this.ptr);\n        return TransactionOutput.__wrap(ret);\n    }\n}\n/**\n * We introduce a builder-pattern format for creating transaction outputs\n * This is because:\n * 1. Some fields (i.e. data hash) are optional, and we can't easily expose Option<> in WASM\n * 2. Some fields like amounts have many ways it could be set (some depending on other field values being known)\n * 3. Easier to adapt as the output format gets more complicated in future Cardano releases\n */\nexport class TransactionOutputBuilder {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionOutputBuilder.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionoutputbuilder_free(ptr);\n    }\n    /**\n     * @returns {TransactionOutputBuilder}\n     */\n    static new() {\n        var ret = wasm.transactionoutputbuilder_new();\n        return TransactionOutputBuilder.__wrap(ret);\n    }\n    /**\n     * @param {Address} address\n     * @returns {TransactionOutputBuilder}\n     */\n    with_address(address) {\n        _assertClass(address, Address);\n        var ret = wasm.transactionoutputbuilder_with_address(this.ptr, address.ptr);\n        return TransactionOutputBuilder.__wrap(ret);\n    }\n    /**\n     * @param {Datum} data_hash\n     * @returns {TransactionOutputBuilder}\n     */\n    with_datum(data_hash) {\n        _assertClass(data_hash, Datum);\n        var ret = wasm.transactionoutputbuilder_with_datum(this.ptr, data_hash.ptr);\n        return TransactionOutputBuilder.__wrap(ret);\n    }\n    /**\n     * @returns {TransactionOutputAmountBuilder}\n     */\n    next() {\n        var ret = wasm.transactionoutputbuilder_next(this.ptr);\n        return TransactionOutputAmountBuilder.__wrap(ret);\n    }\n}\n/** */\nexport class TransactionOutputs {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionOutputs.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionoutputs_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionoutputs_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TransactionOutputs}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactionoutputs_from_bytes(ptr0, len0);\n        return TransactionOutputs.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionoutputs_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.transactionoutputs_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {TransactionOutputs}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactionoutputs_from_json(ptr0, len0);\n        return TransactionOutputs.__wrap(ret);\n    }\n    /**\n     * @returns {TransactionOutputs}\n     */\n    static new() {\n        var ret = wasm.transactionoutputs_new();\n        return TransactionOutputs.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.transactionoutputs_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {TransactionOutput}\n     */\n    get(index) {\n        var ret = wasm.transactionoutputs_get(this.ptr, index);\n        return TransactionOutput.__wrap(ret);\n    }\n    /**\n     * @param {TransactionOutput} elem\n     */\n    add(elem) {\n        _assertClass(elem, TransactionOutput);\n        wasm.transactionoutputs_add(this.ptr, elem.ptr);\n    }\n}\n/** */\nexport class TransactionUnspentOutput {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionUnspentOutput.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionunspentoutput_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionunspentoutput_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TransactionUnspentOutput}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactionunspentoutput_from_bytes(ptr0, len0);\n        return TransactionUnspentOutput.__wrap(ret);\n    }\n    /**\n     * @param {TransactionInput} input\n     * @param {TransactionOutput} output\n     * @returns {TransactionUnspentOutput}\n     */\n    static new(input, output) {\n        _assertClass(input, TransactionInput);\n        _assertClass(output, TransactionOutput);\n        var ret = wasm.transactionunspentoutput_new(input.ptr, output.ptr);\n        return TransactionUnspentOutput.__wrap(ret);\n    }\n    /**\n     * @returns {TransactionInput}\n     */\n    input() {\n        var ret = wasm.transactionunspentoutput_input(this.ptr);\n        return TransactionInput.__wrap(ret);\n    }\n    /**\n     * @returns {TransactionOutput}\n     */\n    output() {\n        var ret = wasm.transactionunspentoutput_output(this.ptr);\n        return TransactionOutput.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_legacy_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionunspentoutput_to_legacy_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/** */\nexport class TransactionUnspentOutputs {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionUnspentOutputs.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionunspentoutputs_free(ptr);\n    }\n    /**\n     * @returns {TransactionUnspentOutputs}\n     */\n    static new() {\n        var ret = wasm.transactionunspentoutputs_new();\n        return TransactionUnspentOutputs.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.transactionunspentoutputs_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {TransactionUnspentOutput}\n     */\n    get(index) {\n        var ret = wasm.transactionunspentoutputs_get(this.ptr, index);\n        return TransactionUnspentOutput.__wrap(ret);\n    }\n    /**\n     * @param {TransactionUnspentOutput} elem\n     */\n    add(elem) {\n        _assertClass(elem, TransactionUnspentOutput);\n        wasm.transactionunspentoutputs_add(this.ptr, elem.ptr);\n    }\n}\n/** */\nexport class TransactionWitnessSet {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionWitnessSet.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionwitnessset_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionwitnessset_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TransactionWitnessSet}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactionwitnessset_from_bytes(ptr0, len0);\n        return TransactionWitnessSet.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionwitnessset_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.transactionwitnessset_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {TransactionWitnessSet}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactionwitnessset_from_json(ptr0, len0);\n        return TransactionWitnessSet.__wrap(ret);\n    }\n    /**\n     * @param {Vkeywitnesses} vkeys\n     */\n    set_vkeys(vkeys) {\n        _assertClass(vkeys, Vkeywitnesses);\n        wasm.transactionwitnessset_set_vkeys(this.ptr, vkeys.ptr);\n    }\n    /**\n     * @returns {Vkeywitnesses | undefined}\n     */\n    vkeys() {\n        var ret = wasm.transactionwitnessset_vkeys(this.ptr);\n        return ret === 0 ? undefined : Vkeywitnesses.__wrap(ret);\n    }\n    /**\n     * @param {NativeScripts} native_scripts\n     */\n    set_native_scripts(native_scripts) {\n        _assertClass(native_scripts, NativeScripts);\n        wasm.transactionwitnessset_set_native_scripts(this.ptr, native_scripts.ptr);\n    }\n    /**\n     * @returns {NativeScripts | undefined}\n     */\n    native_scripts() {\n        var ret = wasm.transactionwitnessset_native_scripts(this.ptr);\n        return ret === 0 ? undefined : NativeScripts.__wrap(ret);\n    }\n    /**\n     * @param {BootstrapWitnesses} bootstraps\n     */\n    set_bootstraps(bootstraps) {\n        _assertClass(bootstraps, BootstrapWitnesses);\n        wasm.transactionwitnessset_set_bootstraps(this.ptr, bootstraps.ptr);\n    }\n    /**\n     * @returns {BootstrapWitnesses | undefined}\n     */\n    bootstraps() {\n        var ret = wasm.transactionwitnessset_bootstraps(this.ptr);\n        return ret === 0 ? undefined : BootstrapWitnesses.__wrap(ret);\n    }\n    /**\n     * @param {PlutusScripts} plutus_scripts\n     */\n    set_plutus_scripts(plutus_scripts) {\n        _assertClass(plutus_scripts, PlutusScripts);\n        wasm.transactionwitnessset_set_plutus_scripts(this.ptr, plutus_scripts.ptr);\n    }\n    /**\n     * @returns {PlutusScripts | undefined}\n     */\n    plutus_scripts() {\n        var ret = wasm.transactionwitnessset_plutus_scripts(this.ptr);\n        return ret === 0 ? undefined : PlutusScripts.__wrap(ret);\n    }\n    /**\n     * @param {PlutusList} plutus_data\n     */\n    set_plutus_data(plutus_data) {\n        _assertClass(plutus_data, PlutusList);\n        wasm.transactionwitnessset_set_plutus_data(this.ptr, plutus_data.ptr);\n    }\n    /**\n     * @returns {PlutusList | undefined}\n     */\n    plutus_data() {\n        var ret = wasm.transactionwitnessset_plutus_data(this.ptr);\n        return ret === 0 ? undefined : PlutusList.__wrap(ret);\n    }\n    /**\n     * @param {Redeemers} redeemers\n     */\n    set_redeemers(redeemers) {\n        _assertClass(redeemers, Redeemers);\n        wasm.transactionwitnessset_set_redeemers(this.ptr, redeemers.ptr);\n    }\n    /**\n     * @param {PlutusScripts} plutus_scripts\n     */\n    set_plutus_v2_scripts(plutus_scripts) {\n        _assertClass(plutus_scripts, PlutusScripts);\n        wasm.transactionwitnessset_set_plutus_v2_scripts(this.ptr, plutus_scripts.ptr);\n    }\n    /**\n     * @returns {Redeemers | undefined}\n     */\n    redeemers() {\n        var ret = wasm.transactionwitnessset_redeemers(this.ptr);\n        return ret === 0 ? undefined : Redeemers.__wrap(ret);\n    }\n    /**\n     * @returns {PlutusScripts | undefined}\n     */\n    plutus_v2_scripts() {\n        var ret = wasm.transactionwitnessset_plutus_v2_scripts(this.ptr);\n        return ret === 0 ? undefined : PlutusScripts.__wrap(ret);\n    }\n    /**\n     * @returns {TransactionWitnessSet}\n     */\n    static new() {\n        var ret = wasm.transactionwitnessset_new();\n        return TransactionWitnessSet.__wrap(ret);\n    }\n}\n/**\n * Builder de-duplicates witnesses as they are added\n */\nexport class TransactionWitnessSetBuilder {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionWitnessSetBuilder.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionwitnesssetbuilder_free(ptr);\n    }\n    /**\n     * @param {Vkeywitness} vkey\n     */\n    add_vkey(vkey) {\n        _assertClass(vkey, Vkeywitness);\n        wasm.transactionwitnesssetbuilder_add_vkey(this.ptr, vkey.ptr);\n    }\n    /**\n     * @param {BootstrapWitness} bootstrap\n     */\n    add_bootstrap(bootstrap) {\n        _assertClass(bootstrap, BootstrapWitness);\n        wasm.transactionwitnesssetbuilder_add_bootstrap(this.ptr, bootstrap.ptr);\n    }\n    /**\n     * @param {NativeScript} native_script\n     */\n    add_native_script(native_script) {\n        _assertClass(native_script, NativeScript);\n        wasm.transactionwitnesssetbuilder_add_native_script(this.ptr, native_script.ptr);\n    }\n    /**\n     * @param {PlutusScript} plutus_script\n     */\n    add_plutus_script(plutus_script) {\n        _assertClass(plutus_script, PlutusScript);\n        wasm.transactionwitnesssetbuilder_add_plutus_script(this.ptr, plutus_script.ptr);\n    }\n    /**\n     * @param {PlutusScript} plutus_script\n     */\n    add_plutus_v2_script(plutus_script) {\n        _assertClass(plutus_script, PlutusScript);\n        wasm.transactionwitnesssetbuilder_add_plutus_v2_script(this.ptr, plutus_script.ptr);\n    }\n    /**\n     * @param {PlutusData} plutus_datum\n     */\n    add_plutus_datum(plutus_datum) {\n        _assertClass(plutus_datum, PlutusData);\n        wasm.transactionwitnesssetbuilder_add_plutus_datum(this.ptr, plutus_datum.ptr);\n    }\n    /**\n     * @param {Redeemer} redeemer\n     */\n    add_redeemer(redeemer) {\n        _assertClass(redeemer, Redeemer);\n        wasm.transactionwitnesssetbuilder_add_redeemer(this.ptr, redeemer.ptr);\n    }\n    /**\n     * @param {RequiredWitnessSet} required_wits\n     */\n    add_required_wits(required_wits) {\n        _assertClass(required_wits, RequiredWitnessSet);\n        wasm.transactionwitnesssetbuilder_add_required_wits(this.ptr, required_wits.ptr);\n    }\n    /**\n     * @returns {TransactionWitnessSetBuilder}\n     */\n    static new() {\n        var ret = wasm.transactionwitnesssetbuilder_new();\n        return TransactionWitnessSetBuilder.__wrap(ret);\n    }\n    /**\n     * @param {TransactionWitnessSet} wit_set\n     */\n    add_existing(wit_set) {\n        _assertClass(wit_set, TransactionWitnessSet);\n        wasm.transactionwitnesssetbuilder_add_existing(this.ptr, wit_set.ptr);\n    }\n    /**\n     * @returns {TransactionWitnessSet}\n     */\n    build() {\n        var ret = wasm.transactionwitnesssetbuilder_build(this.ptr);\n        return TransactionWitnessSet.__wrap(ret);\n    }\n}\n/** */\nexport class TransactionWitnessSets {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionWitnessSets.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionwitnesssets_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionwitnesssets_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TransactionWitnessSets}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactionwitnesssets_from_bytes(ptr0, len0);\n        return TransactionWitnessSets.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionwitnesssets_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.transactionwitnesssets_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {TransactionWitnessSets}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactionwitnesssets_from_json(ptr0, len0);\n        return TransactionWitnessSets.__wrap(ret);\n    }\n    /**\n     * @returns {TransactionWitnessSets}\n     */\n    static new() {\n        var ret = wasm.transactionwitnesssets_new();\n        return TransactionWitnessSets.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.transactionwitnesssets_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {TransactionWitnessSet}\n     */\n    get(index) {\n        var ret = wasm.transactionwitnesssets_get(this.ptr, index);\n        return TransactionWitnessSet.__wrap(ret);\n    }\n    /**\n     * @param {TransactionWitnessSet} elem\n     */\n    add(elem) {\n        _assertClass(elem, TransactionWitnessSet);\n        wasm.transactionwitnesssets_add(this.ptr, elem.ptr);\n    }\n}\n/** */\nexport class URL {\n    static __wrap(ptr) {\n        const obj = Object.create(URL.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_url_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.url_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {URL}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.url_from_bytes(ptr0, len0);\n        return URL.__wrap(ret);\n    }\n    /**\n     * @param {string} url\n     * @returns {URL}\n     */\n    static new(url) {\n        var ptr0 = passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.url_new(ptr0, len0);\n        return URL.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    url() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.url_url(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n}\n/** */\nexport class UnitInterval {\n    static __wrap(ptr) {\n        const obj = Object.create(UnitInterval.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_unitinterval_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.unitinterval_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {UnitInterval}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.unitinterval_from_bytes(ptr0, len0);\n        return UnitInterval.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.unitinterval_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.unitinterval_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {UnitInterval}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.unitinterval_from_json(ptr0, len0);\n        return UnitInterval.__wrap(ret);\n    }\n    /**\n     * @returns {BigNum}\n     */\n    numerator() {\n        var ret = wasm.unitinterval_numerator(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {BigNum}\n     */\n    denominator() {\n        var ret = wasm.unitinterval_denominator(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} numerator\n     * @param {BigNum} denominator\n     * @returns {UnitInterval}\n     */\n    static new(numerator, denominator) {\n        _assertClass(numerator, BigNum);\n        _assertClass(denominator, BigNum);\n        var ret = wasm.unitinterval_new(numerator.ptr, denominator.ptr);\n        return UnitInterval.__wrap(ret);\n    }\n    /**\n     * @param {number} float_number\n     * @returns {UnitInterval}\n     */\n    static from_float(float_number) {\n        var ret = wasm.unitinterval_from_float(float_number);\n        return UnitInterval.__wrap(ret);\n    }\n}\n/** */\nexport class Update {\n    static __wrap(ptr) {\n        const obj = Object.create(Update.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_update_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.update_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Update}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.update_from_bytes(ptr0, len0);\n        return Update.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.update_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.update_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {Update}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.update_from_json(ptr0, len0);\n        return Update.__wrap(ret);\n    }\n    /**\n     * @returns {ProposedProtocolParameterUpdates}\n     */\n    proposed_protocol_parameter_updates() {\n        var ret = wasm.update_proposed_protocol_parameter_updates(this.ptr);\n        return ProposedProtocolParameterUpdates.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    epoch() {\n        var ret = wasm.update_epoch(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {ProposedProtocolParameterUpdates} proposed_protocol_parameter_updates\n     * @param {number} epoch\n     * @returns {Update}\n     */\n    static new(proposed_protocol_parameter_updates, epoch) {\n        _assertClass(proposed_protocol_parameter_updates, ProposedProtocolParameterUpdates);\n        var ret = wasm.update_new(proposed_protocol_parameter_updates.ptr, epoch);\n        return Update.__wrap(ret);\n    }\n}\n/** */\nexport class VRFCert {\n    static __wrap(ptr) {\n        const obj = Object.create(VRFCert.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_vrfcert_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.vrfcert_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {VRFCert}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.vrfcert_from_bytes(ptr0, len0);\n        return VRFCert.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.vrfcert_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.vrfcert_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {VRFCert}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.vrfcert_from_json(ptr0, len0);\n        return VRFCert.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    output() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.vrfcert_output(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    proof() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.vrfcert_proof(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} output\n     * @param {Uint8Array} proof\n     * @returns {VRFCert}\n     */\n    static new(output, proof) {\n        var ptr0 = passArray8ToWasm0(output, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = passArray8ToWasm0(proof, wasm.__wbindgen_malloc);\n        var len1 = WASM_VECTOR_LEN;\n        var ret = wasm.vrfcert_new(ptr0, len0, ptr1, len1);\n        return VRFCert.__wrap(ret);\n    }\n}\n/** */\nexport class VRFKeyHash {\n    static __wrap(ptr) {\n        const obj = Object.create(VRFKeyHash.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_vrfkeyhash_free(ptr);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {VRFKeyHash}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.vrfkeyhash_from_bytes(ptr0, len0);\n        return VRFKeyHash.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.vrfkeyhash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} prefix\n     * @returns {string}\n     */\n    to_bech32(prefix) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.vrfkeyhash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} bech_str\n     * @returns {VRFKeyHash}\n     */\n    static from_bech32(bech_str) {\n        var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.vrfkeyhash_from_bech32(ptr0, len0);\n        return VRFKeyHash.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_hex() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.vrfkeyhash_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} hex\n     * @returns {VRFKeyHash}\n     */\n    static from_hex(hex) {\n        var ptr0 = passStringToWasm0(hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.vrfkeyhash_from_hex(ptr0, len0);\n        return VRFKeyHash.__wrap(ret);\n    }\n}\n/** */\nexport class VRFVKey {\n    static __wrap(ptr) {\n        const obj = Object.create(VRFVKey.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_vrfvkey_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.vrfvkey_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {VRFVKey}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.vrfvkey_from_bytes(ptr0, len0);\n        return VRFVKey.__wrap(ret);\n    }\n    /**\n     * @returns {VRFKeyHash}\n     */\n    hash() {\n        var ret = wasm.vrfvkey_hash(this.ptr);\n        return VRFKeyHash.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_raw_key() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.vrfvkey_to_raw_key(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/** */\nexport class Value {\n    static __wrap(ptr) {\n        const obj = Object.create(Value.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_value_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.value_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Value}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.value_from_bytes(ptr0, len0);\n        return Value.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.value_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.value_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {Value}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.value_from_json(ptr0, len0);\n        return Value.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} coin\n     * @returns {Value}\n     */\n    static new(coin) {\n        _assertClass(coin, BigNum);\n        var ret = wasm.value_new(coin.ptr);\n        return Value.__wrap(ret);\n    }\n    /**\n     * @param {MultiAsset} multiasset\n     * @returns {Value}\n     */\n    static new_from_assets(multiasset) {\n        _assertClass(multiasset, MultiAsset);\n        var ret = wasm.value_new_from_assets(multiasset.ptr);\n        return Value.__wrap(ret);\n    }\n    /**\n     * @returns {Value}\n     */\n    static zero() {\n        var ret = wasm.value_zero();\n        return Value.__wrap(ret);\n    }\n    /**\n     * @returns {boolean}\n     */\n    is_zero() {\n        var ret = wasm.value_is_zero(this.ptr);\n        return ret !== 0;\n    }\n    /**\n     * @returns {BigNum}\n     */\n    coin() {\n        var ret = wasm.value_coin(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} coin\n     */\n    set_coin(coin) {\n        _assertClass(coin, BigNum);\n        wasm.value_set_coin(this.ptr, coin.ptr);\n    }\n    /**\n     * @returns {MultiAsset | undefined}\n     */\n    multiasset() {\n        var ret = wasm.value_multiasset(this.ptr);\n        return ret === 0 ? undefined : MultiAsset.__wrap(ret);\n    }\n    /**\n     * @param {MultiAsset} multiasset\n     */\n    set_multiasset(multiasset) {\n        _assertClass(multiasset, MultiAsset);\n        wasm.value_set_multiasset(this.ptr, multiasset.ptr);\n    }\n    /**\n     * @param {Value} rhs\n     * @returns {Value}\n     */\n    checked_add(rhs) {\n        _assertClass(rhs, Value);\n        var ret = wasm.value_checked_add(this.ptr, rhs.ptr);\n        return Value.__wrap(ret);\n    }\n    /**\n     * @param {Value} rhs_value\n     * @returns {Value}\n     */\n    checked_sub(rhs_value) {\n        _assertClass(rhs_value, Value);\n        var ret = wasm.value_checked_sub(this.ptr, rhs_value.ptr);\n        return Value.__wrap(ret);\n    }\n    /**\n     * @param {Value} rhs_value\n     * @returns {Value}\n     */\n    clamped_sub(rhs_value) {\n        _assertClass(rhs_value, Value);\n        var ret = wasm.value_clamped_sub(this.ptr, rhs_value.ptr);\n        return Value.__wrap(ret);\n    }\n    /**\n     * note: values are only partially comparable\n     * @param {Value} rhs_value\n     * @returns {number | undefined}\n     */\n    compare(rhs_value) {\n        _assertClass(rhs_value, Value);\n        var ret = wasm.value_compare(this.ptr, rhs_value.ptr);\n        return ret === 0xFFFFFF ? undefined : ret;\n    }\n}\n/** */\nexport class Vkey {\n    static __wrap(ptr) {\n        const obj = Object.create(Vkey.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_vkey_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.vkey_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Vkey}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.vkey_from_bytes(ptr0, len0);\n        return Vkey.__wrap(ret);\n    }\n    /**\n     * @param {PublicKey} pk\n     * @returns {Vkey}\n     */\n    static new(pk) {\n        _assertClass(pk, PublicKey);\n        var ret = wasm.vkey_new(pk.ptr);\n        return Vkey.__wrap(ret);\n    }\n    /**\n     * @returns {PublicKey}\n     */\n    public_key() {\n        var ret = wasm.vkey_public_key(this.ptr);\n        return PublicKey.__wrap(ret);\n    }\n}\n/** */\nexport class Vkeys {\n    static __wrap(ptr) {\n        const obj = Object.create(Vkeys.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_vkeys_free(ptr);\n    }\n    /**\n     * @returns {Vkeys}\n     */\n    static new() {\n        var ret = wasm.vkeys_new();\n        return Vkeys.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.vkeys_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {Vkey}\n     */\n    get(index) {\n        var ret = wasm.vkeys_get(this.ptr, index);\n        return Vkey.__wrap(ret);\n    }\n    /**\n     * @param {Vkey} elem\n     */\n    add(elem) {\n        _assertClass(elem, Vkey);\n        wasm.vkeys_add(this.ptr, elem.ptr);\n    }\n}\n/** */\nexport class Vkeywitness {\n    static __wrap(ptr) {\n        const obj = Object.create(Vkeywitness.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_vkeywitness_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.vkeywitness_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Vkeywitness}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.vkeywitness_from_bytes(ptr0, len0);\n        return Vkeywitness.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.vkeywitness_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.vkeywitness_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {Vkeywitness}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.vkeywitness_from_json(ptr0, len0);\n        return Vkeywitness.__wrap(ret);\n    }\n    /**\n     * @param {Vkey} vkey\n     * @param {Ed25519Signature} signature\n     * @returns {Vkeywitness}\n     */\n    static new(vkey, signature) {\n        _assertClass(vkey, Vkey);\n        _assertClass(signature, Ed25519Signature);\n        var ret = wasm.vkeywitness_new(vkey.ptr, signature.ptr);\n        return Vkeywitness.__wrap(ret);\n    }\n    /**\n     * @returns {Vkey}\n     */\n    vkey() {\n        var ret = wasm.vkeywitness_vkey(this.ptr);\n        return Vkey.__wrap(ret);\n    }\n    /**\n     * @returns {Ed25519Signature}\n     */\n    signature() {\n        var ret = wasm.vkeywitness_signature(this.ptr);\n        return Ed25519Signature.__wrap(ret);\n    }\n}\n/** */\nexport class Vkeywitnesses {\n    static __wrap(ptr) {\n        const obj = Object.create(Vkeywitnesses.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_vkeywitnesses_free(ptr);\n    }\n    /**\n     * @returns {Vkeywitnesses}\n     */\n    static new() {\n        var ret = wasm.vkeywitnesses_new();\n        return Vkeywitnesses.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.vkeywitnesses_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {Vkeywitness}\n     */\n    get(index) {\n        var ret = wasm.vkeywitnesses_get(this.ptr, index);\n        return Vkeywitness.__wrap(ret);\n    }\n    /**\n     * @param {Vkeywitness} elem\n     */\n    add(elem) {\n        _assertClass(elem, Vkeywitness);\n        wasm.vkeywitnesses_add(this.ptr, elem.ptr);\n    }\n}\n/** */\nexport class Withdrawals {\n    static __wrap(ptr) {\n        const obj = Object.create(Withdrawals.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_withdrawals_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.withdrawals_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Withdrawals}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.withdrawals_from_bytes(ptr0, len0);\n        return Withdrawals.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.withdrawals_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.withdrawals_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {Withdrawals}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.withdrawals_from_json(ptr0, len0);\n        return Withdrawals.__wrap(ret);\n    }\n    /**\n     * @returns {Withdrawals}\n     */\n    static new() {\n        var ret = wasm.withdrawals_new();\n        return Withdrawals.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.withdrawals_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {RewardAddress} key\n     * @param {BigNum} value\n     * @returns {BigNum | undefined}\n     */\n    insert(key, value) {\n        _assertClass(key, RewardAddress);\n        _assertClass(value, BigNum);\n        var ret = wasm.withdrawals_insert(this.ptr, key.ptr, value.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * @param {RewardAddress} key\n     * @returns {BigNum | undefined}\n     */\n    get(key) {\n        _assertClass(key, RewardAddress);\n        var ret = wasm.withdrawals_get(this.ptr, key.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {RewardAddresses}\n     */\n    keys() {\n        var ret = wasm.withdrawals_keys(this.ptr);\n        return RewardAddresses.__wrap(ret);\n    }\n}\nasync function load(module, imports) {\n    if (typeof Response === \"function\" && module instanceof Response) {\n        if (typeof WebAssembly.instantiateStreaming === \"function\") {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n            }\n            catch (e) {\n                if (module.headers.get(\"Content-Type\") != \"application/wasm\") {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n                }\n                else {\n                    throw e;\n                }\n            }\n        }\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n    }\n    else {\n        const instance = await WebAssembly.instantiate(module, imports);\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module };\n        }\n        else {\n            return instance;\n        }\n    }\n}\nasync function init(input) {\n    if (typeof input === \"undefined\") {\n        input = new URL(\"cardano_multiplatform_lib_bg.wasm\", import.meta.url);\n    }\n    const imports = {};\n    imports.wbg = {};\n    imports.wbg.__wbindgen_object_drop_ref = function (arg0) {\n        takeObject(arg0);\n    };\n    imports.wbg.__wbg_transaction_new = function (arg0) {\n        var ret = Transaction.__wrap(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_string_new = function (arg0, arg1) {\n        var ret = getStringFromWasm0(arg0, arg1);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_string_get = function (arg0, arg1) {\n        const obj = getObject(arg1);\n        var ret = typeof (obj) === \"string\" ? obj : undefined;\n        var ptr0 = isLikeNone(ret)\n            ? 0\n            : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len0;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n    };\n    imports.wbg.__wbg_fetch_da4b562f370dc6f1 = function (arg0, arg1) {\n        var ret = getObject(arg0).fetch(getObject(arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_json_parse = function (arg0, arg1) {\n        var ret = JSON.parse(getStringFromWasm0(arg0, arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_json_serialize = function (arg0, arg1) {\n        const obj = getObject(arg1);\n        var ret = JSON.stringify(obj === undefined ? null : obj);\n        var ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len0;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n    };\n    imports.wbg.__wbg_headers_0fdd616fbc057820 = function (arg0) {\n        var ret = getObject(arg0).headers;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_newwithstrandinit_155cb1478824b198 = function () {\n        return handleError(function (arg0, arg1, arg2) {\n            var ret = new Request(getStringFromWasm0(arg0, arg1), getObject(arg2));\n            return addHeapObject(ret);\n        }, arguments);\n    };\n    imports.wbg.__wbg_instanceof_Response_d61ff4c524b8dbc4 = function (arg0) {\n        var ret = getObject(arg0) instanceof Response;\n        return ret;\n    };\n    imports.wbg.__wbg_json_0662bf961a0f5285 = function () {\n        return handleError(function (arg0) {\n            var ret = getObject(arg0).json();\n            return addHeapObject(ret);\n        }, arguments);\n    };\n    imports.wbg.__wbg_set_5d0410fa55f5533e = function () {\n        return handleError(function (arg0, arg1, arg2, arg3, arg4) {\n            getObject(arg0).set(getStringFromWasm0(arg1, arg2), getStringFromWasm0(arg3, arg4));\n        }, arguments);\n    };\n    imports.wbg.__wbindgen_object_clone_ref = function (arg0) {\n        var ret = getObject(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_cb_drop = function (arg0) {\n        const obj = takeObject(arg0).original;\n        if (obj.cnt-- == 1) {\n            obj.a = 0;\n            return true;\n        }\n        var ret = false;\n        return ret;\n    };\n    imports.wbg.__wbg_process_70251ed1291754d5 = function (arg0) {\n        var ret = getObject(arg0).process;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_is_object = function (arg0) {\n        const val = getObject(arg0);\n        var ret = typeof (val) === \"object\" && val !== null;\n        return ret;\n    };\n    imports.wbg.__wbg_versions_b23f2588cdb2ddbb = function (arg0) {\n        var ret = getObject(arg0).versions;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_node_61b8c9a82499895d = function (arg0) {\n        var ret = getObject(arg0).node;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_is_string = function (arg0) {\n        var ret = typeof (getObject(arg0)) === \"string\";\n        return ret;\n    };\n    imports.wbg.__wbg_require_2a93bc09fee45aca = function () {\n        return handleError(function (arg0, arg1, arg2) {\n            var ret = getObject(arg0).require(getStringFromWasm0(arg1, arg2));\n            return addHeapObject(ret);\n        }, arguments);\n    };\n    imports.wbg.__wbg_crypto_2f56257a38275dbd = function (arg0) {\n        var ret = getObject(arg0).crypto;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_msCrypto_d07655bf62361f21 = function (arg0) {\n        var ret = getObject(arg0).msCrypto;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_getRandomValues_fb6b088efb6bead2 = function () {\n        return handleError(function (arg0, arg1) {\n            getObject(arg0).getRandomValues(getObject(arg1));\n        }, arguments);\n    };\n    imports.wbg.__wbg_static_accessor_NODE_MODULE_33b45247c55045b0 = function () {\n        var ret = module;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_randomFillSync_654a7797990fb8db = function () {\n        return handleError(function (arg0, arg1, arg2) {\n            getObject(arg0).randomFillSync(getArrayU8FromWasm0(arg1, arg2));\n        }, arguments);\n    };\n    imports.wbg.__wbg_call_ba36642bd901572b = function () {\n        return handleError(function (arg0, arg1) {\n            var ret = getObject(arg0).call(getObject(arg1));\n            return addHeapObject(ret);\n        }, arguments);\n    };\n    imports.wbg.__wbg_self_bb69a836a72ec6e9 = function () {\n        return handleError(function () {\n            var ret = self.self;\n            return addHeapObject(ret);\n        }, arguments);\n    };\n    imports.wbg.__wbg_window_3304fc4b414c9693 = function () {\n        return handleError(function () {\n            var ret = globalThis.window;\n            return addHeapObject(ret);\n        }, arguments);\n    };\n    imports.wbg.__wbg_globalThis_e0d21cabc6630763 = function () {\n        return handleError(function () {\n            var ret = globalThis.globalThis;\n            return addHeapObject(ret);\n        }, arguments);\n    };\n    imports.wbg.__wbg_global_8463719227271676 = function () {\n        return handleError(function () {\n            var ret = global.global;\n            return addHeapObject(ret);\n        }, arguments);\n    };\n    imports.wbg.__wbindgen_is_undefined = function (arg0) {\n        var ret = getObject(arg0) === undefined;\n        return ret;\n    };\n    imports.wbg.__wbg_newnoargs_9fdd8f3961dd1bee = function (arg0, arg1) {\n        var ret = new Function(getStringFromWasm0(arg0, arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_call_3fc07b7d5fc9022d = function () {\n        return handleError(function (arg0, arg1, arg2) {\n            var ret = getObject(arg0).call(getObject(arg1), getObject(arg2));\n            return addHeapObject(ret);\n        }, arguments);\n    };\n    imports.wbg.__wbg_new_edbe38a4e21329dd = function () {\n        var ret = new Object();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_new_c143a4f563f78c4e = function (arg0, arg1) {\n        try {\n            var state0 = { a: arg0, b: arg1 };\n            var cb0 = (arg0, arg1) => {\n                const a = state0.a;\n                state0.a = 0;\n                try {\n                    return __wbg_adapter_1367(a, state0.b, arg0, arg1);\n                }\n                finally {\n                    state0.a = a;\n                }\n            };\n            var ret = new Promise(cb0);\n            return addHeapObject(ret);\n        }\n        finally {\n            state0.a = state0.b = 0;\n        }\n    };\n    imports.wbg.__wbg_resolve_cae3d8f752f5db88 = function (arg0) {\n        var ret = Promise.resolve(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_then_c2361a9d5c9a4fcb = function (arg0, arg1) {\n        var ret = getObject(arg0).then(getObject(arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_then_6c9a4bf55755f9b8 = function (arg0, arg1, arg2) {\n        var ret = getObject(arg0).then(getObject(arg1), getObject(arg2));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_buffer_9e184d6f785de5ed = function (arg0) {\n        var ret = getObject(arg0).buffer;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_new_e8101319e4cf95fc = function (arg0) {\n        var ret = new Uint8Array(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_set_e8ae7b27314e8b98 = function (arg0, arg1, arg2) {\n        getObject(arg0).set(getObject(arg1), arg2 >>> 0);\n    };\n    imports.wbg.__wbg_length_2d56cb37075fcfb1 = function (arg0) {\n        var ret = getObject(arg0).length;\n        return ret;\n    };\n    imports.wbg.__wbg_newwithlength_a8d1dbcbe703a5c6 = function (arg0) {\n        var ret = new Uint8Array(arg0 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_subarray_901ede8318da52a6 = function (arg0, arg1, arg2) {\n        var ret = getObject(arg0).subarray(arg1 >>> 0, arg2 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_set_73349fc4814e0fc6 = function () {\n        return handleError(function (arg0, arg1, arg2) {\n            var ret = Reflect.set(getObject(arg0), getObject(arg1), getObject(arg2));\n            return ret;\n        }, arguments);\n    };\n    imports.wbg.__wbg_new_3a746f2619705add = function (arg0, arg1) {\n        var ret = new Function(getStringFromWasm0(arg0, arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_call_f54d3a6dadb199ca = function (arg0, arg1) {\n        var ret = getObject(arg0).call(getObject(arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_jsval_eq = function (arg0, arg1) {\n        var ret = getObject(arg0) === getObject(arg1);\n        return ret;\n    };\n    imports.wbg.__wbg_self_ac379e780a0d8b94 = function (arg0) {\n        var ret = getObject(arg0).self;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_crypto_1e4302b85d4f64a2 = function (arg0) {\n        var ret = getObject(arg0).crypto;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_getRandomValues_1b4ba144162a5c9e = function (arg0) {\n        var ret = getObject(arg0).getRandomValues;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_require_6461b1e9a0d7c34a = function (arg0, arg1) {\n        var ret = require(getStringFromWasm0(arg0, arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_randomFillSync_1b52c8482374c55b = function (arg0, arg1, arg2) {\n        getObject(arg0).randomFillSync(getArrayU8FromWasm0(arg1, arg2));\n    };\n    imports.wbg.__wbg_getRandomValues_1ef11e888e5228e9 = function (arg0, arg1, arg2) {\n        getObject(arg0).getRandomValues(getArrayU8FromWasm0(arg1, arg2));\n    };\n    imports.wbg.__wbindgen_debug_string = function (arg0, arg1) {\n        var ret = debugString(getObject(arg1));\n        var ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len0;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n    };\n    imports.wbg.__wbindgen_throw = function (arg0, arg1) {\n        throw new Error(getStringFromWasm0(arg0, arg1));\n    };\n    imports.wbg.__wbindgen_rethrow = function (arg0) {\n        throw takeObject(arg0);\n    };\n    imports.wbg.__wbindgen_memory = function () {\n        var ret = wasm.memory;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_closure_wrapper8401 = function (arg0, arg1, arg2) {\n        var ret = makeMutClosure(arg0, arg1, 442, __wbg_adapter_32);\n        return addHeapObject(ret);\n    };\n    if (typeof input === \"string\" ||\n        (typeof Request === \"function\" && input instanceof Request) ||\n        (typeof URL === \"function\" && input instanceof URL)) {\n        input = fetch(input);\n    }\n    const { instance, module } = await load(await input, imports);\n    wasm = instance.exports;\n    init.__wbindgen_wasm_module = module;\n    return wasm;\n}\nexport default init;\n"],"names":["wasm","heap","getObject","idx","heap_next","dropObject","takeObject","ret","cachedTextDecoder","cachegetUint8Memory0","getUint8Memory0","getStringFromWasm0","ptr","len","addHeapObject","obj","WASM_VECTOR_LEN","cachedTextEncoder","encodeString","arg","view","buf","passStringToWasm0","malloc","realloc","mem","offset","code","isLikeNone","x","cachegetInt32Memory0","getInt32Memory0","debugString","val","type","description","name","length","debug","i","builtInMatches","className","makeMutClosure","arg0","arg1","dtor","f","state","real","args","a","__wbg_adapter_32","arg2","getArrayU8FromWasm0","passArray8ToWasm0","_assertClass","instance","klass","encode_arbitrary_bytes_as_metadatum","bytes","ptr0","len0","TransactionMetadatum","decode_arbitrary_bytes_from_metadatum","metadata","retptr","r0","r1","v0","encode_json_str_to_metadatum","json","schema","decode_metadatum_to_json_str","metadatum","cachegetUint32Memory0","getUint32Memory0","getArrayU32FromWasm0","encrypt_with_password","password","salt","nonce","data","ptr1","len1","ptr2","len2","ptr3","len3","decrypt_with_password","min_fee","tx","linear_fee","ex_unit_prices","Transaction","LinearFee","ExUnitPrices","BigNum","apply_params_to_plutus_script","params","plutus_script","PlutusList","PlutusScript","make_daedalus_bootstrap_witness","tx_body_hash","addr","key","TransactionHash","ByronAddress","LegacyDaedalusPrivateKey","BootstrapWitness","make_icarus_bootstrap_witness","Bip32PrivateKey","make_vkey_witness","sk","PrivateKey","Vkeywitness","hash_auxiliary_data","auxiliary_data","AuxiliaryData","AuxiliaryDataHash","hash_transaction","tx_body","TransactionBody","hash_plutus_data","plutus_data","PlutusData","DataHash","hash_blake2b256","v1","hash_blake2b224","hash_script_data","redeemers","cost_models","datums","Redeemers","Costmdls","ScriptDataHash","get_implicit_input","txbody","pool_deposit","key_deposit","Value","get_deposit","min_ada_required","output","coins_per_utxo_byte","TransactionOutput","encode_json_str_to_native_script","self_xpub","NativeScript","encode_json_str_to_plutus_datum","decode_plutus_datum_to_json_str","datum","handleError","e","__wbg_adapter_1367","arg3","CertificateKind","MIRPot","MIRKind","RelayKind","NativeScriptKind","NetworkIdKind","TransactionMetadatumKind","MetadataJsonSchema","StakeCredKind","ScriptWitnessKind","ScriptHashNamespace","ScriptSchema","LanguageKind","PlutusDataKind","RedeemerTagKind","PlutusDatumSchema","ScriptKind","DatumKind","Address","prefix","bech_str","RewardAddress","PointerAddress","EnterpriseAddress","BaseAddress","AssetName","AssetNames","index","elem","Assets","value","GeneralTransactionMetadata","NativeScripts","native_scripts","PlutusScripts","plutus_scripts","hex","AuxiliaryDataSet","tx_index","TransactionIndexes","network","payment","stake","StakeCredential","BigInt","Int","text","string","other","rhs_value","Bip32PublicKey","bech32_str","entropy","PublicKey","Block","Header","TransactionBodies","TransactionWitnessSets","header","transaction_bodies","transaction_witness_sets","auxiliary_data_set","invalid_transactions","BlockHash","Blockfrost","url","project_id","Vkey","Ed25519Signature","vkey","signature","chain_code","attributes","BootstrapWitnesses","s","protocol_magic","Certificate","stake_registration","StakeRegistration","stake_deregistration","StakeDeregistration","stake_delegation","StakeDelegation","pool_registration","PoolRegistration","pool_retirement","PoolRetirement","genesis_key_delegation","GenesisKeyDelegation","move_instantaneous_rewards_cert","MoveInstantaneousRewardsCert","Certificates","ConstrPlutusData","alternative","CostModel","operation","cost","Language","Languages","DNSRecordAorAAAA","dns_name","DNSRecordSRV","Data","Datum","data_hash","Ed25519KeyHash","Ed25519KeyHashes","input","UnitInterval","mem_price","step_price","ExUnits","steps","TransactionMetadatumLabels","GenesisDelegateHash","GenesisHash","GenesisHashes","VRFKeyHash","genesishash","genesis_delegate_hash","vrf_keyhash","HeaderBody","KESSignature","header_body","body_signature","VRFVKey","VRFCert","OperationalCert","ProtocolVersion","block_number","slot","prev_hash","issuer_vkey","vrf_vkey","nonce_vrf","leader_vrf","block_body_size","block_body_hash","operational_cert","protocol_version","Ipv4","Ipv6","KESVKey","coefficient","constant","MIRToStakeCredentials","cred","delta","StakeCredentials","MetadataList","MetadataMap","Mint","ScriptHash","MintAssets","ScriptHashes","MultiAsset","MoveInstantaneousReward","pot","amount","amounts","move_instantaneous_reward","policy_id","assets","asset_name","rhs_ma","MultiHostName","namespace","script_pubkey","ScriptPubkey","script_all","ScriptAll","script_any","ScriptAny","script_n_of_k","ScriptNOfK","timelock_start","TimelockStart","timelock_expiry","TimelockExpiry","NetworkId","NetworkInfo","network_id","Nonce","hash","hot_vkey","sequence_number","kes_period","sigma","constr_plutus_data","map","PlutusMap","list","integer","PlutusWitness","redeemer","script","Pointer","cert_index","PoolMetadata","URL","PoolMetadataHash","pool_metadata_hash","PoolParams","Relays","operator","pledge","margin","reward_account","pool_owners","relays","pool_metadata","pool_params","update","pool_keyhash","epoch","message","ProposedProtocolParameterUpdates","ProtocolParamUpdate","minfee_a","minfee_b","max_block_body_size","max_tx_size","max_block_header_size","max_epoch","n_opt","pool_pledge_influence","expansion_rate","treasury_growth_rate","d","extra_entropy","min_pool_cost","ada_per_utxo_byte","execution_costs","max_tx_ex_units","max_block_ex_units","max_value_size","collateral_percentage","max_collateral_inputs","major","minor","PublicKeys","Redeemer","RedeemerTag","tag","ex_units","RedeemerWitnessKey","Relay","single_host_addr","SingleHostAddr","single_host_name","SingleHostName","multi_host_name","RequiredWitnessSet","bootstrap","native_script","plutus_datum","requirements","RewardAddresses","Script","n","addr_keyhash","ScriptRef","ScriptWitness","plutus_witness","port","ipv4","ipv6","stake_credential","Strings","TransactionWitnessSet","valid","body","witness_set","TransactionInputs","TransactionOutputs","certs","withdrawals","Withdrawals","Update","auxiliary_data_hash","validity_start_interval","mint","script_data_hash","collateral","required_signers","collateral_return","total_collateral","reference_inputs","inputs","outputs","fee","ttl","TransactionBuilder","change_address","TransactionUnspentOutputs","utxo","script_witness","TransactionUnspentOutput","address","TransactionInput","certificate","reward_address","coin","mint_assets","cfg","TransactionBuilderConfig","required_signer","collateral_utxos","collateral_change_address","native_uplc","TransactionBuilderConfigBuilder","fee_algo","costmdls","zero_time","zero_slot","slot_length","blockfrost","transaction_id","int","script_ref","TransactionOutputAmountBuilder","multiasset","coins_per_utxo_word","TransactionOutputBuilder","vkeys","Vkeywitnesses","bootstraps","TransactionWitnessSetBuilder","required_wits","wit_set","numerator","denominator","float_number","proposed_protocol_parameter_updates","proof","rhs","pk","Vkeys","load","module","imports","init","arg4","state0","cb0"],"mappings":"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"}