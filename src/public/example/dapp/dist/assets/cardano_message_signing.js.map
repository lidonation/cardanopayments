{"version":3,"file":"cardano_message_signing.js","sources":["../../node_modules/lucid-cardano/esm/src/core/wasm_modules/cardano_message_signing_nodejs/cardano_message_signing.js"],"sourcesContent":["\"use strict\";\nlet imports = {};\nimports[\"__wbindgen_placeholder__\"] = module.exports;\nlet wasm;\nconst { TextDecoder, TextEncoder } = require(`util`);\nconst heap = new Array(32).fill(undefined);\nheap.push(undefined, null, true, false);\nfunction getObject(idx) {\n    return heap[idx];\n}\nlet heap_next = heap.length;\nfunction dropObject(idx) {\n    if (idx < 36)\n        return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\nlet cachedTextDecoder = new TextDecoder(\"utf-8\", {\n    ignoreBOM: true,\n    fatal: true,\n});\ncachedTextDecoder.decode();\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null ||\n        cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length)\n        heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n    heap[idx] = obj;\n    return idx;\n}\nfunction debugString(val) {\n    // primitive types\n    const type = typeof val;\n    if (type == \"number\" || type == \"boolean\" || val == null) {\n        return `${val}`;\n    }\n    if (type == \"string\") {\n        return `\"${val}\"`;\n    }\n    if (type == \"symbol\") {\n        const description = val.description;\n        if (description == null) {\n            return \"Symbol\";\n        }\n        else {\n            return `Symbol(${description})`;\n        }\n    }\n    if (type == \"function\") {\n        const name = val.name;\n        if (typeof name == \"string\" && name.length > 0) {\n            return `Function(${name})`;\n        }\n        else {\n            return \"Function\";\n        }\n    }\n    // objects\n    if (Array.isArray(val)) {\n        const length = val.length;\n        let debug = \"[\";\n        if (length > 0) {\n            debug += debugString(val[0]);\n        }\n        for (let i = 1; i < length; i++) {\n            debug += \", \" + debugString(val[i]);\n        }\n        debug += \"]\";\n        return debug;\n    }\n    // Test for built-in\n    const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n    let className;\n    if (builtInMatches.length > 1) {\n        className = builtInMatches[1];\n    }\n    else {\n        // Failed to match the standard '[object ClassName]'\n        return toString.call(val);\n    }\n    if (className == \"Object\") {\n        // we're a user defined class or Object\n        // JSON.stringify avoids problems with cycles, and is generally much\n        // easier than looping through ownProperties of `val`.\n        try {\n            return \"Object(\" + JSON.stringify(val) + \")\";\n        }\n        catch (_) {\n            return \"Object\";\n        }\n    }\n    // errors\n    if (val instanceof Error) {\n        return `${val.name}: ${val.message}\\n${val.stack}`;\n    }\n    // TODO we could test for more things here, like `Set`s and `Map`s.\n    return className;\n}\nlet WASM_VECTOR_LEN = 0;\nlet cachedTextEncoder = new TextEncoder(\"utf-8\");\nconst encodeString = (typeof cachedTextEncoder.encodeInto === \"function\"\n    ? function (arg, view) {\n        return cachedTextEncoder.encodeInto(arg, view);\n    }\n    : function (arg, view) {\n        const buf = cachedTextEncoder.encode(arg);\n        view.set(buf);\n        return {\n            read: arg.length,\n            written: buf.length,\n        };\n    });\nfunction passStringToWasm0(arg, malloc, realloc) {\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n    let len = arg.length;\n    let ptr = malloc(len);\n    const mem = getUint8Memory0();\n    let offset = 0;\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F)\n            break;\n        mem[ptr + offset] = code;\n    }\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n        offset += ret.written;\n    }\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\nlet cachegetInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachegetInt32Memory0 === null ||\n        cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory0;\n}\nfunction getArrayU8FromWasm0(ptr, len) {\n    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1);\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n    return instance.ptr;\n}\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\nlet cachegetFloat64Memory0 = null;\nfunction getFloat64Memory0() {\n    if (cachegetFloat64Memory0 === null ||\n        cachegetFloat64Memory0.buffer !== wasm.memory.buffer) {\n        cachegetFloat64Memory0 = new Float64Array(wasm.memory.buffer);\n    }\n    return cachegetFloat64Memory0;\n}\n/** */\nmodule.exports.LabelKind = Object.freeze({\n    Int: 0,\n    \"0\": \"Int\",\n    Text: 1,\n    \"1\": \"Text\",\n});\n/** */\nmodule.exports.SignedMessageKind = Object.freeze({\n    COSESIGN: 0,\n    \"0\": \"COSESIGN\",\n    COSESIGN1: 1,\n    \"1\": \"COSESIGN1\",\n});\n/** */\nmodule.exports.SigContext = Object.freeze({\n    Signature: 0,\n    \"0\": \"Signature\",\n    Signature1: 1,\n    \"1\": \"Signature1\",\n    CounterSignature: 2,\n    \"2\": \"CounterSignature\",\n});\n/** */\nmodule.exports.CBORSpecialType = Object.freeze({\n    Bool: 0,\n    \"0\": \"Bool\",\n    Float: 1,\n    \"1\": \"Float\",\n    Unassigned: 2,\n    \"2\": \"Unassigned\",\n    Break: 3,\n    \"3\": \"Break\",\n    Undefined: 4,\n    \"4\": \"Undefined\",\n    Null: 5,\n    \"5\": \"Null\",\n});\n/** */\nmodule.exports.CBORValueKind = Object.freeze({\n    Int: 0,\n    \"0\": \"Int\",\n    Bytes: 1,\n    \"1\": \"Bytes\",\n    Text: 2,\n    \"2\": \"Text\",\n    Array: 3,\n    \"3\": \"Array\",\n    Object: 4,\n    \"4\": \"Object\",\n    TaggedCBOR: 5,\n    \"5\": \"TaggedCBOR\",\n    Special: 6,\n    \"6\": \"Special\",\n});\n/** */\nmodule.exports.AlgorithmId = Object.freeze({\n    /**\n     * r\" EdDSA (Pure EdDSA, not HashedEdDSA) - the algorithm used for Cardano addresses\n     */\n    EdDSA: 0,\n    \"0\": \"EdDSA\",\n    /**\n     * r\" ChaCha20/Poly1305 w/ 256-bit key, 128-bit tag\n     */\n    ChaCha20Poly1305: 1,\n    \"1\": \"ChaCha20Poly1305\",\n});\n/** */\nmodule.exports.KeyType = Object.freeze({\n    /**\n     * r\" octet key pair\n     */\n    OKP: 0,\n    \"0\": \"OKP\",\n    /**\n     * r\" 2-coord EC\n     */\n    EC2: 1,\n    \"1\": \"EC2\",\n    Symmetric: 2,\n    \"2\": \"Symmetric\",\n});\n/** */\nmodule.exports.ECKey = Object.freeze({\n    CRV: 0,\n    \"0\": \"CRV\",\n    X: 1,\n    \"1\": \"X\",\n    Y: 2,\n    \"2\": \"Y\",\n    D: 3,\n    \"3\": \"D\",\n});\n/** */\nmodule.exports.CurveType = Object.freeze({\n    P256: 0,\n    \"0\": \"P256\",\n    P384: 1,\n    \"1\": \"P384\",\n    P521: 2,\n    \"2\": \"P521\",\n    X25519: 3,\n    \"3\": \"X25519\",\n    X448: 4,\n    \"4\": \"X448\",\n    Ed25519: 5,\n    \"5\": \"Ed25519\",\n    Ed448: 6,\n    \"6\": \"Ed448\",\n});\n/** */\nmodule.exports.KeyOperation = Object.freeze({\n    Sign: 0,\n    \"0\": \"Sign\",\n    Verify: 1,\n    \"1\": \"Verify\",\n    Encrypt: 2,\n    \"2\": \"Encrypt\",\n    Decrypt: 3,\n    \"3\": \"Decrypt\",\n    WrapKey: 4,\n    \"4\": \"WrapKey\",\n    UnwrapKey: 5,\n    \"5\": \"UnwrapKey\",\n    DeriveKey: 6,\n    \"6\": \"DeriveKey\",\n    DeriveBits: 7,\n    \"7\": \"DeriveBits\",\n});\n/** */\nclass BigNum {\n    static __wrap(ptr) {\n        const obj = Object.create(BigNum.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_bignum_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bignum_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {BigNum}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.bignum_from_bytes(ptr0, len0);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @param {string} string\n     * @returns {BigNum}\n     */\n    static from_str(string) {\n        var ptr0 = passStringToWasm0(string, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.bignum_from_str(ptr0, len0);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_str() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bignum_to_str(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {BigNum} other\n     * @returns {BigNum}\n     */\n    checked_mul(other) {\n        _assertClass(other, BigNum);\n        var ret = wasm.bignum_checked_mul(this.ptr, other.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} other\n     * @returns {BigNum}\n     */\n    checked_add(other) {\n        _assertClass(other, BigNum);\n        var ret = wasm.bignum_checked_add(this.ptr, other.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} other\n     * @returns {BigNum}\n     */\n    checked_sub(other) {\n        _assertClass(other, BigNum);\n        var ret = wasm.bignum_checked_sub(this.ptr, other.ptr);\n        return BigNum.__wrap(ret);\n    }\n}\nmodule.exports.BigNum = BigNum;\n/** */\nclass CBORArray {\n    static __wrap(ptr) {\n        const obj = Object.create(CBORArray.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cborarray_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cborarray_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {CBORArray}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cborarray_from_bytes(ptr0, len0);\n        return CBORArray.__wrap(ret);\n    }\n    /**\n     * @returns {CBORArray}\n     */\n    static new() {\n        var ret = wasm.cborarray_new();\n        return CBORArray.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.cborarray_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {CBORValue}\n     */\n    get(index) {\n        var ret = wasm.cborarray_get(this.ptr, index);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n     * @param {CBORValue} elem\n     */\n    add(elem) {\n        _assertClass(elem, CBORValue);\n        wasm.cborarray_add(this.ptr, elem.ptr);\n    }\n    /**\n     * @param {boolean} use_definite\n     */\n    set_definite_encoding(use_definite) {\n        wasm.cborarray_set_definite_encoding(this.ptr, use_definite);\n    }\n    /**\n     * @returns {boolean}\n     */\n    is_definite() {\n        var ret = wasm.cborarray_is_definite(this.ptr);\n        return ret !== 0;\n    }\n}\nmodule.exports.CBORArray = CBORArray;\n/** */\nclass CBORObject {\n    static __wrap(ptr) {\n        const obj = Object.create(CBORObject.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cborobject_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cborobject_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {CBORObject}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cborobject_from_bytes(ptr0, len0);\n        return CBORObject.__wrap(ret);\n    }\n    /**\n     * @returns {CBORObject}\n     */\n    static new() {\n        var ret = wasm.cborobject_new();\n        return CBORObject.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.cborobject_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {CBORValue} key\n     * @param {CBORValue} value\n     * @returns {CBORValue | undefined}\n     */\n    insert(key, value) {\n        _assertClass(key, CBORValue);\n        _assertClass(value, CBORValue);\n        var ret = wasm.cborobject_insert(this.ptr, key.ptr, value.ptr);\n        return ret === 0 ? undefined : CBORValue.__wrap(ret);\n    }\n    /**\n     * @param {CBORValue} key\n     * @returns {CBORValue | undefined}\n     */\n    get(key) {\n        _assertClass(key, CBORValue);\n        var ret = wasm.cborobject_get(this.ptr, key.ptr);\n        return ret === 0 ? undefined : CBORValue.__wrap(ret);\n    }\n    /**\n     * @returns {CBORArray}\n     */\n    keys() {\n        var ret = wasm.cborobject_keys(this.ptr);\n        return CBORArray.__wrap(ret);\n    }\n    /**\n     * @param {boolean} use_definite\n     */\n    set_definite_encoding(use_definite) {\n        wasm.cborobject_set_definite_encoding(this.ptr, use_definite);\n    }\n    /**\n     * @returns {boolean}\n     */\n    is_definite() {\n        var ret = wasm.cborobject_is_definite(this.ptr);\n        return ret !== 0;\n    }\n}\nmodule.exports.CBORObject = CBORObject;\n/** */\nclass CBORSpecial {\n    static __wrap(ptr) {\n        const obj = Object.create(CBORSpecial.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cborspecial_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cborspecial_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {CBORSpecial}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cborspecial_from_bytes(ptr0, len0);\n        return CBORSpecial.__wrap(ret);\n    }\n    /**\n     * @param {boolean} b\n     * @returns {CBORSpecial}\n     */\n    static new_bool(b) {\n        var ret = wasm.cborspecial_new_bool(b);\n        return CBORSpecial.__wrap(ret);\n    }\n    /**\n     * @param {number} u\n     * @returns {CBORSpecial}\n     */\n    static new_unassigned(u) {\n        var ret = wasm.cborspecial_new_unassigned(u);\n        return CBORSpecial.__wrap(ret);\n    }\n    /**\n     * @returns {CBORSpecial}\n     */\n    static new_break() {\n        var ret = wasm.cborspecial_new_break();\n        return CBORSpecial.__wrap(ret);\n    }\n    /**\n     * @returns {CBORSpecial}\n     */\n    static new_null() {\n        var ret = wasm.cborspecial_new_null();\n        return CBORSpecial.__wrap(ret);\n    }\n    /**\n     * @returns {CBORSpecial}\n     */\n    static new_undefined() {\n        var ret = wasm.cborspecial_new_undefined();\n        return CBORSpecial.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    kind() {\n        var ret = wasm.cborspecial_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {boolean | undefined}\n     */\n    as_bool() {\n        var ret = wasm.cborspecial_as_bool(this.ptr);\n        return ret === 0xFFFFFF ? undefined : ret !== 0;\n    }\n    /**\n     * @returns {number | undefined}\n     */\n    as_float() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cborspecial_as_float(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getFloat64Memory0()[retptr / 8 + 1];\n            return r0 === 0 ? undefined : r1;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {number | undefined}\n     */\n    as_unassigned() {\n        var ret = wasm.cborspecial_as_unassigned(this.ptr);\n        return ret === 0xFFFFFF ? undefined : ret;\n    }\n}\nmodule.exports.CBORSpecial = CBORSpecial;\n/** */\nclass CBORValue {\n    static __wrap(ptr) {\n        const obj = Object.create(CBORValue.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cborvalue_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cborvalue_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {CBORValue}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cborvalue_from_bytes(ptr0, len0);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n     * @param {Int} int\n     * @returns {CBORValue}\n     */\n    static new_int(int) {\n        _assertClass(int, Int);\n        var ret = wasm.cborvalue_new_int(int.ptr);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {CBORValue}\n     */\n    static new_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cborvalue_new_bytes(ptr0, len0);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n     * @param {string} text\n     * @returns {CBORValue}\n     */\n    static new_text(text) {\n        var ptr0 = passStringToWasm0(text, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cborvalue_new_text(ptr0, len0);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n     * @param {CBORArray} arr\n     * @returns {CBORValue}\n     */\n    static new_array(arr) {\n        _assertClass(arr, CBORArray);\n        var ret = wasm.cborvalue_new_array(arr.ptr);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n     * @param {CBORObject} obj\n     * @returns {CBORValue}\n     */\n    static new_object(obj) {\n        _assertClass(obj, CBORObject);\n        var ret = wasm.cborvalue_new_object(obj.ptr);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n     * @param {TaggedCBOR} tagged\n     * @returns {CBORValue}\n     */\n    static new_tagged(tagged) {\n        _assertClass(tagged, TaggedCBOR);\n        var ret = wasm.cborvalue_new_tagged(tagged.ptr);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n     * @param {CBORSpecial} special\n     * @returns {CBORValue}\n     */\n    static new_special(special) {\n        _assertClass(special, CBORSpecial);\n        var ret = wasm.cborvalue_new_special(special.ptr);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n     * @param {Label} label\n     * @returns {CBORValue}\n     */\n    static from_label(label) {\n        _assertClass(label, Label);\n        var ret = wasm.cborvalue_from_label(label.ptr);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    kind() {\n        var ret = wasm.cborvalue_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {Int | undefined}\n     */\n    as_int() {\n        var ret = wasm.cborvalue_as_int(this.ptr);\n        return ret === 0 ? undefined : Int.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    as_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cborvalue_as_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string | undefined}\n     */\n    as_text() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cborvalue_as_text(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {CBORArray | undefined}\n     */\n    as_array() {\n        var ret = wasm.cborvalue_as_array(this.ptr);\n        return ret === 0 ? undefined : CBORArray.__wrap(ret);\n    }\n    /**\n     * @returns {CBORObject | undefined}\n     */\n    as_object() {\n        var ret = wasm.cborvalue_as_object(this.ptr);\n        return ret === 0 ? undefined : CBORObject.__wrap(ret);\n    }\n    /**\n     * @returns {TaggedCBOR | undefined}\n     */\n    as_tagged() {\n        var ret = wasm.cborvalue_as_tagged(this.ptr);\n        return ret === 0 ? undefined : TaggedCBOR.__wrap(ret);\n    }\n    /**\n     * @returns {CBORSpecial | undefined}\n     */\n    as_special() {\n        var ret = wasm.cborvalue_as_special(this.ptr);\n        return ret === 0 ? undefined : CBORSpecial.__wrap(ret);\n    }\n}\nmodule.exports.CBORValue = CBORValue;\n/** */\nclass COSEEncrypt {\n    static __wrap(ptr) {\n        const obj = Object.create(COSEEncrypt.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_coseencrypt_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coseencrypt_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {COSEEncrypt}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.coseencrypt_from_bytes(ptr0, len0);\n        return COSEEncrypt.__wrap(ret);\n    }\n    /**\n     * @returns {Headers}\n     */\n    headers() {\n        var ret = wasm.coseencrypt0_headers(this.ptr);\n        return Headers.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    ciphertext() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coseencrypt0_ciphertext(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {COSERecipients}\n     */\n    recipients() {\n        var ret = wasm.coseencrypt_recipients(this.ptr);\n        return COSERecipients.__wrap(ret);\n    }\n    /**\n     * @param {Headers} headers\n     * @param {Uint8Array | undefined} ciphertext\n     * @param {COSERecipients} recipients\n     * @returns {COSEEncrypt}\n     */\n    static new(headers, ciphertext, recipients) {\n        _assertClass(headers, Headers);\n        var ptr0 = isLikeNone(ciphertext)\n            ? 0\n            : passArray8ToWasm0(ciphertext, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        _assertClass(recipients, COSERecipients);\n        var ret = wasm.coseencrypt_new(headers.ptr, ptr0, len0, recipients.ptr);\n        return COSEEncrypt.__wrap(ret);\n    }\n}\nmodule.exports.COSEEncrypt = COSEEncrypt;\n/** */\nclass COSEEncrypt0 {\n    static __wrap(ptr) {\n        const obj = Object.create(COSEEncrypt0.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_coseencrypt0_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coseencrypt0_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {COSEEncrypt0}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.coseencrypt0_from_bytes(ptr0, len0);\n        return COSEEncrypt0.__wrap(ret);\n    }\n    /**\n     * @returns {Headers}\n     */\n    headers() {\n        var ret = wasm.coseencrypt0_headers(this.ptr);\n        return Headers.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    ciphertext() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coseencrypt0_ciphertext(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Headers} headers\n     * @param {Uint8Array | undefined} ciphertext\n     * @returns {COSEEncrypt0}\n     */\n    static new(headers, ciphertext) {\n        _assertClass(headers, Headers);\n        var ptr0 = isLikeNone(ciphertext)\n            ? 0\n            : passArray8ToWasm0(ciphertext, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.coseencrypt0_new(headers.ptr, ptr0, len0);\n        return COSEEncrypt0.__wrap(ret);\n    }\n}\nmodule.exports.COSEEncrypt0 = COSEEncrypt0;\n/** */\nclass COSEKey {\n    static __wrap(ptr) {\n        const obj = Object.create(COSEKey.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cosekey_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosekey_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {COSEKey}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cosekey_from_bytes(ptr0, len0);\n        return COSEKey.__wrap(ret);\n    }\n    /**\n     * @param {Label} key_type\n     */\n    set_key_type(key_type) {\n        _assertClass(key_type, Label);\n        wasm.cosekey_set_key_type(this.ptr, key_type.ptr);\n    }\n    /**\n     * @returns {Label}\n     */\n    key_type() {\n        var ret = wasm.cosekey_key_type(this.ptr);\n        return Label.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} key_id\n     */\n    set_key_id(key_id) {\n        var ptr0 = passArray8ToWasm0(key_id, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.cosekey_set_key_id(this.ptr, ptr0, len0);\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    key_id() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosekey_key_id(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Label} algorithm_id\n     */\n    set_algorithm_id(algorithm_id) {\n        _assertClass(algorithm_id, Label);\n        wasm.cosekey_set_algorithm_id(this.ptr, algorithm_id.ptr);\n    }\n    /**\n     * @returns {Label | undefined}\n     */\n    algorithm_id() {\n        var ret = wasm.cosekey_algorithm_id(this.ptr);\n        return ret === 0 ? undefined : Label.__wrap(ret);\n    }\n    /**\n     * @param {Labels} key_ops\n     */\n    set_key_ops(key_ops) {\n        _assertClass(key_ops, Labels);\n        wasm.cosekey_set_key_ops(this.ptr, key_ops.ptr);\n    }\n    /**\n     * @returns {Labels | undefined}\n     */\n    key_ops() {\n        var ret = wasm.cosekey_key_ops(this.ptr);\n        return ret === 0 ? undefined : Labels.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} base_init_vector\n     */\n    set_base_init_vector(base_init_vector) {\n        var ptr0 = passArray8ToWasm0(base_init_vector, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.cosekey_set_base_init_vector(this.ptr, ptr0, len0);\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    base_init_vector() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosekey_base_init_vector(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Label} label\n     * @returns {CBORValue | undefined}\n     */\n    header(label) {\n        _assertClass(label, Label);\n        var ret = wasm.cosekey_header(this.ptr, label.ptr);\n        return ret === 0 ? undefined : CBORValue.__wrap(ret);\n    }\n    /**\n     * @param {Label} label\n     * @param {CBORValue} value\n     */\n    set_header(label, value) {\n        _assertClass(label, Label);\n        _assertClass(value, CBORValue);\n        wasm.cosekey_set_header(this.ptr, label.ptr, value.ptr);\n    }\n    /**\n     * @param {Label} key_type\n     * @returns {COSEKey}\n     */\n    static new(key_type) {\n        _assertClass(key_type, Label);\n        var ret = wasm.cosekey_new(key_type.ptr);\n        return COSEKey.__wrap(ret);\n    }\n}\nmodule.exports.COSEKey = COSEKey;\n/** */\nclass COSERecipient {\n    static __wrap(ptr) {\n        const obj = Object.create(COSERecipient.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_coserecipient_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coserecipient_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {COSERecipient}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.coserecipient_from_bytes(ptr0, len0);\n        return COSERecipient.__wrap(ret);\n    }\n    /**\n     * @returns {Headers}\n     */\n    headers() {\n        var ret = wasm.coseencrypt0_headers(this.ptr);\n        return Headers.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    ciphertext() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coseencrypt0_ciphertext(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Headers} headers\n     * @param {Uint8Array | undefined} ciphertext\n     * @returns {COSERecipient}\n     */\n    static new(headers, ciphertext) {\n        _assertClass(headers, Headers);\n        var ptr0 = isLikeNone(ciphertext)\n            ? 0\n            : passArray8ToWasm0(ciphertext, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.coseencrypt0_new(headers.ptr, ptr0, len0);\n        return COSERecipient.__wrap(ret);\n    }\n}\nmodule.exports.COSERecipient = COSERecipient;\n/** */\nclass COSERecipients {\n    static __wrap(ptr) {\n        const obj = Object.create(COSERecipients.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_coserecipients_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coserecipients_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {COSERecipients}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.coserecipients_from_bytes(ptr0, len0);\n        return COSERecipients.__wrap(ret);\n    }\n    /**\n     * @returns {COSERecipients}\n     */\n    static new() {\n        var ret = wasm.coserecipients_new();\n        return COSERecipients.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.coserecipients_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {COSERecipient}\n     */\n    get(index) {\n        var ret = wasm.coserecipients_get(this.ptr, index);\n        return COSERecipient.__wrap(ret);\n    }\n    /**\n     * @param {COSERecipient} elem\n     */\n    add(elem) {\n        _assertClass(elem, COSERecipient);\n        wasm.coserecipients_add(this.ptr, elem.ptr);\n    }\n}\nmodule.exports.COSERecipients = COSERecipients;\n/** */\nclass COSESign {\n    static __wrap(ptr) {\n        const obj = Object.create(COSESign.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cosesign_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosesign_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {COSESign}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cosesign_from_bytes(ptr0, len0);\n        return COSESign.__wrap(ret);\n    }\n    /**\n     * @returns {Headers}\n     */\n    headers() {\n        var ret = wasm.coseencrypt0_headers(this.ptr);\n        return Headers.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    payload() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coseencrypt0_ciphertext(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {COSESignatures}\n     */\n    signatures() {\n        var ret = wasm.cosesign_signatures(this.ptr);\n        return COSESignatures.__wrap(ret);\n    }\n    /**\n     * @param {Headers} headers\n     * @param {Uint8Array | undefined} payload\n     * @param {COSESignatures} signatures\n     * @returns {COSESign}\n     */\n    static new(headers, payload, signatures) {\n        _assertClass(headers, Headers);\n        var ptr0 = isLikeNone(payload)\n            ? 0\n            : passArray8ToWasm0(payload, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        _assertClass(signatures, COSESignatures);\n        var ret = wasm.cosesign_new(headers.ptr, ptr0, len0, signatures.ptr);\n        return COSESign.__wrap(ret);\n    }\n}\nmodule.exports.COSESign = COSESign;\n/** */\nclass COSESign1 {\n    static __wrap(ptr) {\n        const obj = Object.create(COSESign1.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cosesign1_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosesign1_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {COSESign1}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cosesign1_from_bytes(ptr0, len0);\n        return COSESign1.__wrap(ret);\n    }\n    /**\n     * @returns {Headers}\n     */\n    headers() {\n        var ret = wasm.coseencrypt0_headers(this.ptr);\n        return Headers.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    payload() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coseencrypt0_ciphertext(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    signature() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosesign1_signature(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * For verifying, we will want to reverse-construct this SigStructure to check the signature against\n     * # Arguments\n     * * `external_aad` - External application data - see RFC 8152 section 4.3. Set to None if not using this.\n     * @param {Uint8Array | undefined} external_aad\n     * @param {Uint8Array | undefined} external_payload\n     * @returns {SigStructure}\n     */\n    signed_data(external_aad, external_payload) {\n        var ptr0 = isLikeNone(external_aad)\n            ? 0\n            : passArray8ToWasm0(external_aad, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = isLikeNone(external_payload)\n            ? 0\n            : passArray8ToWasm0(external_payload, wasm.__wbindgen_malloc);\n        var len1 = WASM_VECTOR_LEN;\n        var ret = wasm.cosesign1_signed_data(this.ptr, ptr0, len0, ptr1, len1);\n        return SigStructure.__wrap(ret);\n    }\n    /**\n     * @param {Headers} headers\n     * @param {Uint8Array | undefined} payload\n     * @param {Uint8Array} signature\n     * @returns {COSESign1}\n     */\n    static new(headers, payload, signature) {\n        _assertClass(headers, Headers);\n        var ptr0 = isLikeNone(payload)\n            ? 0\n            : passArray8ToWasm0(payload, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = passArray8ToWasm0(signature, wasm.__wbindgen_malloc);\n        var len1 = WASM_VECTOR_LEN;\n        var ret = wasm.cosesign1_new(headers.ptr, ptr0, len0, ptr1, len1);\n        return COSESign1.__wrap(ret);\n    }\n}\nmodule.exports.COSESign1 = COSESign1;\n/** */\nclass COSESign1Builder {\n    static __wrap(ptr) {\n        const obj = Object.create(COSESign1Builder.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cosesign1builder_free(ptr);\n    }\n    /**\n     * @param {Headers} headers\n     * @param {Uint8Array} payload\n     * @param {boolean} is_payload_external\n     * @returns {COSESign1Builder}\n     */\n    static new(headers, payload, is_payload_external) {\n        _assertClass(headers, Headers);\n        var ptr0 = passArray8ToWasm0(payload, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cosesign1builder_new(headers.ptr, ptr0, len0, is_payload_external);\n        return COSESign1Builder.__wrap(ret);\n    }\n    /** */\n    hash_payload() {\n        wasm.cosesign1builder_hash_payload(this.ptr);\n    }\n    /**\n     * @param {Uint8Array} external_aad\n     */\n    set_external_aad(external_aad) {\n        var ptr0 = passArray8ToWasm0(external_aad, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.cosesign1builder_set_external_aad(this.ptr, ptr0, len0);\n    }\n    /**\n     * @returns {SigStructure}\n     */\n    make_data_to_sign() {\n        var ret = wasm.cosesign1builder_make_data_to_sign(this.ptr);\n        return SigStructure.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} signed_sig_structure\n     * @returns {COSESign1}\n     */\n    build(signed_sig_structure) {\n        var ptr0 = passArray8ToWasm0(signed_sig_structure, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cosesign1builder_build(this.ptr, ptr0, len0);\n        return COSESign1.__wrap(ret);\n    }\n}\nmodule.exports.COSESign1Builder = COSESign1Builder;\n/** */\nclass COSESignBuilder {\n    static __wrap(ptr) {\n        const obj = Object.create(COSESignBuilder.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cosesignbuilder_free(ptr);\n    }\n    /**\n     * @param {Headers} headers\n     * @param {Uint8Array} payload\n     * @param {boolean} is_payload_external\n     * @returns {COSESignBuilder}\n     */\n    static new(headers, payload, is_payload_external) {\n        _assertClass(headers, Headers);\n        var ptr0 = passArray8ToWasm0(payload, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cosesignbuilder_new(headers.ptr, ptr0, len0, is_payload_external);\n        return COSESignBuilder.__wrap(ret);\n    }\n    /** */\n    hash_payload() {\n        wasm.cosesign1builder_hash_payload(this.ptr);\n    }\n    /**\n     * @param {Uint8Array} external_aad\n     */\n    set_external_aad(external_aad) {\n        var ptr0 = passArray8ToWasm0(external_aad, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.cosesign1builder_set_external_aad(this.ptr, ptr0, len0);\n    }\n    /**\n     * @returns {SigStructure}\n     */\n    make_data_to_sign() {\n        var ret = wasm.cosesignbuilder_make_data_to_sign(this.ptr);\n        return SigStructure.__wrap(ret);\n    }\n    /**\n     * @param {COSESignatures} signed_sig_structure\n     * @returns {COSESign}\n     */\n    build(signed_sig_structure) {\n        _assertClass(signed_sig_structure, COSESignatures);\n        var ret = wasm.cosesignbuilder_build(this.ptr, signed_sig_structure.ptr);\n        return COSESign.__wrap(ret);\n    }\n}\nmodule.exports.COSESignBuilder = COSESignBuilder;\n/** */\nclass COSESignature {\n    static __wrap(ptr) {\n        const obj = Object.create(COSESignature.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cosesignature_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosesignature_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {COSESignature}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cosesignature_from_bytes(ptr0, len0);\n        return COSESignature.__wrap(ret);\n    }\n    /**\n     * @returns {Headers}\n     */\n    headers() {\n        var ret = wasm.coseencrypt0_headers(this.ptr);\n        return Headers.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    signature() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosesignature_signature(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Headers} headers\n     * @param {Uint8Array} signature\n     * @returns {COSESignature}\n     */\n    static new(headers, signature) {\n        _assertClass(headers, Headers);\n        var ptr0 = passArray8ToWasm0(signature, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cosesignature_new(headers.ptr, ptr0, len0);\n        return COSESignature.__wrap(ret);\n    }\n}\nmodule.exports.COSESignature = COSESignature;\n/** */\nclass COSESignatures {\n    static __wrap(ptr) {\n        const obj = Object.create(COSESignatures.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cosesignatures_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosesignatures_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {COSESignatures}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cosesignatures_from_bytes(ptr0, len0);\n        return COSESignatures.__wrap(ret);\n    }\n    /**\n     * @returns {COSESignatures}\n     */\n    static new() {\n        var ret = wasm.coserecipients_new();\n        return COSESignatures.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.coserecipients_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {COSESignature}\n     */\n    get(index) {\n        var ret = wasm.cosesignatures_get(this.ptr, index);\n        return COSESignature.__wrap(ret);\n    }\n    /**\n     * @param {COSESignature} elem\n     */\n    add(elem) {\n        _assertClass(elem, COSESignature);\n        wasm.cosesignatures_add(this.ptr, elem.ptr);\n    }\n}\nmodule.exports.COSESignatures = COSESignatures;\n/** */\nclass CounterSignature {\n    static __wrap(ptr) {\n        const obj = Object.create(CounterSignature.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_countersignature_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.countersignature_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {CounterSignature}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.countersignature_from_bytes(ptr0, len0);\n        return CounterSignature.__wrap(ret);\n    }\n    /**\n     * @param {COSESignature} cose_signature\n     * @returns {CounterSignature}\n     */\n    static new_single(cose_signature) {\n        _assertClass(cose_signature, COSESignature);\n        var ret = wasm.countersignature_new_single(cose_signature.ptr);\n        return CounterSignature.__wrap(ret);\n    }\n    /**\n     * @param {COSESignatures} cose_signatures\n     * @returns {CounterSignature}\n     */\n    static new_multi(cose_signatures) {\n        _assertClass(cose_signatures, COSESignatures);\n        var ret = wasm.countersignature_new_multi(cose_signatures.ptr);\n        return CounterSignature.__wrap(ret);\n    }\n    /**\n     * @returns {COSESignatures}\n     */\n    signatures() {\n        var ret = wasm.countersignature_signatures(this.ptr);\n        return COSESignatures.__wrap(ret);\n    }\n}\nmodule.exports.CounterSignature = CounterSignature;\n/** */\nclass EdDSA25519Key {\n    static __wrap(ptr) {\n        const obj = Object.create(EdDSA25519Key.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_eddsa25519key_free(ptr);\n    }\n    /**\n     * @param {Uint8Array} pubkey_bytes\n     * @returns {EdDSA25519Key}\n     */\n    static new(pubkey_bytes) {\n        var ptr0 = passArray8ToWasm0(pubkey_bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.eddsa25519key_new(ptr0, len0);\n        return EdDSA25519Key.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} private_key_bytes\n     */\n    set_private_key(private_key_bytes) {\n        var ptr0 = passArray8ToWasm0(private_key_bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.eddsa25519key_set_private_key(this.ptr, ptr0, len0);\n    }\n    /** */\n    is_for_signing() {\n        wasm.eddsa25519key_is_for_signing(this.ptr);\n    }\n    /** */\n    is_for_verifying() {\n        wasm.eddsa25519key_is_for_verifying(this.ptr);\n    }\n    /**\n     * @returns {COSEKey}\n     */\n    build() {\n        var ret = wasm.eddsa25519key_build(this.ptr);\n        return COSEKey.__wrap(ret);\n    }\n}\nmodule.exports.EdDSA25519Key = EdDSA25519Key;\n/** */\nclass HeaderMap {\n    static __wrap(ptr) {\n        const obj = Object.create(HeaderMap.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_headermap_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.headermap_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {HeaderMap}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.headermap_from_bytes(ptr0, len0);\n        return HeaderMap.__wrap(ret);\n    }\n    /**\n     * @param {Label} algorithm_id\n     */\n    set_algorithm_id(algorithm_id) {\n        _assertClass(algorithm_id, Label);\n        wasm.headermap_set_algorithm_id(this.ptr, algorithm_id.ptr);\n    }\n    /**\n     * @returns {Label | undefined}\n     */\n    algorithm_id() {\n        var ret = wasm.headermap_algorithm_id(this.ptr);\n        return ret === 0 ? undefined : Label.__wrap(ret);\n    }\n    /**\n     * @param {Labels} criticality\n     */\n    set_criticality(criticality) {\n        _assertClass(criticality, Labels);\n        wasm.headermap_set_criticality(this.ptr, criticality.ptr);\n    }\n    /**\n     * @returns {Labels | undefined}\n     */\n    criticality() {\n        var ret = wasm.headermap_criticality(this.ptr);\n        return ret === 0 ? undefined : Labels.__wrap(ret);\n    }\n    /**\n     * @param {Label} content_type\n     */\n    set_content_type(content_type) {\n        _assertClass(content_type, Label);\n        wasm.cosekey_set_algorithm_id(this.ptr, content_type.ptr);\n    }\n    /**\n     * @returns {Label | undefined}\n     */\n    content_type() {\n        var ret = wasm.cosekey_algorithm_id(this.ptr);\n        return ret === 0 ? undefined : Label.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} key_id\n     */\n    set_key_id(key_id) {\n        var ptr0 = passArray8ToWasm0(key_id, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.headermap_set_key_id(this.ptr, ptr0, len0);\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    key_id() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.headermap_key_id(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} init_vector\n     */\n    set_init_vector(init_vector) {\n        var ptr0 = passArray8ToWasm0(init_vector, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.cosekey_set_base_init_vector(this.ptr, ptr0, len0);\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    init_vector() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosekey_base_init_vector(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} partial_init_vector\n     */\n    set_partial_init_vector(partial_init_vector) {\n        var ptr0 = passArray8ToWasm0(partial_init_vector, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.headermap_set_partial_init_vector(this.ptr, ptr0, len0);\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    partial_init_vector() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.headermap_partial_init_vector(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {CounterSignature} counter_signature\n     */\n    set_counter_signature(counter_signature) {\n        _assertClass(counter_signature, CounterSignature);\n        wasm.headermap_set_counter_signature(this.ptr, counter_signature.ptr);\n    }\n    /**\n     * @returns {CounterSignature | undefined}\n     */\n    counter_signature() {\n        var ret = wasm.headermap_counter_signature(this.ptr);\n        return ret === 0 ? undefined : CounterSignature.__wrap(ret);\n    }\n    /**\n     * @param {Label} label\n     * @returns {CBORValue | undefined}\n     */\n    header(label) {\n        _assertClass(label, Label);\n        var ret = wasm.headermap_header(this.ptr, label.ptr);\n        return ret === 0 ? undefined : CBORValue.__wrap(ret);\n    }\n    /**\n     * @param {Label} label\n     * @param {CBORValue} value\n     */\n    set_header(label, value) {\n        _assertClass(label, Label);\n        _assertClass(value, CBORValue);\n        wasm.headermap_set_header(this.ptr, label.ptr, value.ptr);\n    }\n    /**\n     * @returns {Labels}\n     */\n    keys() {\n        var ret = wasm.headermap_keys(this.ptr);\n        return Labels.__wrap(ret);\n    }\n    /**\n     * @returns {HeaderMap}\n     */\n    static new() {\n        var ret = wasm.headermap_new();\n        return HeaderMap.__wrap(ret);\n    }\n}\nmodule.exports.HeaderMap = HeaderMap;\n/** */\nclass Headers {\n    static __wrap(ptr) {\n        const obj = Object.create(Headers.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_headers_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.headers_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Headers}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.headers_from_bytes(ptr0, len0);\n        return Headers.__wrap(ret);\n    }\n    /**\n     * @returns {ProtectedHeaderMap}\n     */\n    protected() {\n        var ret = wasm.headers_protected(this.ptr);\n        return ProtectedHeaderMap.__wrap(ret);\n    }\n    /**\n     * @returns {HeaderMap}\n     */\n    unprotected() {\n        var ret = wasm.headers_unprotected(this.ptr);\n        return HeaderMap.__wrap(ret);\n    }\n    /**\n     * @param {ProtectedHeaderMap} protected_\n     * @param {HeaderMap} unprotected_\n     * @returns {Headers}\n     */\n    static new(protected_, unprotected_) {\n        _assertClass(protected_, ProtectedHeaderMap);\n        _assertClass(unprotected_, HeaderMap);\n        var ret = wasm.headers_new(protected_.ptr, unprotected_.ptr);\n        return Headers.__wrap(ret);\n    }\n}\nmodule.exports.Headers = Headers;\n/** */\nclass Int {\n    static __wrap(ptr) {\n        const obj = Object.create(Int.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_int_free(ptr);\n    }\n    /**\n     * @param {BigNum} x\n     * @returns {Int}\n     */\n    static new(x) {\n        _assertClass(x, BigNum);\n        var ptr0 = x.ptr;\n        x.ptr = 0;\n        var ret = wasm.int_new(ptr0);\n        return Int.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} x\n     * @returns {Int}\n     */\n    static new_negative(x) {\n        _assertClass(x, BigNum);\n        var ptr0 = x.ptr;\n        x.ptr = 0;\n        var ret = wasm.int_new_negative(ptr0);\n        return Int.__wrap(ret);\n    }\n    /**\n     * @param {number} x\n     * @returns {Int}\n     */\n    static new_i32(x) {\n        var ret = wasm.int_new_i32(x);\n        return Int.__wrap(ret);\n    }\n    /**\n     * @returns {boolean}\n     */\n    is_positive() {\n        var ret = wasm.int_is_positive(this.ptr);\n        return ret !== 0;\n    }\n    /**\n     * @returns {BigNum | undefined}\n     */\n    as_positive() {\n        var ret = wasm.int_as_positive(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {BigNum | undefined}\n     */\n    as_negative() {\n        var ret = wasm.int_as_negative(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {number | undefined}\n     */\n    as_i32() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.int_as_i32(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\nmodule.exports.Int = Int;\n/** */\nclass Label {\n    static __wrap(ptr) {\n        const obj = Object.create(Label.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_label_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.label_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Label}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.label_from_bytes(ptr0, len0);\n        return Label.__wrap(ret);\n    }\n    /**\n     * @param {Int} int\n     * @returns {Label}\n     */\n    static new_int(int) {\n        _assertClass(int, Int);\n        var ret = wasm.label_new_int(int.ptr);\n        return Label.__wrap(ret);\n    }\n    /**\n     * @param {string} text\n     * @returns {Label}\n     */\n    static new_text(text) {\n        var ptr0 = passStringToWasm0(text, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.label_new_text(ptr0, len0);\n        return Label.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    kind() {\n        var ret = wasm.label_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {Int | undefined}\n     */\n    as_int() {\n        var ret = wasm.label_as_int(this.ptr);\n        return ret === 0 ? undefined : Int.__wrap(ret);\n    }\n    /**\n     * @returns {string | undefined}\n     */\n    as_text() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.label_as_text(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} id\n     * @returns {Label}\n     */\n    static from_algorithm_id(id) {\n        var ret = wasm.label_from_algorithm_id(id);\n        return Label.__wrap(ret);\n    }\n    /**\n     * @param {number} key_type\n     * @returns {Label}\n     */\n    static from_key_type(key_type) {\n        var ret = wasm.label_from_key_type(key_type);\n        return Label.__wrap(ret);\n    }\n    /**\n     * @param {number} ec_key\n     * @returns {Label}\n     */\n    static from_ec_key(ec_key) {\n        var ret = wasm.label_from_ec_key(ec_key);\n        return Label.__wrap(ret);\n    }\n    /**\n     * @param {number} curve_type\n     * @returns {Label}\n     */\n    static from_curve_type(curve_type) {\n        var ret = wasm.label_from_curve_type(curve_type);\n        return Label.__wrap(ret);\n    }\n    /**\n     * @param {number} key_op\n     * @returns {Label}\n     */\n    static from_key_operation(key_op) {\n        var ret = wasm.label_from_key_operation(key_op);\n        return Label.__wrap(ret);\n    }\n}\nmodule.exports.Label = Label;\n/** */\nclass Labels {\n    static __wrap(ptr) {\n        const obj = Object.create(Labels.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_labels_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.labels_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Labels}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.labels_from_bytes(ptr0, len0);\n        return Labels.__wrap(ret);\n    }\n    /**\n     * @returns {Labels}\n     */\n    static new() {\n        var ret = wasm.coserecipients_new();\n        return Labels.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.coserecipients_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {Label}\n     */\n    get(index) {\n        var ret = wasm.labels_get(this.ptr, index);\n        return Label.__wrap(ret);\n    }\n    /**\n     * @param {Label} elem\n     */\n    add(elem) {\n        _assertClass(elem, Label);\n        wasm.labels_add(this.ptr, elem.ptr);\n    }\n}\nmodule.exports.Labels = Labels;\n/** */\nclass PasswordEncryption {\n    static __wrap(ptr) {\n        const obj = Object.create(PasswordEncryption.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_passwordencryption_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.passwordencryption_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {PasswordEncryption}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.passwordencryption_from_bytes(ptr0, len0);\n        return PasswordEncryption.__wrap(ret);\n    }\n    /**\n     * @param {COSEEncrypt0} data\n     * @returns {PasswordEncryption}\n     */\n    static new(data) {\n        _assertClass(data, COSEEncrypt0);\n        var ret = wasm.passwordencryption_new(data.ptr);\n        return PasswordEncryption.__wrap(ret);\n    }\n}\nmodule.exports.PasswordEncryption = PasswordEncryption;\n/** */\nclass ProtectedHeaderMap {\n    static __wrap(ptr) {\n        const obj = Object.create(ProtectedHeaderMap.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_protectedheadermap_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.protectedheadermap_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {ProtectedHeaderMap}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.protectedheadermap_from_bytes(ptr0, len0);\n        return ProtectedHeaderMap.__wrap(ret);\n    }\n    /**\n     * @returns {ProtectedHeaderMap}\n     */\n    static new_empty() {\n        var ret = wasm.protectedheadermap_new_empty();\n        return ProtectedHeaderMap.__wrap(ret);\n    }\n    /**\n     * @param {HeaderMap} header_map\n     * @returns {ProtectedHeaderMap}\n     */\n    static new(header_map) {\n        _assertClass(header_map, HeaderMap);\n        var ret = wasm.protectedheadermap_new(header_map.ptr);\n        return ProtectedHeaderMap.__wrap(ret);\n    }\n    /**\n     * @returns {HeaderMap}\n     */\n    deserialized_headers() {\n        var ret = wasm.protectedheadermap_deserialized_headers(this.ptr);\n        return HeaderMap.__wrap(ret);\n    }\n}\nmodule.exports.ProtectedHeaderMap = ProtectedHeaderMap;\n/** */\nclass PubKeyEncryption {\n    static __wrap(ptr) {\n        const obj = Object.create(PubKeyEncryption.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_pubkeyencryption_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.pubkeyencryption_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {PubKeyEncryption}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.pubkeyencryption_from_bytes(ptr0, len0);\n        return PubKeyEncryption.__wrap(ret);\n    }\n    /**\n     * @param {COSEEncrypt} data\n     * @returns {PubKeyEncryption}\n     */\n    static new(data) {\n        _assertClass(data, COSEEncrypt);\n        var ret = wasm.pubkeyencryption_new(data.ptr);\n        return PubKeyEncryption.__wrap(ret);\n    }\n}\nmodule.exports.PubKeyEncryption = PubKeyEncryption;\n/** */\nclass SigStructure {\n    static __wrap(ptr) {\n        const obj = Object.create(SigStructure.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_sigstructure_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.sigstructure_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {SigStructure}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.sigstructure_from_bytes(ptr0, len0);\n        return SigStructure.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    context() {\n        var ret = wasm.sigstructure_context(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {ProtectedHeaderMap}\n     */\n    body_protected() {\n        var ret = wasm.sigstructure_body_protected(this.ptr);\n        return ProtectedHeaderMap.__wrap(ret);\n    }\n    /**\n     * @returns {ProtectedHeaderMap | undefined}\n     */\n    sign_protected() {\n        var ret = wasm.sigstructure_sign_protected(this.ptr);\n        return ret === 0 ? undefined : ProtectedHeaderMap.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    external_aad() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.sigstructure_external_aad(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    payload() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.sigstructure_payload(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {ProtectedHeaderMap} sign_protected\n     */\n    set_sign_protected(sign_protected) {\n        _assertClass(sign_protected, ProtectedHeaderMap);\n        wasm.sigstructure_set_sign_protected(this.ptr, sign_protected.ptr);\n    }\n    /**\n     * @param {number} context\n     * @param {ProtectedHeaderMap} body_protected\n     * @param {Uint8Array} external_aad\n     * @param {Uint8Array} payload\n     * @returns {SigStructure}\n     */\n    static new(context, body_protected, external_aad, payload) {\n        _assertClass(body_protected, ProtectedHeaderMap);\n        var ptr0 = passArray8ToWasm0(external_aad, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = passArray8ToWasm0(payload, wasm.__wbindgen_malloc);\n        var len1 = WASM_VECTOR_LEN;\n        var ret = wasm.sigstructure_new(context, body_protected.ptr, ptr0, len0, ptr1, len1);\n        return SigStructure.__wrap(ret);\n    }\n}\nmodule.exports.SigStructure = SigStructure;\n/** */\nclass SignedMessage {\n    static __wrap(ptr) {\n        const obj = Object.create(SignedMessage.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signedmessage_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.signedmessage_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {SignedMessage}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.signedmessage_from_bytes(ptr0, len0);\n        return SignedMessage.__wrap(ret);\n    }\n    /**\n     * @param {COSESign} cose_sign\n     * @returns {SignedMessage}\n     */\n    static new_cose_sign(cose_sign) {\n        _assertClass(cose_sign, COSESign);\n        var ret = wasm.signedmessage_new_cose_sign(cose_sign.ptr);\n        return SignedMessage.__wrap(ret);\n    }\n    /**\n     * @param {COSESign1} cose_sign1\n     * @returns {SignedMessage}\n     */\n    static new_cose_sign1(cose_sign1) {\n        _assertClass(cose_sign1, COSESign1);\n        var ret = wasm.signedmessage_new_cose_sign1(cose_sign1.ptr);\n        return SignedMessage.__wrap(ret);\n    }\n    /**\n     * @param {string} s\n     * @returns {SignedMessage}\n     */\n    static from_user_facing_encoding(s) {\n        var ptr0 = passStringToWasm0(s, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.signedmessage_from_user_facing_encoding(ptr0, len0);\n        return SignedMessage.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_user_facing_encoding() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.signedmessage_to_user_facing_encoding(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {number}\n     */\n    kind() {\n        var ret = wasm.signedmessage_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {COSESign | undefined}\n     */\n    as_cose_sign() {\n        var ret = wasm.signedmessage_as_cose_sign(this.ptr);\n        return ret === 0 ? undefined : COSESign.__wrap(ret);\n    }\n    /**\n     * @returns {COSESign1 | undefined}\n     */\n    as_cose_sign1() {\n        var ret = wasm.signedmessage_as_cose_sign1(this.ptr);\n        return ret === 0 ? undefined : COSESign1.__wrap(ret);\n    }\n}\nmodule.exports.SignedMessage = SignedMessage;\n/** */\nclass TaggedCBOR {\n    static __wrap(ptr) {\n        const obj = Object.create(TaggedCBOR.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_taggedcbor_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.taggedcbor_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TaggedCBOR}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.taggedcbor_from_bytes(ptr0, len0);\n        return TaggedCBOR.__wrap(ret);\n    }\n    /**\n     * @returns {BigNum}\n     */\n    tag() {\n        var ret = wasm.taggedcbor_tag(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {CBORValue}\n     */\n    value() {\n        var ret = wasm.taggedcbor_value(this.ptr);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} tag\n     * @param {CBORValue} value\n     * @returns {TaggedCBOR}\n     */\n    static new(tag, value) {\n        _assertClass(tag, BigNum);\n        var ptr0 = tag.ptr;\n        tag.ptr = 0;\n        _assertClass(value, CBORValue);\n        var ret = wasm.taggedcbor_new(ptr0, value.ptr);\n        return TaggedCBOR.__wrap(ret);\n    }\n}\nmodule.exports.TaggedCBOR = TaggedCBOR;\nmodule.exports.__wbindgen_object_drop_ref = function (arg0) {\n    takeObject(arg0);\n};\nmodule.exports.__wbindgen_string_new = function (arg0, arg1) {\n    var ret = getStringFromWasm0(arg0, arg1);\n    return addHeapObject(ret);\n};\nmodule.exports.__wbindgen_debug_string = function (arg0, arg1) {\n    var ret = debugString(getObject(arg1));\n    var ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\nmodule.exports.__wbindgen_throw = function (arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\nmodule.exports.__wbindgen_rethrow = function (arg0) {\n    throw takeObject(arg0);\n};\nconst path = require(\"path\").join(__dirname, \"cardano_message_signing_bg.wasm\");\nconst bytes = require(\"fs\").readFileSync(path);\nconst wasmModule = new WebAssembly.Module(bytes);\nconst wasmInstance = new WebAssembly.Instance(wasmModule, imports);\nwasm = wasmInstance.exports;\nmodule.exports.__wasm = wasm;\n"],"names":["imports","module","wasm","TextDecoder","TextEncoder","require$$0","heap","getObject","idx","heap_next","dropObject","takeObject","ret","cachedTextDecoder","cachegetUint8Memory0","getUint8Memory0","getStringFromWasm0","ptr","len","addHeapObject","obj","debugString","val","type","description","name","length","debug","i","builtInMatches","className","WASM_VECTOR_LEN","cachedTextEncoder","encodeString","arg","view","buf","passStringToWasm0","malloc","realloc","mem","offset","code","cachegetInt32Memory0","getInt32Memory0","getArrayU8FromWasm0","passArray8ToWasm0","_assertClass","instance","klass","isLikeNone","x","cachegetFloat64Memory0","getFloat64Memory0","BigNum","retptr","r0","r1","v0","bytes","ptr0","len0","string","other","CBORArray","index","CBORValue","elem","use_definite","CBORObject","key","value","CBORSpecial","b","u","int","Int","text","arr","tagged","TaggedCBOR","special","label","Label","COSEEncrypt","Headers","COSERecipients","headers","ciphertext","recipients","COSEEncrypt0","COSEKey","key_type","key_id","algorithm_id","key_ops","Labels","base_init_vector","COSERecipient","COSESign","COSESignatures","payload","signatures","COSESign1","external_aad","external_payload","ptr1","len1","SigStructure","signature","COSESign1Builder","is_payload_external","signed_sig_structure","COSESignBuilder","COSESignature","CounterSignature","cose_signature","cose_signatures","EdDSA25519Key","pubkey_bytes","private_key_bytes","HeaderMap","criticality","content_type","init_vector","partial_init_vector","counter_signature","ProtectedHeaderMap","protected_","unprotected_","id","ec_key","curve_type","key_op","PasswordEncryption","data","header_map","PubKeyEncryption","sign_protected","context","body_protected","SignedMessage","cose_sign","cose_sign1","s","tag","arg0","arg1","path","require$$1","require$$2","wasmModule"],"mappings":"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"}