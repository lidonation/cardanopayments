{"version":3,"file":"webcrypto.es.js","sources":["../../node_modules/pvtsutils/build/index.es.js","../../node_modules/pvutils/build/utils.es.js","../../node_modules/asn1js/build/index.es.js","../../node_modules/@peculiar/asn1-schema/build/es2015/enums.js","../../node_modules/@peculiar/asn1-schema/build/es2015/converters.js","../../node_modules/@peculiar/asn1-schema/build/es2015/helper.js","../../node_modules/@peculiar/asn1-schema/build/es2015/schema.js","../../node_modules/@peculiar/asn1-schema/build/es2015/storage.js","../../node_modules/@peculiar/asn1-schema/build/es2015/decorators.js","../../node_modules/@peculiar/asn1-schema/build/es2015/errors/schema_validation.js","../../node_modules/@peculiar/asn1-schema/build/es2015/parser.js","../../node_modules/@peculiar/asn1-schema/build/es2015/serializer.js","../../node_modules/@peculiar/asn1-schema/build/es2015/convert.js","../../node_modules/tslib/tslib.es6.js","../../node_modules/@peculiar/json-schema/build/index.es.js","../../node_modules/webcrypto-core/build/webcrypto-core.es.js","../../node_modules/@peculiar/webcrypto/build/webcrypto.es.js"],"sourcesContent":["/*!\n * MIT License\n * \n * Copyright (c) 2017-2022 Peculiar Ventures, LLC\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n * \n */\n\nconst ARRAY_BUFFER_NAME = \"[object ArrayBuffer]\";\r\nclass BufferSourceConverter {\r\n    static isArrayBuffer(data) {\r\n        return Object.prototype.toString.call(data) === ARRAY_BUFFER_NAME;\r\n    }\r\n    static toArrayBuffer(data) {\r\n        if (this.isArrayBuffer(data)) {\r\n            return data;\r\n        }\r\n        if (data.byteLength === data.buffer.byteLength) {\r\n            return data.buffer;\r\n        }\r\n        return this.toUint8Array(data).slice().buffer;\r\n    }\r\n    static toUint8Array(data) {\r\n        return this.toView(data, Uint8Array);\r\n    }\r\n    static toView(data, type) {\r\n        if (data.constructor === type) {\r\n            return data;\r\n        }\r\n        if (this.isArrayBuffer(data)) {\r\n            return new type(data);\r\n        }\r\n        if (this.isArrayBufferView(data)) {\r\n            return new type(data.buffer, data.byteOffset, data.byteLength);\r\n        }\r\n        throw new TypeError(\"The provided value is not of type '(ArrayBuffer or ArrayBufferView)'\");\r\n    }\r\n    static isBufferSource(data) {\r\n        return this.isArrayBufferView(data)\r\n            || this.isArrayBuffer(data);\r\n    }\r\n    static isArrayBufferView(data) {\r\n        return ArrayBuffer.isView(data)\r\n            || (data && this.isArrayBuffer(data.buffer));\r\n    }\r\n    static isEqual(a, b) {\r\n        const aView = BufferSourceConverter.toUint8Array(a);\r\n        const bView = BufferSourceConverter.toUint8Array(b);\r\n        if (aView.length !== bView.byteLength) {\r\n            return false;\r\n        }\r\n        for (let i = 0; i < aView.length; i++) {\r\n            if (aView[i] !== bView[i]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    static concat(...args) {\r\n        if (Array.isArray(args[0])) {\r\n            const buffers = args[0];\r\n            let size = 0;\r\n            for (const buffer of buffers) {\r\n                size += buffer.byteLength;\r\n            }\r\n            const res = new Uint8Array(size);\r\n            let offset = 0;\r\n            for (const buffer of buffers) {\r\n                const view = this.toUint8Array(buffer);\r\n                res.set(view, offset);\r\n                offset += view.length;\r\n            }\r\n            if (args[1]) {\r\n                return this.toView(res, args[1]);\r\n            }\r\n            return res.buffer;\r\n        }\r\n        else {\r\n            return this.concat(args);\r\n        }\r\n    }\r\n}\n\nclass Utf8Converter {\r\n    static fromString(text) {\r\n        const s = unescape(encodeURIComponent(text));\r\n        const uintArray = new Uint8Array(s.length);\r\n        for (let i = 0; i < s.length; i++) {\r\n            uintArray[i] = s.charCodeAt(i);\r\n        }\r\n        return uintArray.buffer;\r\n    }\r\n    static toString(buffer) {\r\n        const buf = BufferSourceConverter.toUint8Array(buffer);\r\n        let encodedString = \"\";\r\n        for (let i = 0; i < buf.length; i++) {\r\n            encodedString += String.fromCharCode(buf[i]);\r\n        }\r\n        const decodedString = decodeURIComponent(escape(encodedString));\r\n        return decodedString;\r\n    }\r\n}\r\nclass Utf16Converter {\r\n    static toString(buffer, littleEndian = false) {\r\n        const arrayBuffer = BufferSourceConverter.toArrayBuffer(buffer);\r\n        const dataView = new DataView(arrayBuffer);\r\n        let res = \"\";\r\n        for (let i = 0; i < arrayBuffer.byteLength; i += 2) {\r\n            const code = dataView.getUint16(i, littleEndian);\r\n            res += String.fromCharCode(code);\r\n        }\r\n        return res;\r\n    }\r\n    static fromString(text, littleEndian = false) {\r\n        const res = new ArrayBuffer(text.length * 2);\r\n        const dataView = new DataView(res);\r\n        for (let i = 0; i < text.length; i++) {\r\n            dataView.setUint16(i * 2, text.charCodeAt(i), littleEndian);\r\n        }\r\n        return res;\r\n    }\r\n}\r\nclass Convert {\r\n    static isHex(data) {\r\n        return typeof data === \"string\"\r\n            && /^[a-z0-9]+$/i.test(data);\r\n    }\r\n    static isBase64(data) {\r\n        return typeof data === \"string\"\r\n            && /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(data);\r\n    }\r\n    static isBase64Url(data) {\r\n        return typeof data === \"string\"\r\n            && /^[a-zA-Z0-9-_]+$/i.test(data);\r\n    }\r\n    static ToString(buffer, enc = \"utf8\") {\r\n        const buf = BufferSourceConverter.toUint8Array(buffer);\r\n        switch (enc.toLowerCase()) {\r\n            case \"utf8\":\r\n                return this.ToUtf8String(buf);\r\n            case \"binary\":\r\n                return this.ToBinary(buf);\r\n            case \"hex\":\r\n                return this.ToHex(buf);\r\n            case \"base64\":\r\n                return this.ToBase64(buf);\r\n            case \"base64url\":\r\n                return this.ToBase64Url(buf);\r\n            case \"utf16le\":\r\n                return Utf16Converter.toString(buf, true);\r\n            case \"utf16\":\r\n            case \"utf16be\":\r\n                return Utf16Converter.toString(buf);\r\n            default:\r\n                throw new Error(`Unknown type of encoding '${enc}'`);\r\n        }\r\n    }\r\n    static FromString(str, enc = \"utf8\") {\r\n        if (!str) {\r\n            return new ArrayBuffer(0);\r\n        }\r\n        switch (enc.toLowerCase()) {\r\n            case \"utf8\":\r\n                return this.FromUtf8String(str);\r\n            case \"binary\":\r\n                return this.FromBinary(str);\r\n            case \"hex\":\r\n                return this.FromHex(str);\r\n            case \"base64\":\r\n                return this.FromBase64(str);\r\n            case \"base64url\":\r\n                return this.FromBase64Url(str);\r\n            case \"utf16le\":\r\n                return Utf16Converter.fromString(str, true);\r\n            case \"utf16\":\r\n            case \"utf16be\":\r\n                return Utf16Converter.fromString(str);\r\n            default:\r\n                throw new Error(`Unknown type of encoding '${enc}'`);\r\n        }\r\n    }\r\n    static ToBase64(buffer) {\r\n        const buf = BufferSourceConverter.toUint8Array(buffer);\r\n        if (typeof btoa !== \"undefined\") {\r\n            const binary = this.ToString(buf, \"binary\");\r\n            return btoa(binary);\r\n        }\r\n        else {\r\n            return Buffer.from(buf).toString(\"base64\");\r\n        }\r\n    }\r\n    static FromBase64(base64) {\r\n        const formatted = this.formatString(base64);\r\n        if (!formatted) {\r\n            return new ArrayBuffer(0);\r\n        }\r\n        if (!Convert.isBase64(formatted)) {\r\n            throw new TypeError(\"Argument 'base64Text' is not Base64 encoded\");\r\n        }\r\n        if (typeof atob !== \"undefined\") {\r\n            return this.FromBinary(atob(formatted));\r\n        }\r\n        else {\r\n            return new Uint8Array(Buffer.from(formatted, \"base64\")).buffer;\r\n        }\r\n    }\r\n    static FromBase64Url(base64url) {\r\n        const formatted = this.formatString(base64url);\r\n        if (!formatted) {\r\n            return new ArrayBuffer(0);\r\n        }\r\n        if (!Convert.isBase64Url(formatted)) {\r\n            throw new TypeError(\"Argument 'base64url' is not Base64Url encoded\");\r\n        }\r\n        return this.FromBase64(this.Base64Padding(formatted.replace(/\\-/g, \"+\").replace(/\\_/g, \"/\")));\r\n    }\r\n    static ToBase64Url(data) {\r\n        return this.ToBase64(data).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/\\=/g, \"\");\r\n    }\r\n    static FromUtf8String(text, encoding = Convert.DEFAULT_UTF8_ENCODING) {\r\n        switch (encoding) {\r\n            case \"ascii\":\r\n                return this.FromBinary(text);\r\n            case \"utf8\":\r\n                return Utf8Converter.fromString(text);\r\n            case \"utf16\":\r\n            case \"utf16be\":\r\n                return Utf16Converter.fromString(text);\r\n            case \"utf16le\":\r\n            case \"usc2\":\r\n                return Utf16Converter.fromString(text, true);\r\n            default:\r\n                throw new Error(`Unknown type of encoding '${encoding}'`);\r\n        }\r\n    }\r\n    static ToUtf8String(buffer, encoding = Convert.DEFAULT_UTF8_ENCODING) {\r\n        switch (encoding) {\r\n            case \"ascii\":\r\n                return this.ToBinary(buffer);\r\n            case \"utf8\":\r\n                return Utf8Converter.toString(buffer);\r\n            case \"utf16\":\r\n            case \"utf16be\":\r\n                return Utf16Converter.toString(buffer);\r\n            case \"utf16le\":\r\n            case \"usc2\":\r\n                return Utf16Converter.toString(buffer, true);\r\n            default:\r\n                throw new Error(`Unknown type of encoding '${encoding}'`);\r\n        }\r\n    }\r\n    static FromBinary(text) {\r\n        const stringLength = text.length;\r\n        const resultView = new Uint8Array(stringLength);\r\n        for (let i = 0; i < stringLength; i++) {\r\n            resultView[i] = text.charCodeAt(i);\r\n        }\r\n        return resultView.buffer;\r\n    }\r\n    static ToBinary(buffer) {\r\n        const buf = BufferSourceConverter.toUint8Array(buffer);\r\n        let res = \"\";\r\n        for (let i = 0; i < buf.length; i++) {\r\n            res += String.fromCharCode(buf[i]);\r\n        }\r\n        return res;\r\n    }\r\n    static ToHex(buffer) {\r\n        const buf = BufferSourceConverter.toUint8Array(buffer);\r\n        const splitter = \"\";\r\n        const res = [];\r\n        const len = buf.length;\r\n        for (let i = 0; i < len; i++) {\r\n            const char = buf[i].toString(16).padStart(2, \"0\");\r\n            res.push(char);\r\n        }\r\n        return res.join(splitter);\r\n    }\r\n    static FromHex(hexString) {\r\n        let formatted = this.formatString(hexString);\r\n        if (!formatted) {\r\n            return new ArrayBuffer(0);\r\n        }\r\n        if (!Convert.isHex(formatted)) {\r\n            throw new TypeError(\"Argument 'hexString' is not HEX encoded\");\r\n        }\r\n        if (formatted.length % 2) {\r\n            formatted = `0${formatted}`;\r\n        }\r\n        const res = new Uint8Array(formatted.length / 2);\r\n        for (let i = 0; i < formatted.length; i = i + 2) {\r\n            const c = formatted.slice(i, i + 2);\r\n            res[i / 2] = parseInt(c, 16);\r\n        }\r\n        return res.buffer;\r\n    }\r\n    static ToUtf16String(buffer, littleEndian = false) {\r\n        return Utf16Converter.toString(buffer, littleEndian);\r\n    }\r\n    static FromUtf16String(text, littleEndian = false) {\r\n        return Utf16Converter.fromString(text, littleEndian);\r\n    }\r\n    static Base64Padding(base64) {\r\n        const padCount = 4 - (base64.length % 4);\r\n        if (padCount < 4) {\r\n            for (let i = 0; i < padCount; i++) {\r\n                base64 += \"=\";\r\n            }\r\n        }\r\n        return base64;\r\n    }\r\n    static formatString(data) {\r\n        return (data === null || data === void 0 ? void 0 : data.replace(/[\\n\\r\\t ]/g, \"\")) || \"\";\r\n    }\r\n}\r\nConvert.DEFAULT_UTF8_ENCODING = \"utf8\";\n\nfunction assign(target, ...sources) {\r\n    const res = arguments[0];\r\n    for (let i = 1; i < arguments.length; i++) {\r\n        const obj = arguments[i];\r\n        for (const prop in obj) {\r\n            res[prop] = obj[prop];\r\n        }\r\n    }\r\n    return res;\r\n}\r\nfunction combine(...buf) {\r\n    const totalByteLength = buf.map((item) => item.byteLength).reduce((prev, cur) => prev + cur);\r\n    const res = new Uint8Array(totalByteLength);\r\n    let currentPos = 0;\r\n    buf.map((item) => new Uint8Array(item)).forEach((arr) => {\r\n        for (const item2 of arr) {\r\n            res[currentPos++] = item2;\r\n        }\r\n    });\r\n    return res.buffer;\r\n}\r\nfunction isEqual(bytes1, bytes2) {\r\n    if (!(bytes1 && bytes2)) {\r\n        return false;\r\n    }\r\n    if (bytes1.byteLength !== bytes2.byteLength) {\r\n        return false;\r\n    }\r\n    const b1 = new Uint8Array(bytes1);\r\n    const b2 = new Uint8Array(bytes2);\r\n    for (let i = 0; i < bytes1.byteLength; i++) {\r\n        if (b1[i] !== b2[i]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\n\nexport { BufferSourceConverter, Convert, assign, combine, isEqual };\n","/*!\n Copyright (c) Peculiar Ventures, LLC\n*/\n\nfunction getUTCDate(date) {\r\n    return new Date(date.getTime() + (date.getTimezoneOffset() * 60000));\r\n}\r\nfunction getParametersValue(parameters, name, defaultValue) {\r\n    var _a;\r\n    if ((parameters instanceof Object) === false) {\r\n        return defaultValue;\r\n    }\r\n    return (_a = parameters[name]) !== null && _a !== void 0 ? _a : defaultValue;\r\n}\r\nfunction bufferToHexCodes(inputBuffer, inputOffset = 0, inputLength = (inputBuffer.byteLength - inputOffset), insertSpace = false) {\r\n    let result = \"\";\r\n    for (const item of (new Uint8Array(inputBuffer, inputOffset, inputLength))) {\r\n        const str = item.toString(16).toUpperCase();\r\n        if (str.length === 1) {\r\n            result += \"0\";\r\n        }\r\n        result += str;\r\n        if (insertSpace) {\r\n            result += \" \";\r\n        }\r\n    }\r\n    return result.trim();\r\n}\r\nfunction checkBufferParams(baseBlock, inputBuffer, inputOffset, inputLength) {\r\n    if (!(inputBuffer instanceof ArrayBuffer)) {\r\n        baseBlock.error = \"Wrong parameter: inputBuffer must be \\\"ArrayBuffer\\\"\";\r\n        return false;\r\n    }\r\n    if (!inputBuffer.byteLength) {\r\n        baseBlock.error = \"Wrong parameter: inputBuffer has zero length\";\r\n        return false;\r\n    }\r\n    if (inputOffset < 0) {\r\n        baseBlock.error = \"Wrong parameter: inputOffset less than zero\";\r\n        return false;\r\n    }\r\n    if (inputLength < 0) {\r\n        baseBlock.error = \"Wrong parameter: inputLength less than zero\";\r\n        return false;\r\n    }\r\n    if ((inputBuffer.byteLength - inputOffset - inputLength) < 0) {\r\n        baseBlock.error = \"End of input reached before message was fully decoded (inconsistent offset and length values)\";\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\nfunction utilFromBase(inputBuffer, inputBase) {\r\n    let result = 0;\r\n    if (inputBuffer.length === 1) {\r\n        return inputBuffer[0];\r\n    }\r\n    for (let i = (inputBuffer.length - 1); i >= 0; i--) {\r\n        result += inputBuffer[(inputBuffer.length - 1) - i] * Math.pow(2, inputBase * i);\r\n    }\r\n    return result;\r\n}\r\nfunction utilToBase(value, base, reserved = (-1)) {\r\n    const internalReserved = reserved;\r\n    let internalValue = value;\r\n    let result = 0;\r\n    let biggest = Math.pow(2, base);\r\n    for (let i = 1; i < 8; i++) {\r\n        if (value < biggest) {\r\n            let retBuf;\r\n            if (internalReserved < 0) {\r\n                retBuf = new ArrayBuffer(i);\r\n                result = i;\r\n            }\r\n            else {\r\n                if (internalReserved < i) {\r\n                    return (new ArrayBuffer(0));\r\n                }\r\n                retBuf = new ArrayBuffer(internalReserved);\r\n                result = internalReserved;\r\n            }\r\n            const retView = new Uint8Array(retBuf);\r\n            for (let j = (i - 1); j >= 0; j--) {\r\n                const basis = Math.pow(2, j * base);\r\n                retView[result - j - 1] = Math.floor(internalValue / basis);\r\n                internalValue -= (retView[result - j - 1]) * basis;\r\n            }\r\n            return retBuf;\r\n        }\r\n        biggest *= Math.pow(2, base);\r\n    }\r\n    return new ArrayBuffer(0);\r\n}\r\nfunction utilConcatBuf(...buffers) {\r\n    let outputLength = 0;\r\n    let prevLength = 0;\r\n    for (const buffer of buffers) {\r\n        outputLength += buffer.byteLength;\r\n    }\r\n    const retBuf = new ArrayBuffer(outputLength);\r\n    const retView = new Uint8Array(retBuf);\r\n    for (const buffer of buffers) {\r\n        retView.set(new Uint8Array(buffer), prevLength);\r\n        prevLength += buffer.byteLength;\r\n    }\r\n    return retBuf;\r\n}\r\nfunction utilConcatView(...views) {\r\n    let outputLength = 0;\r\n    let prevLength = 0;\r\n    for (const view of views) {\r\n        outputLength += view.length;\r\n    }\r\n    const retBuf = new ArrayBuffer(outputLength);\r\n    const retView = new Uint8Array(retBuf);\r\n    for (const view of views) {\r\n        retView.set(view, prevLength);\r\n        prevLength += view.length;\r\n    }\r\n    return retView;\r\n}\r\nfunction utilDecodeTC() {\r\n    const buf = new Uint8Array(this.valueHex);\r\n    if (this.valueHex.byteLength >= 2) {\r\n        const condition1 = (buf[0] === 0xFF) && (buf[1] & 0x80);\r\n        const condition2 = (buf[0] === 0x00) && ((buf[1] & 0x80) === 0x00);\r\n        if (condition1 || condition2) {\r\n            this.warnings.push(\"Needlessly long format\");\r\n        }\r\n    }\r\n    const bigIntBuffer = new ArrayBuffer(this.valueHex.byteLength);\r\n    const bigIntView = new Uint8Array(bigIntBuffer);\r\n    for (let i = 0; i < this.valueHex.byteLength; i++) {\r\n        bigIntView[i] = 0;\r\n    }\r\n    bigIntView[0] = (buf[0] & 0x80);\r\n    const bigInt = utilFromBase(bigIntView, 8);\r\n    const smallIntBuffer = new ArrayBuffer(this.valueHex.byteLength);\r\n    const smallIntView = new Uint8Array(smallIntBuffer);\r\n    for (let j = 0; j < this.valueHex.byteLength; j++) {\r\n        smallIntView[j] = buf[j];\r\n    }\r\n    smallIntView[0] &= 0x7F;\r\n    const smallInt = utilFromBase(smallIntView, 8);\r\n    return (smallInt - bigInt);\r\n}\r\nfunction utilEncodeTC(value) {\r\n    const modValue = (value < 0) ? (value * (-1)) : value;\r\n    let bigInt = 128;\r\n    for (let i = 1; i < 8; i++) {\r\n        if (modValue <= bigInt) {\r\n            if (value < 0) {\r\n                const smallInt = bigInt - modValue;\r\n                const retBuf = utilToBase(smallInt, 8, i);\r\n                const retView = new Uint8Array(retBuf);\r\n                retView[0] |= 0x80;\r\n                return retBuf;\r\n            }\r\n            let retBuf = utilToBase(modValue, 8, i);\r\n            let retView = new Uint8Array(retBuf);\r\n            if (retView[0] & 0x80) {\r\n                const tempBuf = retBuf.slice(0);\r\n                const tempView = new Uint8Array(tempBuf);\r\n                retBuf = new ArrayBuffer(retBuf.byteLength + 1);\r\n                retView = new Uint8Array(retBuf);\r\n                for (let k = 0; k < tempBuf.byteLength; k++) {\r\n                    retView[k + 1] = tempView[k];\r\n                }\r\n                retView[0] = 0x00;\r\n            }\r\n            return retBuf;\r\n        }\r\n        bigInt *= Math.pow(2, 8);\r\n    }\r\n    return (new ArrayBuffer(0));\r\n}\r\nfunction isEqualBuffer(inputBuffer1, inputBuffer2) {\r\n    if (inputBuffer1.byteLength !== inputBuffer2.byteLength) {\r\n        return false;\r\n    }\r\n    const view1 = new Uint8Array(inputBuffer1);\r\n    const view2 = new Uint8Array(inputBuffer2);\r\n    for (let i = 0; i < view1.length; i++) {\r\n        if (view1[i] !== view2[i]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction padNumber(inputNumber, fullLength) {\r\n    const str = inputNumber.toString(10);\r\n    if (fullLength < str.length) {\r\n        return \"\";\r\n    }\r\n    const dif = fullLength - str.length;\r\n    const padding = new Array(dif);\r\n    for (let i = 0; i < dif; i++) {\r\n        padding[i] = \"0\";\r\n    }\r\n    const paddingString = padding.join(\"\");\r\n    return paddingString.concat(str);\r\n}\r\nconst base64Template = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\r\nconst base64UrlTemplate = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=\";\r\nfunction toBase64(input, useUrlTemplate = false, skipPadding = false, skipLeadingZeros = false) {\r\n    let i = 0;\r\n    let flag1 = 0;\r\n    let flag2 = 0;\r\n    let output = \"\";\r\n    const template = (useUrlTemplate) ? base64UrlTemplate : base64Template;\r\n    if (skipLeadingZeros) {\r\n        let nonZeroPosition = 0;\r\n        for (let i = 0; i < input.length; i++) {\r\n            if (input.charCodeAt(i) !== 0) {\r\n                nonZeroPosition = i;\r\n                break;\r\n            }\r\n        }\r\n        input = input.slice(nonZeroPosition);\r\n    }\r\n    while (i < input.length) {\r\n        const chr1 = input.charCodeAt(i++);\r\n        if (i >= input.length) {\r\n            flag1 = 1;\r\n        }\r\n        const chr2 = input.charCodeAt(i++);\r\n        if (i >= input.length) {\r\n            flag2 = 1;\r\n        }\r\n        const chr3 = input.charCodeAt(i++);\r\n        const enc1 = chr1 >> 2;\r\n        const enc2 = ((chr1 & 0x03) << 4) | (chr2 >> 4);\r\n        let enc3 = ((chr2 & 0x0F) << 2) | (chr3 >> 6);\r\n        let enc4 = chr3 & 0x3F;\r\n        if (flag1 === 1) {\r\n            enc3 = enc4 = 64;\r\n        }\r\n        else {\r\n            if (flag2 === 1) {\r\n                enc4 = 64;\r\n            }\r\n        }\r\n        if (skipPadding) {\r\n            if (enc3 === 64) {\r\n                output += `${template.charAt(enc1)}${template.charAt(enc2)}`;\r\n            }\r\n            else {\r\n                if (enc4 === 64) {\r\n                    output += `${template.charAt(enc1)}${template.charAt(enc2)}${template.charAt(enc3)}`;\r\n                }\r\n                else {\r\n                    output += `${template.charAt(enc1)}${template.charAt(enc2)}${template.charAt(enc3)}${template.charAt(enc4)}`;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            output += `${template.charAt(enc1)}${template.charAt(enc2)}${template.charAt(enc3)}${template.charAt(enc4)}`;\r\n        }\r\n    }\r\n    return output;\r\n}\r\nfunction fromBase64(input, useUrlTemplate = false, cutTailZeros = false) {\r\n    const template = (useUrlTemplate) ? base64UrlTemplate : base64Template;\r\n    function indexOf(toSearch) {\r\n        for (let i = 0; i < 64; i++) {\r\n            if (template.charAt(i) === toSearch)\r\n                return i;\r\n        }\r\n        return 64;\r\n    }\r\n    function test(incoming) {\r\n        return ((incoming === 64) ? 0x00 : incoming);\r\n    }\r\n    let i = 0;\r\n    let output = \"\";\r\n    while (i < input.length) {\r\n        const enc1 = indexOf(input.charAt(i++));\r\n        const enc2 = (i >= input.length) ? 0x00 : indexOf(input.charAt(i++));\r\n        const enc3 = (i >= input.length) ? 0x00 : indexOf(input.charAt(i++));\r\n        const enc4 = (i >= input.length) ? 0x00 : indexOf(input.charAt(i++));\r\n        const chr1 = (test(enc1) << 2) | (test(enc2) >> 4);\r\n        const chr2 = ((test(enc2) & 0x0F) << 4) | (test(enc3) >> 2);\r\n        const chr3 = ((test(enc3) & 0x03) << 6) | test(enc4);\r\n        output += String.fromCharCode(chr1);\r\n        if (enc3 !== 64) {\r\n            output += String.fromCharCode(chr2);\r\n        }\r\n        if (enc4 !== 64) {\r\n            output += String.fromCharCode(chr3);\r\n        }\r\n    }\r\n    if (cutTailZeros) {\r\n        const outputLength = output.length;\r\n        let nonZeroStart = (-1);\r\n        for (let i = (outputLength - 1); i >= 0; i--) {\r\n            if (output.charCodeAt(i) !== 0) {\r\n                nonZeroStart = i;\r\n                break;\r\n            }\r\n        }\r\n        if (nonZeroStart !== (-1)) {\r\n            output = output.slice(0, nonZeroStart + 1);\r\n        }\r\n        else {\r\n            output = \"\";\r\n        }\r\n    }\r\n    return output;\r\n}\r\nfunction arrayBufferToString(buffer) {\r\n    let resultString = \"\";\r\n    const view = new Uint8Array(buffer);\r\n    for (const element of view) {\r\n        resultString += String.fromCharCode(element);\r\n    }\r\n    return resultString;\r\n}\r\nfunction stringToArrayBuffer(str) {\r\n    const stringLength = str.length;\r\n    const resultBuffer = new ArrayBuffer(stringLength);\r\n    const resultView = new Uint8Array(resultBuffer);\r\n    for (let i = 0; i < stringLength; i++) {\r\n        resultView[i] = str.charCodeAt(i);\r\n    }\r\n    return resultBuffer;\r\n}\r\nconst log2 = Math.log(2);\r\nfunction nearestPowerOf2(length) {\r\n    const base = (Math.log(length) / log2);\r\n    const floor = Math.floor(base);\r\n    const round = Math.round(base);\r\n    return ((floor === round) ? floor : round);\r\n}\r\nfunction clearProps(object, propsArray) {\r\n    for (const prop of propsArray) {\r\n        delete object[prop];\r\n    }\r\n}\n\nexport { arrayBufferToString, bufferToHexCodes, checkBufferParams, clearProps, fromBase64, getParametersValue, getUTCDate, isEqualBuffer, nearestPowerOf2, padNumber, stringToArrayBuffer, toBase64, utilConcatBuf, utilConcatView, utilDecodeTC, utilEncodeTC, utilFromBase, utilToBase };\n","/*!\n * Copyright (c) 2014, GMO GlobalSign\n * Copyright (c) 2015-2022, Peculiar Ventures\n * All rights reserved.\n * \n * Author 2014-2019, Yury Strozhevsky\n * \n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * \n * * Redistributions of source code must retain the above copyright notice, this\n *   list of conditions and the following disclaimer.\n * \n * * Redistributions in binary form must reproduce the above copyright notice, this\n *   list of conditions and the following disclaimer in the documentation and/or\n *   other materials provided with the distribution.\n * \n * * Neither the name of the copyright holder nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\n * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n * \n */\n\nimport * as pvtsutils from 'pvtsutils';\nimport * as pvutils from 'pvutils';\n\nfunction assertBigInt() {\r\n    if (typeof BigInt === \"undefined\") {\r\n        throw new Error(\"BigInt is not defined. Your environment doesn't implement BigInt.\");\r\n    }\r\n}\r\nfunction concat(buffers) {\r\n    let outputLength = 0;\r\n    let prevLength = 0;\r\n    for (let i = 0; i < buffers.length; i++) {\r\n        const buffer = buffers[i];\r\n        outputLength += buffer.byteLength;\r\n    }\r\n    const retView = new Uint8Array(outputLength);\r\n    for (let i = 0; i < buffers.length; i++) {\r\n        const buffer = buffers[i];\r\n        retView.set(new Uint8Array(buffer), prevLength);\r\n        prevLength += buffer.byteLength;\r\n    }\r\n    return retView.buffer;\r\n}\r\nfunction checkBufferParams(baseBlock, inputBuffer, inputOffset, inputLength) {\r\n    if (!(inputBuffer instanceof Uint8Array)) {\r\n        baseBlock.error = \"Wrong parameter: inputBuffer must be 'Uint8Array'\";\r\n        return false;\r\n    }\r\n    if (!inputBuffer.byteLength) {\r\n        baseBlock.error = \"Wrong parameter: inputBuffer has zero length\";\r\n        return false;\r\n    }\r\n    if (inputOffset < 0) {\r\n        baseBlock.error = \"Wrong parameter: inputOffset less than zero\";\r\n        return false;\r\n    }\r\n    if (inputLength < 0) {\r\n        baseBlock.error = \"Wrong parameter: inputLength less than zero\";\r\n        return false;\r\n    }\r\n    if ((inputBuffer.byteLength - inputOffset - inputLength) < 0) {\r\n        baseBlock.error = \"End of input reached before message was fully decoded (inconsistent offset and length values)\";\r\n        return false;\r\n    }\r\n    return true;\r\n}\n\nclass ViewWriter {\r\n    constructor() {\r\n        this.items = [];\r\n    }\r\n    write(buf) {\r\n        this.items.push(buf);\r\n    }\r\n    final() {\r\n        return concat(this.items);\r\n    }\r\n}\n\nconst powers2 = [new Uint8Array([1])];\r\nconst digitsString = \"0123456789\";\r\nconst NAME = \"name\";\r\nconst VALUE_HEX_VIEW = \"valueHexView\";\r\nconst IS_HEX_ONLY = \"isHexOnly\";\r\nconst ID_BLOCK = \"idBlock\";\r\nconst TAG_CLASS = \"tagClass\";\r\nconst TAG_NUMBER = \"tagNumber\";\r\nconst IS_CONSTRUCTED = \"isConstructed\";\r\nconst FROM_BER = \"fromBER\";\r\nconst TO_BER = \"toBER\";\r\nconst LOCAL = \"local\";\r\nconst EMPTY_STRING = \"\";\r\nconst EMPTY_BUFFER = new ArrayBuffer(0);\r\nconst EMPTY_VIEW = new Uint8Array(0);\r\nconst END_OF_CONTENT_NAME = \"EndOfContent\";\r\nconst OCTET_STRING_NAME = \"OCTET STRING\";\r\nconst BIT_STRING_NAME = \"BIT STRING\";\n\nfunction HexBlock(BaseClass) {\r\n    var _a;\r\n    return _a = class Some extends BaseClass {\r\n            constructor(...args) {\r\n                var _a;\r\n                super(...args);\r\n                const params = args[0] || {};\r\n                this.isHexOnly = (_a = params.isHexOnly) !== null && _a !== void 0 ? _a : false;\r\n                this.valueHexView = params.valueHex ? pvtsutils.BufferSourceConverter.toUint8Array(params.valueHex) : EMPTY_VIEW;\r\n            }\r\n            get valueHex() {\r\n                return this.valueHexView.slice().buffer;\r\n            }\r\n            set valueHex(value) {\r\n                this.valueHexView = new Uint8Array(value);\r\n            }\r\n            fromBER(inputBuffer, inputOffset, inputLength) {\r\n                const view = inputBuffer instanceof ArrayBuffer ? new Uint8Array(inputBuffer) : inputBuffer;\r\n                if (!checkBufferParams(this, view, inputOffset, inputLength)) {\r\n                    return -1;\r\n                }\r\n                const endLength = inputOffset + inputLength;\r\n                this.valueHexView = view.subarray(inputOffset, endLength);\r\n                if (!this.valueHexView.length) {\r\n                    this.warnings.push(\"Zero buffer length\");\r\n                    return inputOffset;\r\n                }\r\n                this.blockLength = inputLength;\r\n                return endLength;\r\n            }\r\n            toBER(sizeOnly = false) {\r\n                if (!this.isHexOnly) {\r\n                    this.error = \"Flag 'isHexOnly' is not set, abort\";\r\n                    return EMPTY_BUFFER;\r\n                }\r\n                if (sizeOnly) {\r\n                    return new ArrayBuffer(this.valueHexView.byteLength);\r\n                }\r\n                return (this.valueHexView.byteLength === this.valueHexView.buffer.byteLength)\r\n                    ? this.valueHexView.buffer\r\n                    : this.valueHexView.slice().buffer;\r\n            }\r\n            toJSON() {\r\n                return {\r\n                    ...super.toJSON(),\r\n                    isHexOnly: this.isHexOnly,\r\n                    valueHex: pvtsutils.Convert.ToHex(this.valueHexView),\r\n                };\r\n            }\r\n        },\r\n        _a.NAME = \"hexBlock\",\r\n        _a;\r\n}\n\nclass LocalBaseBlock {\r\n    constructor({ blockLength = 0, error = EMPTY_STRING, warnings = [], valueBeforeDecode = EMPTY_VIEW, } = {}) {\r\n        this.blockLength = blockLength;\r\n        this.error = error;\r\n        this.warnings = warnings;\r\n        this.valueBeforeDecodeView = pvtsutils.BufferSourceConverter.toUint8Array(valueBeforeDecode);\r\n    }\r\n    static blockName() {\r\n        return this.NAME;\r\n    }\r\n    get valueBeforeDecode() {\r\n        return this.valueBeforeDecodeView.slice().buffer;\r\n    }\r\n    set valueBeforeDecode(value) {\r\n        this.valueBeforeDecodeView = new Uint8Array(value);\r\n    }\r\n    toJSON() {\r\n        return {\r\n            blockName: this.constructor.NAME,\r\n            blockLength: this.blockLength,\r\n            error: this.error,\r\n            warnings: this.warnings,\r\n            valueBeforeDecode: pvtsutils.Convert.ToHex(this.valueBeforeDecodeView),\r\n        };\r\n    }\r\n}\r\nLocalBaseBlock.NAME = \"baseBlock\";\n\nclass ValueBlock extends LocalBaseBlock {\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        throw TypeError(\"User need to make a specific function in a class which extends 'ValueBlock'\");\r\n    }\r\n    toBER(sizeOnly, writer) {\r\n        throw TypeError(\"User need to make a specific function in a class which extends 'ValueBlock'\");\r\n    }\r\n}\r\nValueBlock.NAME = \"valueBlock\";\n\nclass LocalIdentificationBlock extends HexBlock(LocalBaseBlock) {\r\n    constructor({ idBlock = {}, } = {}) {\r\n        var _a, _b, _c, _d;\r\n        super();\r\n        if (idBlock) {\r\n            this.isHexOnly = (_a = idBlock.isHexOnly) !== null && _a !== void 0 ? _a : false;\r\n            this.valueHexView = idBlock.valueHex ? pvtsutils.BufferSourceConverter.toUint8Array(idBlock.valueHex) : EMPTY_VIEW;\r\n            this.tagClass = (_b = idBlock.tagClass) !== null && _b !== void 0 ? _b : -1;\r\n            this.tagNumber = (_c = idBlock.tagNumber) !== null && _c !== void 0 ? _c : -1;\r\n            this.isConstructed = (_d = idBlock.isConstructed) !== null && _d !== void 0 ? _d : false;\r\n        }\r\n        else {\r\n            this.tagClass = -1;\r\n            this.tagNumber = -1;\r\n            this.isConstructed = false;\r\n        }\r\n    }\r\n    toBER(sizeOnly = false) {\r\n        let firstOctet = 0;\r\n        switch (this.tagClass) {\r\n            case 1:\r\n                firstOctet |= 0x00;\r\n                break;\r\n            case 2:\r\n                firstOctet |= 0x40;\r\n                break;\r\n            case 3:\r\n                firstOctet |= 0x80;\r\n                break;\r\n            case 4:\r\n                firstOctet |= 0xC0;\r\n                break;\r\n            default:\r\n                this.error = \"Unknown tag class\";\r\n                return EMPTY_BUFFER;\r\n        }\r\n        if (this.isConstructed)\r\n            firstOctet |= 0x20;\r\n        if (this.tagNumber < 31 && !this.isHexOnly) {\r\n            const retView = new Uint8Array(1);\r\n            if (!sizeOnly) {\r\n                let number = this.tagNumber;\r\n                number &= 0x1F;\r\n                firstOctet |= number;\r\n                retView[0] = firstOctet;\r\n            }\r\n            return retView.buffer;\r\n        }\r\n        if (!this.isHexOnly) {\r\n            const encodedBuf = pvutils.utilToBase(this.tagNumber, 7);\r\n            const encodedView = new Uint8Array(encodedBuf);\r\n            const size = encodedBuf.byteLength;\r\n            const retView = new Uint8Array(size + 1);\r\n            retView[0] = (firstOctet | 0x1F);\r\n            if (!sizeOnly) {\r\n                for (let i = 0; i < (size - 1); i++)\r\n                    retView[i + 1] = encodedView[i] | 0x80;\r\n                retView[size] = encodedView[size - 1];\r\n            }\r\n            return retView.buffer;\r\n        }\r\n        const retView = new Uint8Array(this.valueHexView.byteLength + 1);\r\n        retView[0] = (firstOctet | 0x1F);\r\n        if (!sizeOnly) {\r\n            const curView = this.valueHexView;\r\n            for (let i = 0; i < (curView.length - 1); i++)\r\n                retView[i + 1] = curView[i] | 0x80;\r\n            retView[this.valueHexView.byteLength] = curView[curView.length - 1];\r\n        }\r\n        return retView.buffer;\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        const inputView = pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer);\r\n        if (!checkBufferParams(this, inputView, inputOffset, inputLength)) {\r\n            return -1;\r\n        }\r\n        const intBuffer = inputView.subarray(inputOffset, inputOffset + inputLength);\r\n        if (intBuffer.length === 0) {\r\n            this.error = \"Zero buffer length\";\r\n            return -1;\r\n        }\r\n        const tagClassMask = intBuffer[0] & 0xC0;\r\n        switch (tagClassMask) {\r\n            case 0x00:\r\n                this.tagClass = (1);\r\n                break;\r\n            case 0x40:\r\n                this.tagClass = (2);\r\n                break;\r\n            case 0x80:\r\n                this.tagClass = (3);\r\n                break;\r\n            case 0xC0:\r\n                this.tagClass = (4);\r\n                break;\r\n            default:\r\n                this.error = \"Unknown tag class\";\r\n                return -1;\r\n        }\r\n        this.isConstructed = (intBuffer[0] & 0x20) === 0x20;\r\n        this.isHexOnly = false;\r\n        const tagNumberMask = intBuffer[0] & 0x1F;\r\n        if (tagNumberMask !== 0x1F) {\r\n            this.tagNumber = (tagNumberMask);\r\n            this.blockLength = 1;\r\n        }\r\n        else {\r\n            let count = 1;\r\n            let intTagNumberBuffer = this.valueHexView = new Uint8Array(255);\r\n            let tagNumberBufferMaxLength = 255;\r\n            while (intBuffer[count] & 0x80) {\r\n                intTagNumberBuffer[count - 1] = intBuffer[count] & 0x7F;\r\n                count++;\r\n                if (count >= intBuffer.length) {\r\n                    this.error = \"End of input reached before message was fully decoded\";\r\n                    return -1;\r\n                }\r\n                if (count === tagNumberBufferMaxLength) {\r\n                    tagNumberBufferMaxLength += 255;\r\n                    const tempBufferView = new Uint8Array(tagNumberBufferMaxLength);\r\n                    for (let i = 0; i < intTagNumberBuffer.length; i++)\r\n                        tempBufferView[i] = intTagNumberBuffer[i];\r\n                    intTagNumberBuffer = this.valueHexView = new Uint8Array(tagNumberBufferMaxLength);\r\n                }\r\n            }\r\n            this.blockLength = (count + 1);\r\n            intTagNumberBuffer[count - 1] = intBuffer[count] & 0x7F;\r\n            const tempBufferView = new Uint8Array(count);\r\n            for (let i = 0; i < count; i++)\r\n                tempBufferView[i] = intTagNumberBuffer[i];\r\n            intTagNumberBuffer = this.valueHexView = new Uint8Array(count);\r\n            intTagNumberBuffer.set(tempBufferView);\r\n            if (this.blockLength <= 9)\r\n                this.tagNumber = pvutils.utilFromBase(intTagNumberBuffer, 7);\r\n            else {\r\n                this.isHexOnly = true;\r\n                this.warnings.push(\"Tag too long, represented as hex-coded\");\r\n            }\r\n        }\r\n        if (((this.tagClass === 1)) &&\r\n            (this.isConstructed)) {\r\n            switch (this.tagNumber) {\r\n                case 1:\r\n                case 2:\r\n                case 5:\r\n                case 6:\r\n                case 9:\r\n                case 13:\r\n                case 14:\r\n                case 23:\r\n                case 24:\r\n                case 31:\r\n                case 32:\r\n                case 33:\r\n                case 34:\r\n                    this.error = \"Constructed encoding used for primitive type\";\r\n                    return -1;\r\n            }\r\n        }\r\n        return (inputOffset + this.blockLength);\r\n    }\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            tagClass: this.tagClass,\r\n            tagNumber: this.tagNumber,\r\n            isConstructed: this.isConstructed,\r\n        };\r\n    }\r\n}\r\nLocalIdentificationBlock.NAME = \"identificationBlock\";\n\nclass LocalLengthBlock extends LocalBaseBlock {\r\n    constructor({ lenBlock = {}, } = {}) {\r\n        var _a, _b, _c;\r\n        super();\r\n        this.isIndefiniteForm = (_a = lenBlock.isIndefiniteForm) !== null && _a !== void 0 ? _a : false;\r\n        this.longFormUsed = (_b = lenBlock.longFormUsed) !== null && _b !== void 0 ? _b : false;\r\n        this.length = (_c = lenBlock.length) !== null && _c !== void 0 ? _c : 0;\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        const view = pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer);\r\n        if (!checkBufferParams(this, view, inputOffset, inputLength)) {\r\n            return -1;\r\n        }\r\n        const intBuffer = view.subarray(inputOffset, inputOffset + inputLength);\r\n        if (intBuffer.length === 0) {\r\n            this.error = \"Zero buffer length\";\r\n            return -1;\r\n        }\r\n        if (intBuffer[0] === 0xFF) {\r\n            this.error = \"Length block 0xFF is reserved by standard\";\r\n            return -1;\r\n        }\r\n        this.isIndefiniteForm = intBuffer[0] === 0x80;\r\n        if (this.isIndefiniteForm) {\r\n            this.blockLength = 1;\r\n            return (inputOffset + this.blockLength);\r\n        }\r\n        this.longFormUsed = !!(intBuffer[0] & 0x80);\r\n        if (this.longFormUsed === false) {\r\n            this.length = (intBuffer[0]);\r\n            this.blockLength = 1;\r\n            return (inputOffset + this.blockLength);\r\n        }\r\n        const count = intBuffer[0] & 0x7F;\r\n        if (count > 8) {\r\n            this.error = \"Too big integer\";\r\n            return -1;\r\n        }\r\n        if ((count + 1) > intBuffer.length) {\r\n            this.error = \"End of input reached before message was fully decoded\";\r\n            return -1;\r\n        }\r\n        const lenOffset = inputOffset + 1;\r\n        const lengthBufferView = view.subarray(lenOffset, lenOffset + count);\r\n        if (lengthBufferView[count - 1] === 0x00)\r\n            this.warnings.push(\"Needlessly long encoded length\");\r\n        this.length = pvutils.utilFromBase(lengthBufferView, 8);\r\n        if (this.longFormUsed && (this.length <= 127))\r\n            this.warnings.push(\"Unnecessary usage of long length form\");\r\n        this.blockLength = count + 1;\r\n        return (inputOffset + this.blockLength);\r\n    }\r\n    toBER(sizeOnly = false) {\r\n        let retBuf;\r\n        let retView;\r\n        if (this.length > 127)\r\n            this.longFormUsed = true;\r\n        if (this.isIndefiniteForm) {\r\n            retBuf = new ArrayBuffer(1);\r\n            if (sizeOnly === false) {\r\n                retView = new Uint8Array(retBuf);\r\n                retView[0] = 0x80;\r\n            }\r\n            return retBuf;\r\n        }\r\n        if (this.longFormUsed) {\r\n            const encodedBuf = pvutils.utilToBase(this.length, 8);\r\n            if (encodedBuf.byteLength > 127) {\r\n                this.error = \"Too big length\";\r\n                return (EMPTY_BUFFER);\r\n            }\r\n            retBuf = new ArrayBuffer(encodedBuf.byteLength + 1);\r\n            if (sizeOnly)\r\n                return retBuf;\r\n            const encodedView = new Uint8Array(encodedBuf);\r\n            retView = new Uint8Array(retBuf);\r\n            retView[0] = encodedBuf.byteLength | 0x80;\r\n            for (let i = 0; i < encodedBuf.byteLength; i++)\r\n                retView[i + 1] = encodedView[i];\r\n            return retBuf;\r\n        }\r\n        retBuf = new ArrayBuffer(1);\r\n        if (sizeOnly === false) {\r\n            retView = new Uint8Array(retBuf);\r\n            retView[0] = this.length;\r\n        }\r\n        return retBuf;\r\n    }\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            isIndefiniteForm: this.isIndefiniteForm,\r\n            longFormUsed: this.longFormUsed,\r\n            length: this.length,\r\n        };\r\n    }\r\n}\r\nLocalLengthBlock.NAME = \"lengthBlock\";\n\nconst typeStore = {};\n\nclass BaseBlock extends LocalBaseBlock {\r\n    constructor({ name = EMPTY_STRING, optional = false, primitiveSchema, ...parameters } = {}, valueBlockType) {\r\n        super(parameters);\r\n        this.name = name;\r\n        this.optional = optional;\r\n        if (primitiveSchema) {\r\n            this.primitiveSchema = primitiveSchema;\r\n        }\r\n        this.idBlock = new LocalIdentificationBlock(parameters);\r\n        this.lenBlock = new LocalLengthBlock(parameters);\r\n        this.valueBlock = valueBlockType ? new valueBlockType(parameters) : new ValueBlock(parameters);\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        const resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm) ? inputLength : this.lenBlock.length);\r\n        if (resultOffset === -1) {\r\n            this.error = this.valueBlock.error;\r\n            return resultOffset;\r\n        }\r\n        if (!this.idBlock.error.length)\r\n            this.blockLength += this.idBlock.blockLength;\r\n        if (!this.lenBlock.error.length)\r\n            this.blockLength += this.lenBlock.blockLength;\r\n        if (!this.valueBlock.error.length)\r\n            this.blockLength += this.valueBlock.blockLength;\r\n        return resultOffset;\r\n    }\r\n    toBER(sizeOnly, writer) {\r\n        const _writer = writer || new ViewWriter();\r\n        if (!writer) {\r\n            prepareIndefiniteForm(this);\r\n        }\r\n        const idBlockBuf = this.idBlock.toBER(sizeOnly);\r\n        _writer.write(idBlockBuf);\r\n        if (this.lenBlock.isIndefiniteForm) {\r\n            _writer.write(new Uint8Array([0x80]).buffer);\r\n            this.valueBlock.toBER(sizeOnly, _writer);\r\n            _writer.write(new ArrayBuffer(2));\r\n        }\r\n        else {\r\n            const valueBlockBuf = this.valueBlock.toBER(sizeOnly);\r\n            this.lenBlock.length = valueBlockBuf.byteLength;\r\n            const lenBlockBuf = this.lenBlock.toBER(sizeOnly);\r\n            _writer.write(lenBlockBuf);\r\n            _writer.write(valueBlockBuf);\r\n        }\r\n        if (!writer) {\r\n            return _writer.final();\r\n        }\r\n        return EMPTY_BUFFER;\r\n    }\r\n    toJSON() {\r\n        const object = {\r\n            ...super.toJSON(),\r\n            idBlock: this.idBlock.toJSON(),\r\n            lenBlock: this.lenBlock.toJSON(),\r\n            valueBlock: this.valueBlock.toJSON(),\r\n            name: this.name,\r\n            optional: this.optional,\r\n        };\r\n        if (this.primitiveSchema)\r\n            object.primitiveSchema = this.primitiveSchema.toJSON();\r\n        return object;\r\n    }\r\n    toString(encoding = \"ascii\") {\r\n        if (encoding === \"ascii\") {\r\n            return this.onAsciiEncoding();\r\n        }\r\n        return pvtsutils.Convert.ToHex(this.toBER());\r\n    }\r\n    onAsciiEncoding() {\r\n        return `${this.constructor.NAME} : ${pvtsutils.Convert.ToHex(this.valueBlock.valueBeforeDecodeView)}`;\r\n    }\r\n    isEqual(other) {\r\n        if (this === other) {\r\n            return true;\r\n        }\r\n        if (!(other instanceof this.constructor)) {\r\n            return false;\r\n        }\r\n        const thisRaw = this.toBER();\r\n        const otherRaw = other.toBER();\r\n        return pvutils.isEqualBuffer(thisRaw, otherRaw);\r\n    }\r\n}\r\nBaseBlock.NAME = \"BaseBlock\";\r\nfunction prepareIndefiniteForm(baseBlock) {\r\n    if (baseBlock instanceof typeStore.Constructed) {\r\n        for (const value of baseBlock.valueBlock.value) {\r\n            if (prepareIndefiniteForm(value)) {\r\n                baseBlock.lenBlock.isIndefiniteForm = true;\r\n            }\r\n        }\r\n    }\r\n    return !!baseBlock.lenBlock.isIndefiniteForm;\r\n}\n\nclass BaseStringBlock extends BaseBlock {\r\n    constructor({ value = EMPTY_STRING, ...parameters } = {}, stringValueBlockType) {\r\n        super(parameters, stringValueBlockType);\r\n        if (value) {\r\n            this.fromString(value);\r\n        }\r\n    }\r\n    getValue() {\r\n        return this.valueBlock.value;\r\n    }\r\n    setValue(value) {\r\n        this.valueBlock.value = value;\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        const resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm) ? inputLength : this.lenBlock.length);\r\n        if (resultOffset === -1) {\r\n            this.error = this.valueBlock.error;\r\n            return resultOffset;\r\n        }\r\n        this.fromBuffer(this.valueBlock.valueHexView);\r\n        if (!this.idBlock.error.length)\r\n            this.blockLength += this.idBlock.blockLength;\r\n        if (!this.lenBlock.error.length)\r\n            this.blockLength += this.lenBlock.blockLength;\r\n        if (!this.valueBlock.error.length)\r\n            this.blockLength += this.valueBlock.blockLength;\r\n        return resultOffset;\r\n    }\r\n    onAsciiEncoding() {\r\n        return `${this.constructor.NAME} : '${this.valueBlock.value}'`;\r\n    }\r\n}\r\nBaseStringBlock.NAME = \"BaseStringBlock\";\n\nclass LocalPrimitiveValueBlock extends HexBlock(ValueBlock) {\r\n    constructor({ isHexOnly = true, ...parameters } = {}) {\r\n        super(parameters);\r\n        this.isHexOnly = isHexOnly;\r\n    }\r\n}\r\nLocalPrimitiveValueBlock.NAME = \"PrimitiveValueBlock\";\n\nvar _a$w;\r\nclass Primitive extends BaseBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters, LocalPrimitiveValueBlock);\r\n        this.idBlock.isConstructed = false;\r\n    }\r\n}\r\n_a$w = Primitive;\r\n(() => {\r\n    typeStore.Primitive = _a$w;\r\n})();\r\nPrimitive.NAME = \"PRIMITIVE\";\n\nfunction localChangeType(inputObject, newType) {\r\n    if (inputObject instanceof newType) {\r\n        return inputObject;\r\n    }\r\n    const newObject = new newType();\r\n    newObject.idBlock = inputObject.idBlock;\r\n    newObject.lenBlock = inputObject.lenBlock;\r\n    newObject.warnings = inputObject.warnings;\r\n    newObject.valueBeforeDecodeView = inputObject.valueBeforeDecodeView;\r\n    return newObject;\r\n}\r\nfunction localFromBER(inputBuffer, inputOffset = 0, inputLength = inputBuffer.length) {\r\n    const incomingOffset = inputOffset;\r\n    let returnObject = new BaseBlock({}, ValueBlock);\r\n    const baseBlock = new LocalBaseBlock();\r\n    if (!checkBufferParams(baseBlock, inputBuffer, inputOffset, inputLength)) {\r\n        returnObject.error = baseBlock.error;\r\n        return {\r\n            offset: -1,\r\n            result: returnObject\r\n        };\r\n    }\r\n    const intBuffer = inputBuffer.subarray(inputOffset, inputOffset + inputLength);\r\n    if (!intBuffer.length) {\r\n        returnObject.error = \"Zero buffer length\";\r\n        return {\r\n            offset: -1,\r\n            result: returnObject\r\n        };\r\n    }\r\n    let resultOffset = returnObject.idBlock.fromBER(inputBuffer, inputOffset, inputLength);\r\n    if (returnObject.idBlock.warnings.length) {\r\n        returnObject.warnings.concat(returnObject.idBlock.warnings);\r\n    }\r\n    if (resultOffset === -1) {\r\n        returnObject.error = returnObject.idBlock.error;\r\n        return {\r\n            offset: -1,\r\n            result: returnObject\r\n        };\r\n    }\r\n    inputOffset = resultOffset;\r\n    inputLength -= returnObject.idBlock.blockLength;\r\n    resultOffset = returnObject.lenBlock.fromBER(inputBuffer, inputOffset, inputLength);\r\n    if (returnObject.lenBlock.warnings.length) {\r\n        returnObject.warnings.concat(returnObject.lenBlock.warnings);\r\n    }\r\n    if (resultOffset === -1) {\r\n        returnObject.error = returnObject.lenBlock.error;\r\n        return {\r\n            offset: -1,\r\n            result: returnObject\r\n        };\r\n    }\r\n    inputOffset = resultOffset;\r\n    inputLength -= returnObject.lenBlock.blockLength;\r\n    if (!returnObject.idBlock.isConstructed &&\r\n        returnObject.lenBlock.isIndefiniteForm) {\r\n        returnObject.error = \"Indefinite length form used for primitive encoding form\";\r\n        return {\r\n            offset: -1,\r\n            result: returnObject\r\n        };\r\n    }\r\n    let newASN1Type = BaseBlock;\r\n    switch (returnObject.idBlock.tagClass) {\r\n        case 1:\r\n            if ((returnObject.idBlock.tagNumber >= 37) &&\r\n                (returnObject.idBlock.isHexOnly === false)) {\r\n                returnObject.error = \"UNIVERSAL 37 and upper tags are reserved by ASN.1 standard\";\r\n                return {\r\n                    offset: -1,\r\n                    result: returnObject\r\n                };\r\n            }\r\n            switch (returnObject.idBlock.tagNumber) {\r\n                case 0:\r\n                    if ((returnObject.idBlock.isConstructed) &&\r\n                        (returnObject.lenBlock.length > 0)) {\r\n                        returnObject.error = \"Type [UNIVERSAL 0] is reserved\";\r\n                        return {\r\n                            offset: -1,\r\n                            result: returnObject\r\n                        };\r\n                    }\r\n                    newASN1Type = typeStore.EndOfContent;\r\n                    break;\r\n                case 1:\r\n                    newASN1Type = typeStore.Boolean;\r\n                    break;\r\n                case 2:\r\n                    newASN1Type = typeStore.Integer;\r\n                    break;\r\n                case 3:\r\n                    newASN1Type = typeStore.BitString;\r\n                    break;\r\n                case 4:\r\n                    newASN1Type = typeStore.OctetString;\r\n                    break;\r\n                case 5:\r\n                    newASN1Type = typeStore.Null;\r\n                    break;\r\n                case 6:\r\n                    newASN1Type = typeStore.ObjectIdentifier;\r\n                    break;\r\n                case 10:\r\n                    newASN1Type = typeStore.Enumerated;\r\n                    break;\r\n                case 12:\r\n                    newASN1Type = typeStore.Utf8String;\r\n                    break;\r\n                case 13:\r\n                    newASN1Type = typeStore.RelativeObjectIdentifier;\r\n                    break;\r\n                case 14:\r\n                    newASN1Type = typeStore.TIME;\r\n                    break;\r\n                case 15:\r\n                    returnObject.error = \"[UNIVERSAL 15] is reserved by ASN.1 standard\";\r\n                    return {\r\n                        offset: -1,\r\n                        result: returnObject\r\n                    };\r\n                case 16:\r\n                    newASN1Type = typeStore.Sequence;\r\n                    break;\r\n                case 17:\r\n                    newASN1Type = typeStore.Set;\r\n                    break;\r\n                case 18:\r\n                    newASN1Type = typeStore.NumericString;\r\n                    break;\r\n                case 19:\r\n                    newASN1Type = typeStore.PrintableString;\r\n                    break;\r\n                case 20:\r\n                    newASN1Type = typeStore.TeletexString;\r\n                    break;\r\n                case 21:\r\n                    newASN1Type = typeStore.VideotexString;\r\n                    break;\r\n                case 22:\r\n                    newASN1Type = typeStore.IA5String;\r\n                    break;\r\n                case 23:\r\n                    newASN1Type = typeStore.UTCTime;\r\n                    break;\r\n                case 24:\r\n                    newASN1Type = typeStore.GeneralizedTime;\r\n                    break;\r\n                case 25:\r\n                    newASN1Type = typeStore.GraphicString;\r\n                    break;\r\n                case 26:\r\n                    newASN1Type = typeStore.VisibleString;\r\n                    break;\r\n                case 27:\r\n                    newASN1Type = typeStore.GeneralString;\r\n                    break;\r\n                case 28:\r\n                    newASN1Type = typeStore.UniversalString;\r\n                    break;\r\n                case 29:\r\n                    newASN1Type = typeStore.CharacterString;\r\n                    break;\r\n                case 30:\r\n                    newASN1Type = typeStore.BmpString;\r\n                    break;\r\n                case 31:\r\n                    newASN1Type = typeStore.DATE;\r\n                    break;\r\n                case 32:\r\n                    newASN1Type = typeStore.TimeOfDay;\r\n                    break;\r\n                case 33:\r\n                    newASN1Type = typeStore.DateTime;\r\n                    break;\r\n                case 34:\r\n                    newASN1Type = typeStore.Duration;\r\n                    break;\r\n                default: {\r\n                    const newObject = returnObject.idBlock.isConstructed\r\n                        ? new typeStore.Constructed()\r\n                        : new typeStore.Primitive();\r\n                    newObject.idBlock = returnObject.idBlock;\r\n                    newObject.lenBlock = returnObject.lenBlock;\r\n                    newObject.warnings = returnObject.warnings;\r\n                    returnObject = newObject;\r\n                }\r\n            }\r\n            break;\r\n        case 2:\r\n        case 3:\r\n        case 4:\r\n        default: {\r\n            newASN1Type = returnObject.idBlock.isConstructed\r\n                ? typeStore.Constructed\r\n                : typeStore.Primitive;\r\n        }\r\n    }\r\n    returnObject = localChangeType(returnObject, newASN1Type);\r\n    resultOffset = returnObject.fromBER(inputBuffer, inputOffset, returnObject.lenBlock.isIndefiniteForm ? inputLength : returnObject.lenBlock.length);\r\n    returnObject.valueBeforeDecodeView = inputBuffer.subarray(incomingOffset, incomingOffset + returnObject.blockLength);\r\n    return {\r\n        offset: resultOffset,\r\n        result: returnObject\r\n    };\r\n}\r\nfunction fromBER(inputBuffer) {\r\n    if (!inputBuffer.byteLength) {\r\n        const result = new BaseBlock({}, ValueBlock);\r\n        result.error = \"Input buffer has zero length\";\r\n        return {\r\n            offset: -1,\r\n            result\r\n        };\r\n    }\r\n    return localFromBER(pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer).slice(), 0, inputBuffer.byteLength);\r\n}\n\nfunction checkLen(indefiniteLength, length) {\r\n    if (indefiniteLength) {\r\n        return 1;\r\n    }\r\n    return length;\r\n}\r\nclass LocalConstructedValueBlock extends ValueBlock {\r\n    constructor({ value = [], isIndefiniteForm = false, ...parameters } = {}) {\r\n        super(parameters);\r\n        this.value = value;\r\n        this.isIndefiniteForm = isIndefiniteForm;\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        const view = pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer);\r\n        if (!checkBufferParams(this, view, inputOffset, inputLength)) {\r\n            return -1;\r\n        }\r\n        this.valueBeforeDecodeView = view.subarray(inputOffset, inputOffset + inputLength);\r\n        if (this.valueBeforeDecodeView.length === 0) {\r\n            this.warnings.push(\"Zero buffer length\");\r\n            return inputOffset;\r\n        }\r\n        let currentOffset = inputOffset;\r\n        while (checkLen(this.isIndefiniteForm, inputLength) > 0) {\r\n            const returnObject = localFromBER(view, currentOffset, inputLength);\r\n            if (returnObject.offset === -1) {\r\n                this.error = returnObject.result.error;\r\n                this.warnings.concat(returnObject.result.warnings);\r\n                return -1;\r\n            }\r\n            currentOffset = returnObject.offset;\r\n            this.blockLength += returnObject.result.blockLength;\r\n            inputLength -= returnObject.result.blockLength;\r\n            this.value.push(returnObject.result);\r\n            if (this.isIndefiniteForm && returnObject.result.constructor.NAME === END_OF_CONTENT_NAME) {\r\n                break;\r\n            }\r\n        }\r\n        if (this.isIndefiniteForm) {\r\n            if (this.value[this.value.length - 1].constructor.NAME === END_OF_CONTENT_NAME) {\r\n                this.value.pop();\r\n            }\r\n            else {\r\n                this.warnings.push(\"No EndOfContent block encoded\");\r\n            }\r\n        }\r\n        return currentOffset;\r\n    }\r\n    toBER(sizeOnly, writer) {\r\n        const _writer = writer || new ViewWriter();\r\n        for (let i = 0; i < this.value.length; i++) {\r\n            this.value[i].toBER(sizeOnly, _writer);\r\n        }\r\n        if (!writer) {\r\n            return _writer.final();\r\n        }\r\n        return EMPTY_BUFFER;\r\n    }\r\n    toJSON() {\r\n        const object = {\r\n            ...super.toJSON(),\r\n            isIndefiniteForm: this.isIndefiniteForm,\r\n            value: [],\r\n        };\r\n        for (const value of this.value) {\r\n            object.value.push(value.toJSON());\r\n        }\r\n        return object;\r\n    }\r\n}\r\nLocalConstructedValueBlock.NAME = \"ConstructedValueBlock\";\n\nvar _a$v;\r\nclass Constructed extends BaseBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters, LocalConstructedValueBlock);\r\n        this.idBlock.isConstructed = true;\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        this.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;\r\n        const resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm) ? inputLength : this.lenBlock.length);\r\n        if (resultOffset === -1) {\r\n            this.error = this.valueBlock.error;\r\n            return resultOffset;\r\n        }\r\n        if (!this.idBlock.error.length)\r\n            this.blockLength += this.idBlock.blockLength;\r\n        if (!this.lenBlock.error.length)\r\n            this.blockLength += this.lenBlock.blockLength;\r\n        if (!this.valueBlock.error.length)\r\n            this.blockLength += this.valueBlock.blockLength;\r\n        return resultOffset;\r\n    }\r\n    onAsciiEncoding() {\r\n        const values = [];\r\n        for (const value of this.valueBlock.value) {\r\n            values.push(value.toString(\"ascii\").split(\"\\n\").map(o => `  ${o}`).join(\"\\n\"));\r\n        }\r\n        const blockName = this.idBlock.tagClass === 3\r\n            ? `[${this.idBlock.tagNumber}]`\r\n            : this.constructor.NAME;\r\n        return values.length\r\n            ? `${blockName} :\\n${values.join(\"\\n\")}`\r\n            : `${blockName} :`;\r\n    }\r\n}\r\n_a$v = Constructed;\r\n(() => {\r\n    typeStore.Constructed = _a$v;\r\n})();\r\nConstructed.NAME = \"CONSTRUCTED\";\n\nclass LocalEndOfContentValueBlock extends ValueBlock {\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        return inputOffset;\r\n    }\r\n    toBER(sizeOnly) {\r\n        return EMPTY_BUFFER;\r\n    }\r\n}\r\nLocalEndOfContentValueBlock.override = \"EndOfContentValueBlock\";\n\nvar _a$u;\r\nclass EndOfContent extends BaseBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters, LocalEndOfContentValueBlock);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 0;\r\n    }\r\n}\r\n_a$u = EndOfContent;\r\n(() => {\r\n    typeStore.EndOfContent = _a$u;\r\n})();\r\nEndOfContent.NAME = END_OF_CONTENT_NAME;\n\nvar _a$t;\r\nclass Null extends BaseBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters, ValueBlock);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 5;\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        if (this.lenBlock.length > 0)\r\n            this.warnings.push(\"Non-zero length of value block for Null type\");\r\n        if (!this.idBlock.error.length)\r\n            this.blockLength += this.idBlock.blockLength;\r\n        if (!this.lenBlock.error.length)\r\n            this.blockLength += this.lenBlock.blockLength;\r\n        this.blockLength += inputLength;\r\n        if ((inputOffset + inputLength) > inputBuffer.byteLength) {\r\n            this.error = \"End of input reached before message was fully decoded (inconsistent offset and length values)\";\r\n            return -1;\r\n        }\r\n        return (inputOffset + inputLength);\r\n    }\r\n    toBER(sizeOnly, writer) {\r\n        const retBuf = new ArrayBuffer(2);\r\n        if (!sizeOnly) {\r\n            const retView = new Uint8Array(retBuf);\r\n            retView[0] = 0x05;\r\n            retView[1] = 0x00;\r\n        }\r\n        if (writer) {\r\n            writer.write(retBuf);\r\n        }\r\n        return retBuf;\r\n    }\r\n    onAsciiEncoding() {\r\n        return `${this.constructor.NAME}`;\r\n    }\r\n}\r\n_a$t = Null;\r\n(() => {\r\n    typeStore.Null = _a$t;\r\n})();\r\nNull.NAME = \"NULL\";\n\nclass LocalBooleanValueBlock extends HexBlock(ValueBlock) {\r\n    constructor({ value, ...parameters } = {}) {\r\n        super(parameters);\r\n        if (parameters.valueHex) {\r\n            this.valueHexView = pvtsutils.BufferSourceConverter.toUint8Array(parameters.valueHex);\r\n        }\r\n        else {\r\n            this.valueHexView = new Uint8Array(1);\r\n        }\r\n        if (value) {\r\n            this.value = value;\r\n        }\r\n    }\r\n    get value() {\r\n        for (const octet of this.valueHexView) {\r\n            if (octet > 0) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    set value(value) {\r\n        this.valueHexView[0] = value ? 0xFF : 0x00;\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        const inputView = pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer);\r\n        if (!checkBufferParams(this, inputView, inputOffset, inputLength)) {\r\n            return -1;\r\n        }\r\n        this.valueHexView = inputView.subarray(inputOffset, inputOffset + inputLength);\r\n        if (inputLength > 1)\r\n            this.warnings.push(\"Boolean value encoded in more then 1 octet\");\r\n        this.isHexOnly = true;\r\n        pvutils.utilDecodeTC.call(this);\r\n        this.blockLength = inputLength;\r\n        return (inputOffset + inputLength);\r\n    }\r\n    toBER() {\r\n        return this.valueHexView.slice();\r\n    }\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            value: this.value,\r\n        };\r\n    }\r\n}\r\nLocalBooleanValueBlock.NAME = \"BooleanValueBlock\";\n\nvar _a$s;\r\nclass Boolean extends BaseBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters, LocalBooleanValueBlock);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 1;\r\n    }\r\n    getValue() {\r\n        return this.valueBlock.value;\r\n    }\r\n    setValue(value) {\r\n        this.valueBlock.value = value;\r\n    }\r\n    onAsciiEncoding() {\r\n        return `${this.constructor.NAME} : ${this.getValue}`;\r\n    }\r\n}\r\n_a$s = Boolean;\r\n(() => {\r\n    typeStore.Boolean = _a$s;\r\n})();\r\nBoolean.NAME = \"BOOLEAN\";\n\nclass LocalOctetStringValueBlock extends HexBlock(LocalConstructedValueBlock) {\r\n    constructor({ isConstructed = false, ...parameters } = {}) {\r\n        super(parameters);\r\n        this.isConstructed = isConstructed;\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        let resultOffset = 0;\r\n        if (this.isConstructed) {\r\n            this.isHexOnly = false;\r\n            resultOffset = LocalConstructedValueBlock.prototype.fromBER.call(this, inputBuffer, inputOffset, inputLength);\r\n            if (resultOffset === -1)\r\n                return resultOffset;\r\n            for (let i = 0; i < this.value.length; i++) {\r\n                const currentBlockName = this.value[i].constructor.NAME;\r\n                if (currentBlockName === END_OF_CONTENT_NAME) {\r\n                    if (this.isIndefiniteForm)\r\n                        break;\r\n                    else {\r\n                        this.error = \"EndOfContent is unexpected, OCTET STRING may consists of OCTET STRINGs only\";\r\n                        return -1;\r\n                    }\r\n                }\r\n                if (currentBlockName !== OCTET_STRING_NAME) {\r\n                    this.error = \"OCTET STRING may consists of OCTET STRINGs only\";\r\n                    return -1;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this.isHexOnly = true;\r\n            resultOffset = super.fromBER(inputBuffer, inputOffset, inputLength);\r\n            this.blockLength = inputLength;\r\n        }\r\n        return resultOffset;\r\n    }\r\n    toBER(sizeOnly, writer) {\r\n        if (this.isConstructed)\r\n            return LocalConstructedValueBlock.prototype.toBER.call(this, sizeOnly, writer);\r\n        return sizeOnly\r\n            ? new ArrayBuffer(this.valueHexView.byteLength)\r\n            : this.valueHexView.slice().buffer;\r\n    }\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            isConstructed: this.isConstructed,\r\n        };\r\n    }\r\n}\r\nLocalOctetStringValueBlock.NAME = \"OctetStringValueBlock\";\n\nvar _a$r;\r\nclass OctetString extends BaseBlock {\r\n    constructor({ idBlock = {}, lenBlock = {}, ...parameters } = {}) {\r\n        var _b, _c;\r\n        (_b = parameters.isConstructed) !== null && _b !== void 0 ? _b : (parameters.isConstructed = !!((_c = parameters.value) === null || _c === void 0 ? void 0 : _c.length));\r\n        super({\r\n            idBlock: {\r\n                isConstructed: parameters.isConstructed,\r\n                ...idBlock,\r\n            },\r\n            lenBlock: {\r\n                ...lenBlock,\r\n                isIndefiniteForm: !!parameters.isIndefiniteForm,\r\n            },\r\n            ...parameters,\r\n        }, LocalOctetStringValueBlock);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 4;\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        this.valueBlock.isConstructed = this.idBlock.isConstructed;\r\n        this.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;\r\n        if (inputLength === 0) {\r\n            if (this.idBlock.error.length === 0)\r\n                this.blockLength += this.idBlock.blockLength;\r\n            if (this.lenBlock.error.length === 0)\r\n                this.blockLength += this.lenBlock.blockLength;\r\n            return inputOffset;\r\n        }\r\n        if (!this.valueBlock.isConstructed) {\r\n            const view = inputBuffer instanceof ArrayBuffer ? new Uint8Array(inputBuffer) : inputBuffer;\r\n            const buf = view.subarray(inputOffset, inputOffset + inputLength);\r\n            try {\r\n                if (buf.byteLength) {\r\n                    const asn = localFromBER(buf, 0, buf.byteLength);\r\n                    if (asn.offset !== -1 && asn.offset === inputLength) {\r\n                        this.valueBlock.value = [asn.result];\r\n                    }\r\n                }\r\n            }\r\n            catch (e) {\r\n            }\r\n        }\r\n        return super.fromBER(inputBuffer, inputOffset, inputLength);\r\n    }\r\n    onAsciiEncoding() {\r\n        if (this.valueBlock.isConstructed || (this.valueBlock.value && this.valueBlock.value.length)) {\r\n            return Constructed.prototype.onAsciiEncoding.call(this);\r\n        }\r\n        return `${this.constructor.NAME} : ${pvtsutils.Convert.ToHex(this.valueBlock.valueHexView)}`;\r\n    }\r\n    getValue() {\r\n        if (!this.idBlock.isConstructed) {\r\n            return this.valueBlock.valueHexView.slice().buffer;\r\n        }\r\n        const array = [];\r\n        for (const content of this.valueBlock.value) {\r\n            if (content instanceof OctetString) {\r\n                array.push(content.valueBlock.valueHexView);\r\n            }\r\n        }\r\n        return pvtsutils.BufferSourceConverter.concat(array);\r\n    }\r\n}\r\n_a$r = OctetString;\r\n(() => {\r\n    typeStore.OctetString = _a$r;\r\n})();\r\nOctetString.NAME = OCTET_STRING_NAME;\n\nclass LocalBitStringValueBlock extends HexBlock(LocalConstructedValueBlock) {\r\n    constructor({ unusedBits = 0, isConstructed = false, ...parameters } = {}) {\r\n        super(parameters);\r\n        this.unusedBits = unusedBits;\r\n        this.isConstructed = isConstructed;\r\n        this.blockLength = this.valueHexView.byteLength;\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        if (!inputLength) {\r\n            return inputOffset;\r\n        }\r\n        let resultOffset = -1;\r\n        if (this.isConstructed) {\r\n            resultOffset = LocalConstructedValueBlock.prototype.fromBER.call(this, inputBuffer, inputOffset, inputLength);\r\n            if (resultOffset === -1)\r\n                return resultOffset;\r\n            for (const value of this.value) {\r\n                const currentBlockName = value.constructor.NAME;\r\n                if (currentBlockName === END_OF_CONTENT_NAME) {\r\n                    if (this.isIndefiniteForm)\r\n                        break;\r\n                    else {\r\n                        this.error = \"EndOfContent is unexpected, BIT STRING may consists of BIT STRINGs only\";\r\n                        return -1;\r\n                    }\r\n                }\r\n                if (currentBlockName !== BIT_STRING_NAME) {\r\n                    this.error = \"BIT STRING may consists of BIT STRINGs only\";\r\n                    return -1;\r\n                }\r\n                const valueBlock = value.valueBlock;\r\n                if ((this.unusedBits > 0) && (valueBlock.unusedBits > 0)) {\r\n                    this.error = \"Using of \\\"unused bits\\\" inside constructive BIT STRING allowed for least one only\";\r\n                    return -1;\r\n                }\r\n                this.unusedBits = valueBlock.unusedBits;\r\n            }\r\n            return resultOffset;\r\n        }\r\n        const inputView = pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer);\r\n        if (!checkBufferParams(this, inputView, inputOffset, inputLength)) {\r\n            return -1;\r\n        }\r\n        const intBuffer = inputView.subarray(inputOffset, inputOffset + inputLength);\r\n        this.unusedBits = intBuffer[0];\r\n        if (this.unusedBits > 7) {\r\n            this.error = \"Unused bits for BitString must be in range 0-7\";\r\n            return -1;\r\n        }\r\n        if (!this.unusedBits) {\r\n            const buf = intBuffer.subarray(1);\r\n            try {\r\n                if (buf.byteLength) {\r\n                    const asn = localFromBER(buf, 0, buf.byteLength);\r\n                    if (asn.offset !== -1 && asn.offset === (inputLength - 1)) {\r\n                        this.value = [asn.result];\r\n                    }\r\n                }\r\n            }\r\n            catch (e) {\r\n            }\r\n        }\r\n        this.valueHexView = intBuffer.subarray(1);\r\n        this.blockLength = intBuffer.length;\r\n        return (inputOffset + inputLength);\r\n    }\r\n    toBER(sizeOnly, writer) {\r\n        if (this.isConstructed) {\r\n            return LocalConstructedValueBlock.prototype.toBER.call(this, sizeOnly, writer);\r\n        }\r\n        if (sizeOnly) {\r\n            return new ArrayBuffer(this.valueHexView.byteLength + 1);\r\n        }\r\n        if (!this.valueHexView.byteLength) {\r\n            return EMPTY_BUFFER;\r\n        }\r\n        const retView = new Uint8Array(this.valueHexView.length + 1);\r\n        retView[0] = this.unusedBits;\r\n        retView.set(this.valueHexView, 1);\r\n        return retView.buffer;\r\n    }\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            unusedBits: this.unusedBits,\r\n            isConstructed: this.isConstructed,\r\n        };\r\n    }\r\n}\r\nLocalBitStringValueBlock.NAME = \"BitStringValueBlock\";\n\nvar _a$q;\r\nclass BitString extends BaseBlock {\r\n    constructor({ idBlock = {}, lenBlock = {}, ...parameters } = {}) {\r\n        var _b, _c;\r\n        (_b = parameters.isConstructed) !== null && _b !== void 0 ? _b : (parameters.isConstructed = !!((_c = parameters.value) === null || _c === void 0 ? void 0 : _c.length));\r\n        super({\r\n            idBlock: {\r\n                isConstructed: parameters.isConstructed,\r\n                ...idBlock,\r\n            },\r\n            lenBlock: {\r\n                ...lenBlock,\r\n                isIndefiniteForm: !!parameters.isIndefiniteForm,\r\n            },\r\n            ...parameters,\r\n        }, LocalBitStringValueBlock);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 3;\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        this.valueBlock.isConstructed = this.idBlock.isConstructed;\r\n        this.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;\r\n        return super.fromBER(inputBuffer, inputOffset, inputLength);\r\n    }\r\n    onAsciiEncoding() {\r\n        if (this.valueBlock.isConstructed || (this.valueBlock.value && this.valueBlock.value.length)) {\r\n            return Constructed.prototype.onAsciiEncoding.call(this);\r\n        }\r\n        else {\r\n            const bits = [];\r\n            const valueHex = this.valueBlock.valueHexView;\r\n            for (const byte of valueHex) {\r\n                bits.push(byte.toString(2).padStart(8, \"0\"));\r\n            }\r\n            const bitsStr = bits.join(\"\");\r\n            return `${this.constructor.NAME} : ${bitsStr.substring(0, bitsStr.length - this.valueBlock.unusedBits)}`;\r\n        }\r\n    }\r\n}\r\n_a$q = BitString;\r\n(() => {\r\n    typeStore.BitString = _a$q;\r\n})();\r\nBitString.NAME = BIT_STRING_NAME;\n\nvar _a$p;\r\nfunction viewAdd(first, second) {\r\n    const c = new Uint8Array([0]);\r\n    const firstView = new Uint8Array(first);\r\n    const secondView = new Uint8Array(second);\r\n    let firstViewCopy = firstView.slice(0);\r\n    const firstViewCopyLength = firstViewCopy.length - 1;\r\n    const secondViewCopy = secondView.slice(0);\r\n    const secondViewCopyLength = secondViewCopy.length - 1;\r\n    let value = 0;\r\n    const max = (secondViewCopyLength < firstViewCopyLength) ? firstViewCopyLength : secondViewCopyLength;\r\n    let counter = 0;\r\n    for (let i = max; i >= 0; i--, counter++) {\r\n        switch (true) {\r\n            case (counter < secondViewCopy.length):\r\n                value = firstViewCopy[firstViewCopyLength - counter] + secondViewCopy[secondViewCopyLength - counter] + c[0];\r\n                break;\r\n            default:\r\n                value = firstViewCopy[firstViewCopyLength - counter] + c[0];\r\n        }\r\n        c[0] = value / 10;\r\n        switch (true) {\r\n            case (counter >= firstViewCopy.length):\r\n                firstViewCopy = pvutils.utilConcatView(new Uint8Array([value % 10]), firstViewCopy);\r\n                break;\r\n            default:\r\n                firstViewCopy[firstViewCopyLength - counter] = value % 10;\r\n        }\r\n    }\r\n    if (c[0] > 0)\r\n        firstViewCopy = pvutils.utilConcatView(c, firstViewCopy);\r\n    return firstViewCopy;\r\n}\r\nfunction power2(n) {\r\n    if (n >= powers2.length) {\r\n        for (let p = powers2.length; p <= n; p++) {\r\n            const c = new Uint8Array([0]);\r\n            let digits = (powers2[p - 1]).slice(0);\r\n            for (let i = (digits.length - 1); i >= 0; i--) {\r\n                const newValue = new Uint8Array([(digits[i] << 1) + c[0]]);\r\n                c[0] = newValue[0] / 10;\r\n                digits[i] = newValue[0] % 10;\r\n            }\r\n            if (c[0] > 0)\r\n                digits = pvutils.utilConcatView(c, digits);\r\n            powers2.push(digits);\r\n        }\r\n    }\r\n    return powers2[n];\r\n}\r\nfunction viewSub(first, second) {\r\n    let b = 0;\r\n    const firstView = new Uint8Array(first);\r\n    const secondView = new Uint8Array(second);\r\n    const firstViewCopy = firstView.slice(0);\r\n    const firstViewCopyLength = firstViewCopy.length - 1;\r\n    const secondViewCopy = secondView.slice(0);\r\n    const secondViewCopyLength = secondViewCopy.length - 1;\r\n    let value;\r\n    let counter = 0;\r\n    for (let i = secondViewCopyLength; i >= 0; i--, counter++) {\r\n        value = firstViewCopy[firstViewCopyLength - counter] - secondViewCopy[secondViewCopyLength - counter] - b;\r\n        switch (true) {\r\n            case (value < 0):\r\n                b = 1;\r\n                firstViewCopy[firstViewCopyLength - counter] = value + 10;\r\n                break;\r\n            default:\r\n                b = 0;\r\n                firstViewCopy[firstViewCopyLength - counter] = value;\r\n        }\r\n    }\r\n    if (b > 0) {\r\n        for (let i = (firstViewCopyLength - secondViewCopyLength + 1); i >= 0; i--, counter++) {\r\n            value = firstViewCopy[firstViewCopyLength - counter] - b;\r\n            if (value < 0) {\r\n                b = 1;\r\n                firstViewCopy[firstViewCopyLength - counter] = value + 10;\r\n            }\r\n            else {\r\n                b = 0;\r\n                firstViewCopy[firstViewCopyLength - counter] = value;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return firstViewCopy.slice();\r\n}\r\nclass LocalIntegerValueBlock extends HexBlock(ValueBlock) {\r\n    constructor({ value, ...parameters } = {}) {\r\n        super(parameters);\r\n        this._valueDec = 0;\r\n        if (parameters.valueHex) {\r\n            this.setValueHex();\r\n        }\r\n        if (value !== undefined) {\r\n            this.valueDec = value;\r\n        }\r\n    }\r\n    setValueHex() {\r\n        if (this.valueHexView.length >= 4) {\r\n            this.warnings.push(\"Too big Integer for decoding, hex only\");\r\n            this.isHexOnly = true;\r\n            this._valueDec = 0;\r\n        }\r\n        else {\r\n            this.isHexOnly = false;\r\n            if (this.valueHexView.length > 0) {\r\n                this._valueDec = pvutils.utilDecodeTC.call(this);\r\n            }\r\n        }\r\n    }\r\n    set valueDec(v) {\r\n        this._valueDec = v;\r\n        this.isHexOnly = false;\r\n        this.valueHexView = new Uint8Array(pvutils.utilEncodeTC(v));\r\n    }\r\n    get valueDec() {\r\n        return this._valueDec;\r\n    }\r\n    fromDER(inputBuffer, inputOffset, inputLength, expectedLength = 0) {\r\n        const offset = this.fromBER(inputBuffer, inputOffset, inputLength);\r\n        if (offset === -1)\r\n            return offset;\r\n        const view = this.valueHexView;\r\n        if ((view[0] === 0x00) && ((view[1] & 0x80) !== 0)) {\r\n            this.valueHexView = view.subarray(1);\r\n        }\r\n        else {\r\n            if (expectedLength !== 0) {\r\n                if (view.length < expectedLength) {\r\n                    if ((expectedLength - view.length) > 1)\r\n                        expectedLength = view.length + 1;\r\n                    this.valueHexView = view.subarray(expectedLength - view.length);\r\n                }\r\n            }\r\n        }\r\n        return offset;\r\n    }\r\n    toDER(sizeOnly = false) {\r\n        const view = this.valueHexView;\r\n        switch (true) {\r\n            case ((view[0] & 0x80) !== 0):\r\n                {\r\n                    const updatedView = new Uint8Array(this.valueHexView.length + 1);\r\n                    updatedView[0] = 0x00;\r\n                    updatedView.set(view, 1);\r\n                    this.valueHexView = updatedView;\r\n                }\r\n                break;\r\n            case ((view[0] === 0x00) && ((view[1] & 0x80) === 0)):\r\n                {\r\n                    this.valueHexView = this.valueHexView.subarray(1);\r\n                }\r\n                break;\r\n        }\r\n        return this.toBER(sizeOnly);\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        const resultOffset = super.fromBER(inputBuffer, inputOffset, inputLength);\r\n        if (resultOffset === -1) {\r\n            return resultOffset;\r\n        }\r\n        this.setValueHex();\r\n        return resultOffset;\r\n    }\r\n    toBER(sizeOnly) {\r\n        return sizeOnly\r\n            ? new ArrayBuffer(this.valueHexView.length)\r\n            : this.valueHexView.slice().buffer;\r\n    }\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            valueDec: this.valueDec,\r\n        };\r\n    }\r\n    toString() {\r\n        const firstBit = (this.valueHexView.length * 8) - 1;\r\n        let digits = new Uint8Array((this.valueHexView.length * 8) / 3);\r\n        let bitNumber = 0;\r\n        let currentByte;\r\n        const asn1View = this.valueHexView;\r\n        let result = \"\";\r\n        let flag = false;\r\n        for (let byteNumber = (asn1View.byteLength - 1); byteNumber >= 0; byteNumber--) {\r\n            currentByte = asn1View[byteNumber];\r\n            for (let i = 0; i < 8; i++) {\r\n                if ((currentByte & 1) === 1) {\r\n                    switch (bitNumber) {\r\n                        case firstBit:\r\n                            digits = viewSub(power2(bitNumber), digits);\r\n                            result = \"-\";\r\n                            break;\r\n                        default:\r\n                            digits = viewAdd(digits, power2(bitNumber));\r\n                    }\r\n                }\r\n                bitNumber++;\r\n                currentByte >>= 1;\r\n            }\r\n        }\r\n        for (let i = 0; i < digits.length; i++) {\r\n            if (digits[i])\r\n                flag = true;\r\n            if (flag)\r\n                result += digitsString.charAt(digits[i]);\r\n        }\r\n        if (flag === false)\r\n            result += digitsString.charAt(0);\r\n        return result;\r\n    }\r\n}\r\n_a$p = LocalIntegerValueBlock;\r\nLocalIntegerValueBlock.NAME = \"IntegerValueBlock\";\r\n(() => {\r\n    Object.defineProperty(_a$p.prototype, \"valueHex\", {\r\n        set: function (v) {\r\n            this.valueHexView = new Uint8Array(v);\r\n            this.setValueHex();\r\n        },\r\n        get: function () {\r\n            return this.valueHexView.slice().buffer;\r\n        },\r\n    });\r\n})();\n\nvar _a$o;\r\nclass Integer extends BaseBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters, LocalIntegerValueBlock);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 2;\r\n    }\r\n    toBigInt() {\r\n        assertBigInt();\r\n        return BigInt(this.valueBlock.toString());\r\n    }\r\n    static fromBigInt(value) {\r\n        assertBigInt();\r\n        const bigIntValue = BigInt(value);\r\n        const writer = new ViewWriter();\r\n        const hex = bigIntValue.toString(16).replace(/^-/, \"\");\r\n        const view = new Uint8Array(pvtsutils.Convert.FromHex(hex));\r\n        if (bigIntValue < 0) {\r\n            const first = new Uint8Array(view.length + (view[0] & 0x80 ? 1 : 0));\r\n            first[0] |= 0x80;\r\n            const firstInt = BigInt(`0x${pvtsutils.Convert.ToHex(first)}`);\r\n            const secondInt = firstInt + bigIntValue;\r\n            const second = pvtsutils.BufferSourceConverter.toUint8Array(pvtsutils.Convert.FromHex(secondInt.toString(16)));\r\n            second[0] |= 0x80;\r\n            writer.write(second);\r\n        }\r\n        else {\r\n            if (view[0] & 0x80) {\r\n                writer.write(new Uint8Array([0]));\r\n            }\r\n            writer.write(view);\r\n        }\r\n        const res = new Integer({\r\n            valueHex: writer.final(),\r\n        });\r\n        return res;\r\n    }\r\n    convertToDER() {\r\n        const integer = new Integer({ valueHex: this.valueBlock.valueHexView });\r\n        integer.valueBlock.toDER();\r\n        return integer;\r\n    }\r\n    convertFromDER() {\r\n        return new Integer({\r\n            valueHex: this.valueBlock.valueHexView[0] === 0\r\n                ? this.valueBlock.valueHexView.subarray(1)\r\n                : this.valueBlock.valueHexView,\r\n        });\r\n    }\r\n    onAsciiEncoding() {\r\n        return `${this.constructor.NAME} : ${this.valueBlock.toString()}`;\r\n    }\r\n}\r\n_a$o = Integer;\r\n(() => {\r\n    typeStore.Integer = _a$o;\r\n})();\r\nInteger.NAME = \"INTEGER\";\n\nvar _a$n;\r\nclass Enumerated extends Integer {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 10;\r\n    }\r\n}\r\n_a$n = Enumerated;\r\n(() => {\r\n    typeStore.Enumerated = _a$n;\r\n})();\r\nEnumerated.NAME = \"ENUMERATED\";\n\nclass LocalSidValueBlock extends HexBlock(ValueBlock) {\r\n    constructor({ valueDec = -1, isFirstSid = false, ...parameters } = {}) {\r\n        super(parameters);\r\n        this.valueDec = valueDec;\r\n        this.isFirstSid = isFirstSid;\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        if (!inputLength) {\r\n            return inputOffset;\r\n        }\r\n        const inputView = pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer);\r\n        if (!checkBufferParams(this, inputView, inputOffset, inputLength)) {\r\n            return -1;\r\n        }\r\n        const intBuffer = inputView.subarray(inputOffset, inputOffset + inputLength);\r\n        this.valueHexView = new Uint8Array(inputLength);\r\n        for (let i = 0; i < inputLength; i++) {\r\n            this.valueHexView[i] = intBuffer[i] & 0x7F;\r\n            this.blockLength++;\r\n            if ((intBuffer[i] & 0x80) === 0x00)\r\n                break;\r\n        }\r\n        const tempView = new Uint8Array(this.blockLength);\r\n        for (let i = 0; i < this.blockLength; i++) {\r\n            tempView[i] = this.valueHexView[i];\r\n        }\r\n        this.valueHexView = tempView;\r\n        if ((intBuffer[this.blockLength - 1] & 0x80) !== 0x00) {\r\n            this.error = \"End of input reached before message was fully decoded\";\r\n            return -1;\r\n        }\r\n        if (this.valueHexView[0] === 0x00)\r\n            this.warnings.push(\"Needlessly long format of SID encoding\");\r\n        if (this.blockLength <= 8)\r\n            this.valueDec = pvutils.utilFromBase(this.valueHexView, 7);\r\n        else {\r\n            this.isHexOnly = true;\r\n            this.warnings.push(\"Too big SID for decoding, hex only\");\r\n        }\r\n        return (inputOffset + this.blockLength);\r\n    }\r\n    set valueBigInt(value) {\r\n        assertBigInt();\r\n        let bits = BigInt(value).toString(2);\r\n        while (bits.length % 7) {\r\n            bits = \"0\" + bits;\r\n        }\r\n        const bytes = new Uint8Array(bits.length / 7);\r\n        for (let i = 0; i < bytes.length; i++) {\r\n            bytes[i] = parseInt(bits.slice(i * 7, i * 7 + 7), 2) + (i + 1 < bytes.length ? 0x80 : 0);\r\n        }\r\n        this.fromBER(bytes.buffer, 0, bytes.length);\r\n    }\r\n    toBER(sizeOnly) {\r\n        if (this.isHexOnly) {\r\n            if (sizeOnly)\r\n                return (new ArrayBuffer(this.valueHexView.byteLength));\r\n            const curView = this.valueHexView;\r\n            const retView = new Uint8Array(this.blockLength);\r\n            for (let i = 0; i < (this.blockLength - 1); i++)\r\n                retView[i] = curView[i] | 0x80;\r\n            retView[this.blockLength - 1] = curView[this.blockLength - 1];\r\n            return retView.buffer;\r\n        }\r\n        const encodedBuf = pvutils.utilToBase(this.valueDec, 7);\r\n        if (encodedBuf.byteLength === 0) {\r\n            this.error = \"Error during encoding SID value\";\r\n            return EMPTY_BUFFER;\r\n        }\r\n        const retView = new Uint8Array(encodedBuf.byteLength);\r\n        if (!sizeOnly) {\r\n            const encodedView = new Uint8Array(encodedBuf);\r\n            const len = encodedBuf.byteLength - 1;\r\n            for (let i = 0; i < len; i++)\r\n                retView[i] = encodedView[i] | 0x80;\r\n            retView[len] = encodedView[len];\r\n        }\r\n        return retView;\r\n    }\r\n    toString() {\r\n        let result = \"\";\r\n        if (this.isHexOnly)\r\n            result = pvtsutils.Convert.ToHex(this.valueHexView);\r\n        else {\r\n            if (this.isFirstSid) {\r\n                let sidValue = this.valueDec;\r\n                if (this.valueDec <= 39)\r\n                    result = \"0.\";\r\n                else {\r\n                    if (this.valueDec <= 79) {\r\n                        result = \"1.\";\r\n                        sidValue -= 40;\r\n                    }\r\n                    else {\r\n                        result = \"2.\";\r\n                        sidValue -= 80;\r\n                    }\r\n                }\r\n                result += sidValue.toString();\r\n            }\r\n            else\r\n                result = this.valueDec.toString();\r\n        }\r\n        return result;\r\n    }\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            valueDec: this.valueDec,\r\n            isFirstSid: this.isFirstSid,\r\n        };\r\n    }\r\n}\r\nLocalSidValueBlock.NAME = \"sidBlock\";\n\nclass LocalObjectIdentifierValueBlock extends ValueBlock {\r\n    constructor({ value = EMPTY_STRING, ...parameters } = {}) {\r\n        super(parameters);\r\n        this.value = [];\r\n        if (value) {\r\n            this.fromString(value);\r\n        }\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        let resultOffset = inputOffset;\r\n        while (inputLength > 0) {\r\n            const sidBlock = new LocalSidValueBlock();\r\n            resultOffset = sidBlock.fromBER(inputBuffer, resultOffset, inputLength);\r\n            if (resultOffset === -1) {\r\n                this.blockLength = 0;\r\n                this.error = sidBlock.error;\r\n                return resultOffset;\r\n            }\r\n            if (this.value.length === 0)\r\n                sidBlock.isFirstSid = true;\r\n            this.blockLength += sidBlock.blockLength;\r\n            inputLength -= sidBlock.blockLength;\r\n            this.value.push(sidBlock);\r\n        }\r\n        return resultOffset;\r\n    }\r\n    toBER(sizeOnly) {\r\n        const retBuffers = [];\r\n        for (let i = 0; i < this.value.length; i++) {\r\n            const valueBuf = this.value[i].toBER(sizeOnly);\r\n            if (valueBuf.byteLength === 0) {\r\n                this.error = this.value[i].error;\r\n                return EMPTY_BUFFER;\r\n            }\r\n            retBuffers.push(valueBuf);\r\n        }\r\n        return concat(retBuffers);\r\n    }\r\n    fromString(string) {\r\n        this.value = [];\r\n        let pos1 = 0;\r\n        let pos2 = 0;\r\n        let sid = \"\";\r\n        let flag = false;\r\n        do {\r\n            pos2 = string.indexOf(\".\", pos1);\r\n            if (pos2 === -1)\r\n                sid = string.substring(pos1);\r\n            else\r\n                sid = string.substring(pos1, pos2);\r\n            pos1 = pos2 + 1;\r\n            if (flag) {\r\n                const sidBlock = this.value[0];\r\n                let plus = 0;\r\n                switch (sidBlock.valueDec) {\r\n                    case 0:\r\n                        break;\r\n                    case 1:\r\n                        plus = 40;\r\n                        break;\r\n                    case 2:\r\n                        plus = 80;\r\n                        break;\r\n                    default:\r\n                        this.value = [];\r\n                        return;\r\n                }\r\n                const parsedSID = parseInt(sid, 10);\r\n                if (isNaN(parsedSID))\r\n                    return;\r\n                sidBlock.valueDec = parsedSID + plus;\r\n                flag = false;\r\n            }\r\n            else {\r\n                const sidBlock = new LocalSidValueBlock();\r\n                if (sid > Number.MAX_SAFE_INTEGER) {\r\n                    assertBigInt();\r\n                    const sidValue = BigInt(sid);\r\n                    sidBlock.valueBigInt = sidValue;\r\n                }\r\n                else {\r\n                    sidBlock.valueDec = parseInt(sid, 10);\r\n                    if (isNaN(sidBlock.valueDec))\r\n                        return;\r\n                }\r\n                if (!this.value.length) {\r\n                    sidBlock.isFirstSid = true;\r\n                    flag = true;\r\n                }\r\n                this.value.push(sidBlock);\r\n            }\r\n        } while (pos2 !== -1);\r\n    }\r\n    toString() {\r\n        let result = \"\";\r\n        let isHexOnly = false;\r\n        for (let i = 0; i < this.value.length; i++) {\r\n            isHexOnly = this.value[i].isHexOnly;\r\n            let sidStr = this.value[i].toString();\r\n            if (i !== 0)\r\n                result = `${result}.`;\r\n            if (isHexOnly) {\r\n                sidStr = `{${sidStr}}`;\r\n                if (this.value[i].isFirstSid)\r\n                    result = `2.{${sidStr} - 80}`;\r\n                else\r\n                    result += sidStr;\r\n            }\r\n            else\r\n                result += sidStr;\r\n        }\r\n        return result;\r\n    }\r\n    toJSON() {\r\n        const object = {\r\n            ...super.toJSON(),\r\n            value: this.toString(),\r\n            sidArray: [],\r\n        };\r\n        for (let i = 0; i < this.value.length; i++) {\r\n            object.sidArray.push(this.value[i].toJSON());\r\n        }\r\n        return object;\r\n    }\r\n}\r\nLocalObjectIdentifierValueBlock.NAME = \"ObjectIdentifierValueBlock\";\n\nvar _a$m;\r\nclass ObjectIdentifier extends BaseBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters, LocalObjectIdentifierValueBlock);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 6;\r\n    }\r\n    getValue() {\r\n        return this.valueBlock.toString();\r\n    }\r\n    setValue(value) {\r\n        this.valueBlock.fromString(value);\r\n    }\r\n    onAsciiEncoding() {\r\n        return `${this.constructor.NAME} : ${this.valueBlock.toString() || \"empty\"}`;\r\n    }\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            value: this.getValue(),\r\n        };\r\n    }\r\n}\r\n_a$m = ObjectIdentifier;\r\n(() => {\r\n    typeStore.ObjectIdentifier = _a$m;\r\n})();\r\nObjectIdentifier.NAME = \"OBJECT IDENTIFIER\";\n\nclass LocalRelativeSidValueBlock extends HexBlock(LocalBaseBlock) {\r\n    constructor({ valueDec = 0, ...parameters } = {}) {\r\n        super(parameters);\r\n        this.valueDec = valueDec;\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        if (inputLength === 0)\r\n            return inputOffset;\r\n        const inputView = pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer);\r\n        if (!checkBufferParams(this, inputView, inputOffset, inputLength))\r\n            return -1;\r\n        const intBuffer = inputView.subarray(inputOffset, inputOffset + inputLength);\r\n        this.valueHexView = new Uint8Array(inputLength);\r\n        for (let i = 0; i < inputLength; i++) {\r\n            this.valueHexView[i] = intBuffer[i] & 0x7F;\r\n            this.blockLength++;\r\n            if ((intBuffer[i] & 0x80) === 0x00)\r\n                break;\r\n        }\r\n        const tempView = new Uint8Array(this.blockLength);\r\n        for (let i = 0; i < this.blockLength; i++)\r\n            tempView[i] = this.valueHexView[i];\r\n        this.valueHexView = tempView;\r\n        if ((intBuffer[this.blockLength - 1] & 0x80) !== 0x00) {\r\n            this.error = \"End of input reached before message was fully decoded\";\r\n            return -1;\r\n        }\r\n        if (this.valueHexView[0] === 0x00)\r\n            this.warnings.push(\"Needlessly long format of SID encoding\");\r\n        if (this.blockLength <= 8)\r\n            this.valueDec = pvutils.utilFromBase(this.valueHexView, 7);\r\n        else {\r\n            this.isHexOnly = true;\r\n            this.warnings.push(\"Too big SID for decoding, hex only\");\r\n        }\r\n        return (inputOffset + this.blockLength);\r\n    }\r\n    toBER(sizeOnly) {\r\n        if (this.isHexOnly) {\r\n            if (sizeOnly)\r\n                return (new ArrayBuffer(this.valueHexView.byteLength));\r\n            const curView = this.valueHexView;\r\n            const retView = new Uint8Array(this.blockLength);\r\n            for (let i = 0; i < (this.blockLength - 1); i++)\r\n                retView[i] = curView[i] | 0x80;\r\n            retView[this.blockLength - 1] = curView[this.blockLength - 1];\r\n            return retView.buffer;\r\n        }\r\n        const encodedBuf = pvutils.utilToBase(this.valueDec, 7);\r\n        if (encodedBuf.byteLength === 0) {\r\n            this.error = \"Error during encoding SID value\";\r\n            return EMPTY_BUFFER;\r\n        }\r\n        const retView = new Uint8Array(encodedBuf.byteLength);\r\n        if (!sizeOnly) {\r\n            const encodedView = new Uint8Array(encodedBuf);\r\n            const len = encodedBuf.byteLength - 1;\r\n            for (let i = 0; i < len; i++)\r\n                retView[i] = encodedView[i] | 0x80;\r\n            retView[len] = encodedView[len];\r\n        }\r\n        return retView.buffer;\r\n    }\r\n    toString() {\r\n        let result = \"\";\r\n        if (this.isHexOnly)\r\n            result = pvtsutils.Convert.ToHex(this.valueHexView);\r\n        else {\r\n            result = this.valueDec.toString();\r\n        }\r\n        return result;\r\n    }\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            valueDec: this.valueDec,\r\n        };\r\n    }\r\n}\r\nLocalRelativeSidValueBlock.NAME = \"relativeSidBlock\";\n\nclass LocalRelativeObjectIdentifierValueBlock extends ValueBlock {\r\n    constructor({ value = EMPTY_STRING, ...parameters } = {}) {\r\n        super(parameters);\r\n        this.value = [];\r\n        if (value) {\r\n            this.fromString(value);\r\n        }\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        let resultOffset = inputOffset;\r\n        while (inputLength > 0) {\r\n            const sidBlock = new LocalRelativeSidValueBlock();\r\n            resultOffset = sidBlock.fromBER(inputBuffer, resultOffset, inputLength);\r\n            if (resultOffset === -1) {\r\n                this.blockLength = 0;\r\n                this.error = sidBlock.error;\r\n                return resultOffset;\r\n            }\r\n            this.blockLength += sidBlock.blockLength;\r\n            inputLength -= sidBlock.blockLength;\r\n            this.value.push(sidBlock);\r\n        }\r\n        return resultOffset;\r\n    }\r\n    toBER(sizeOnly, writer) {\r\n        const retBuffers = [];\r\n        for (let i = 0; i < this.value.length; i++) {\r\n            const valueBuf = this.value[i].toBER(sizeOnly);\r\n            if (valueBuf.byteLength === 0) {\r\n                this.error = this.value[i].error;\r\n                return EMPTY_BUFFER;\r\n            }\r\n            retBuffers.push(valueBuf);\r\n        }\r\n        return concat(retBuffers);\r\n    }\r\n    fromString(string) {\r\n        this.value = [];\r\n        let pos1 = 0;\r\n        let pos2 = 0;\r\n        let sid = \"\";\r\n        do {\r\n            pos2 = string.indexOf(\".\", pos1);\r\n            if (pos2 === -1)\r\n                sid = string.substring(pos1);\r\n            else\r\n                sid = string.substring(pos1, pos2);\r\n            pos1 = pos2 + 1;\r\n            const sidBlock = new LocalRelativeSidValueBlock();\r\n            sidBlock.valueDec = parseInt(sid, 10);\r\n            if (isNaN(sidBlock.valueDec))\r\n                return true;\r\n            this.value.push(sidBlock);\r\n        } while (pos2 !== -1);\r\n        return true;\r\n    }\r\n    toString() {\r\n        let result = \"\";\r\n        let isHexOnly = false;\r\n        for (let i = 0; i < this.value.length; i++) {\r\n            isHexOnly = this.value[i].isHexOnly;\r\n            let sidStr = this.value[i].toString();\r\n            if (i !== 0)\r\n                result = `${result}.`;\r\n            if (isHexOnly) {\r\n                sidStr = `{${sidStr}}`;\r\n                result += sidStr;\r\n            }\r\n            else\r\n                result += sidStr;\r\n        }\r\n        return result;\r\n    }\r\n    toJSON() {\r\n        const object = {\r\n            ...super.toJSON(),\r\n            value: this.toString(),\r\n            sidArray: [],\r\n        };\r\n        for (let i = 0; i < this.value.length; i++)\r\n            object.sidArray.push(this.value[i].toJSON());\r\n        return object;\r\n    }\r\n}\r\nLocalRelativeObjectIdentifierValueBlock.NAME = \"RelativeObjectIdentifierValueBlock\";\n\nvar _a$l;\r\nclass RelativeObjectIdentifier extends BaseBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters, LocalRelativeObjectIdentifierValueBlock);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 13;\r\n    }\r\n    getValue() {\r\n        return this.valueBlock.toString();\r\n    }\r\n    setValue(value) {\r\n        this.valueBlock.fromString(value);\r\n    }\r\n    onAsciiEncoding() {\r\n        return `${this.constructor.NAME} : ${this.valueBlock.toString() || \"empty\"}`;\r\n    }\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            value: this.getValue(),\r\n        };\r\n    }\r\n}\r\n_a$l = RelativeObjectIdentifier;\r\n(() => {\r\n    typeStore.RelativeObjectIdentifier = _a$l;\r\n})();\r\nRelativeObjectIdentifier.NAME = \"RelativeObjectIdentifier\";\n\nvar _a$k;\r\nclass Sequence extends Constructed {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 16;\r\n    }\r\n}\r\n_a$k = Sequence;\r\n(() => {\r\n    typeStore.Sequence = _a$k;\r\n})();\r\nSequence.NAME = \"SEQUENCE\";\n\nvar _a$j;\r\nclass Set extends Constructed {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 17;\r\n    }\r\n}\r\n_a$j = Set;\r\n(() => {\r\n    typeStore.Set = _a$j;\r\n})();\r\nSet.NAME = \"SET\";\n\nclass LocalStringValueBlock extends HexBlock(ValueBlock) {\r\n    constructor({ ...parameters } = {}) {\r\n        super(parameters);\r\n        this.isHexOnly = true;\r\n        this.value = EMPTY_STRING;\r\n    }\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            value: this.value,\r\n        };\r\n    }\r\n}\r\nLocalStringValueBlock.NAME = \"StringValueBlock\";\n\nclass LocalSimpleStringValueBlock extends LocalStringValueBlock {\r\n}\r\nLocalSimpleStringValueBlock.NAME = \"SimpleStringValueBlock\";\n\nclass LocalSimpleStringBlock extends BaseStringBlock {\r\n    constructor({ ...parameters } = {}) {\r\n        super(parameters, LocalSimpleStringValueBlock);\r\n    }\r\n    fromBuffer(inputBuffer) {\r\n        this.valueBlock.value = String.fromCharCode.apply(null, pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer));\r\n    }\r\n    fromString(inputString) {\r\n        const strLen = inputString.length;\r\n        const view = this.valueBlock.valueHexView = new Uint8Array(strLen);\r\n        for (let i = 0; i < strLen; i++)\r\n            view[i] = inputString.charCodeAt(i);\r\n        this.valueBlock.value = inputString;\r\n    }\r\n}\r\nLocalSimpleStringBlock.NAME = \"SIMPLE STRING\";\n\nclass LocalUtf8StringValueBlock extends LocalSimpleStringBlock {\r\n    fromBuffer(inputBuffer) {\r\n        this.valueBlock.valueHexView = pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer);\r\n        try {\r\n            this.valueBlock.value = pvtsutils.Convert.ToUtf8String(inputBuffer);\r\n        }\r\n        catch (ex) {\r\n            this.warnings.push(`Error during \"decodeURIComponent\": ${ex}, using raw string`);\r\n            this.valueBlock.value = pvtsutils.Convert.ToBinary(inputBuffer);\r\n        }\r\n    }\r\n    fromString(inputString) {\r\n        this.valueBlock.valueHexView = new Uint8Array(pvtsutils.Convert.FromUtf8String(inputString));\r\n        this.valueBlock.value = inputString;\r\n    }\r\n}\r\nLocalUtf8StringValueBlock.NAME = \"Utf8StringValueBlock\";\n\nvar _a$i;\r\nclass Utf8String extends LocalUtf8StringValueBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 12;\r\n    }\r\n}\r\n_a$i = Utf8String;\r\n(() => {\r\n    typeStore.Utf8String = _a$i;\r\n})();\r\nUtf8String.NAME = \"UTF8String\";\n\nclass LocalBmpStringValueBlock extends LocalSimpleStringBlock {\r\n    fromBuffer(inputBuffer) {\r\n        this.valueBlock.value = pvtsutils.Convert.ToUtf16String(inputBuffer);\r\n        this.valueBlock.valueHexView = pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer);\r\n    }\r\n    fromString(inputString) {\r\n        this.valueBlock.value = inputString;\r\n        this.valueBlock.valueHexView = new Uint8Array(pvtsutils.Convert.FromUtf16String(inputString));\r\n    }\r\n}\r\nLocalBmpStringValueBlock.NAME = \"BmpStringValueBlock\";\n\nvar _a$h;\r\nclass BmpString extends LocalBmpStringValueBlock {\r\n    constructor({ ...parameters } = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 30;\r\n    }\r\n}\r\n_a$h = BmpString;\r\n(() => {\r\n    typeStore.BmpString = _a$h;\r\n})();\r\nBmpString.NAME = \"BMPString\";\n\nclass LocalUniversalStringValueBlock extends LocalSimpleStringBlock {\r\n    fromBuffer(inputBuffer) {\r\n        const copyBuffer = ArrayBuffer.isView(inputBuffer) ? inputBuffer.slice().buffer : inputBuffer.slice(0);\r\n        const valueView = new Uint8Array(copyBuffer);\r\n        for (let i = 0; i < valueView.length; i += 4) {\r\n            valueView[i] = valueView[i + 3];\r\n            valueView[i + 1] = valueView[i + 2];\r\n            valueView[i + 2] = 0x00;\r\n            valueView[i + 3] = 0x00;\r\n        }\r\n        this.valueBlock.value = String.fromCharCode.apply(null, new Uint32Array(copyBuffer));\r\n    }\r\n    fromString(inputString) {\r\n        const strLength = inputString.length;\r\n        const valueHexView = this.valueBlock.valueHexView = new Uint8Array(strLength * 4);\r\n        for (let i = 0; i < strLength; i++) {\r\n            const codeBuf = pvutils.utilToBase(inputString.charCodeAt(i), 8);\r\n            const codeView = new Uint8Array(codeBuf);\r\n            if (codeView.length > 4)\r\n                continue;\r\n            const dif = 4 - codeView.length;\r\n            for (let j = (codeView.length - 1); j >= 0; j--)\r\n                valueHexView[i * 4 + j + dif] = codeView[j];\r\n        }\r\n        this.valueBlock.value = inputString;\r\n    }\r\n}\r\nLocalUniversalStringValueBlock.NAME = \"UniversalStringValueBlock\";\n\nvar _a$g;\r\nclass UniversalString extends LocalUniversalStringValueBlock {\r\n    constructor({ ...parameters } = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 28;\r\n    }\r\n}\r\n_a$g = UniversalString;\r\n(() => {\r\n    typeStore.UniversalString = _a$g;\r\n})();\r\nUniversalString.NAME = \"UniversalString\";\n\nvar _a$f;\r\nclass NumericString extends LocalSimpleStringBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 18;\r\n    }\r\n}\r\n_a$f = NumericString;\r\n(() => {\r\n    typeStore.NumericString = _a$f;\r\n})();\r\nNumericString.NAME = \"NumericString\";\n\nvar _a$e;\r\nclass PrintableString extends LocalSimpleStringBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 19;\r\n    }\r\n}\r\n_a$e = PrintableString;\r\n(() => {\r\n    typeStore.PrintableString = _a$e;\r\n})();\r\nPrintableString.NAME = \"PrintableString\";\n\nvar _a$d;\r\nclass TeletexString extends LocalSimpleStringBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 20;\r\n    }\r\n}\r\n_a$d = TeletexString;\r\n(() => {\r\n    typeStore.TeletexString = _a$d;\r\n})();\r\nTeletexString.NAME = \"TeletexString\";\n\nvar _a$c;\r\nclass VideotexString extends LocalSimpleStringBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 21;\r\n    }\r\n}\r\n_a$c = VideotexString;\r\n(() => {\r\n    typeStore.VideotexString = _a$c;\r\n})();\r\nVideotexString.NAME = \"VideotexString\";\n\nvar _a$b;\r\nclass IA5String extends LocalSimpleStringBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 22;\r\n    }\r\n}\r\n_a$b = IA5String;\r\n(() => {\r\n    typeStore.IA5String = _a$b;\r\n})();\r\nIA5String.NAME = \"IA5String\";\n\nvar _a$a;\r\nclass GraphicString extends LocalSimpleStringBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 25;\r\n    }\r\n}\r\n_a$a = GraphicString;\r\n(() => {\r\n    typeStore.GraphicString = _a$a;\r\n})();\r\nGraphicString.NAME = \"GraphicString\";\n\nvar _a$9;\r\nclass VisibleString extends LocalSimpleStringBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 26;\r\n    }\r\n}\r\n_a$9 = VisibleString;\r\n(() => {\r\n    typeStore.VisibleString = _a$9;\r\n})();\r\nVisibleString.NAME = \"VisibleString\";\n\nvar _a$8;\r\nclass GeneralString extends LocalSimpleStringBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 27;\r\n    }\r\n}\r\n_a$8 = GeneralString;\r\n(() => {\r\n    typeStore.GeneralString = _a$8;\r\n})();\r\nGeneralString.NAME = \"GeneralString\";\n\nvar _a$7;\r\nclass CharacterString extends LocalSimpleStringBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 29;\r\n    }\r\n}\r\n_a$7 = CharacterString;\r\n(() => {\r\n    typeStore.CharacterString = _a$7;\r\n})();\r\nCharacterString.NAME = \"CharacterString\";\n\nvar _a$6;\r\nclass UTCTime extends VisibleString {\r\n    constructor({ value, valueDate, ...parameters } = {}) {\r\n        super(parameters);\r\n        this.year = 0;\r\n        this.month = 0;\r\n        this.day = 0;\r\n        this.hour = 0;\r\n        this.minute = 0;\r\n        this.second = 0;\r\n        if (value) {\r\n            this.fromString(value);\r\n            this.valueBlock.valueHexView = new Uint8Array(value.length);\r\n            for (let i = 0; i < value.length; i++)\r\n                this.valueBlock.valueHexView[i] = value.charCodeAt(i);\r\n        }\r\n        if (valueDate) {\r\n            this.fromDate(valueDate);\r\n            this.valueBlock.valueHexView = new Uint8Array(this.toBuffer());\r\n        }\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 23;\r\n    }\r\n    fromBuffer(inputBuffer) {\r\n        this.fromString(String.fromCharCode.apply(null, pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer)));\r\n    }\r\n    toBuffer() {\r\n        const str = this.toString();\r\n        const buffer = new ArrayBuffer(str.length);\r\n        const view = new Uint8Array(buffer);\r\n        for (let i = 0; i < str.length; i++)\r\n            view[i] = str.charCodeAt(i);\r\n        return buffer;\r\n    }\r\n    fromDate(inputDate) {\r\n        this.year = inputDate.getUTCFullYear();\r\n        this.month = inputDate.getUTCMonth() + 1;\r\n        this.day = inputDate.getUTCDate();\r\n        this.hour = inputDate.getUTCHours();\r\n        this.minute = inputDate.getUTCMinutes();\r\n        this.second = inputDate.getUTCSeconds();\r\n    }\r\n    toDate() {\r\n        return (new Date(Date.UTC(this.year, this.month - 1, this.day, this.hour, this.minute, this.second)));\r\n    }\r\n    fromString(inputString) {\r\n        const parser = /(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})Z/ig;\r\n        const parserArray = parser.exec(inputString);\r\n        if (parserArray === null) {\r\n            this.error = \"Wrong input string for conversion\";\r\n            return;\r\n        }\r\n        const year = parseInt(parserArray[1], 10);\r\n        if (year >= 50)\r\n            this.year = 1900 + year;\r\n        else\r\n            this.year = 2000 + year;\r\n        this.month = parseInt(parserArray[2], 10);\r\n        this.day = parseInt(parserArray[3], 10);\r\n        this.hour = parseInt(parserArray[4], 10);\r\n        this.minute = parseInt(parserArray[5], 10);\r\n        this.second = parseInt(parserArray[6], 10);\r\n    }\r\n    toString(encoding = \"iso\") {\r\n        if (encoding === \"iso\") {\r\n            const outputArray = new Array(7);\r\n            outputArray[0] = pvutils.padNumber(((this.year < 2000) ? (this.year - 1900) : (this.year - 2000)), 2);\r\n            outputArray[1] = pvutils.padNumber(this.month, 2);\r\n            outputArray[2] = pvutils.padNumber(this.day, 2);\r\n            outputArray[3] = pvutils.padNumber(this.hour, 2);\r\n            outputArray[4] = pvutils.padNumber(this.minute, 2);\r\n            outputArray[5] = pvutils.padNumber(this.second, 2);\r\n            outputArray[6] = \"Z\";\r\n            return outputArray.join(\"\");\r\n        }\r\n        return super.toString(encoding);\r\n    }\r\n    onAsciiEncoding() {\r\n        return `${this.constructor.NAME} : ${this.toDate().toISOString()}`;\r\n    }\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            year: this.year,\r\n            month: this.month,\r\n            day: this.day,\r\n            hour: this.hour,\r\n            minute: this.minute,\r\n            second: this.second,\r\n        };\r\n    }\r\n}\r\n_a$6 = UTCTime;\r\n(() => {\r\n    typeStore.UTCTime = _a$6;\r\n})();\r\nUTCTime.NAME = \"UTCTime\";\n\nvar _a$5;\r\nclass GeneralizedTime extends UTCTime {\r\n    constructor(parameters = {}) {\r\n        var _b;\r\n        super(parameters);\r\n        (_b = this.millisecond) !== null && _b !== void 0 ? _b : (this.millisecond = 0);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 24;\r\n    }\r\n    fromDate(inputDate) {\r\n        super.fromDate(inputDate);\r\n        this.millisecond = inputDate.getUTCMilliseconds();\r\n    }\r\n    toDate() {\r\n        return (new Date(Date.UTC(this.year, this.month - 1, this.day, this.hour, this.minute, this.second, this.millisecond)));\r\n    }\r\n    fromString(inputString) {\r\n        let isUTC = false;\r\n        let timeString = \"\";\r\n        let dateTimeString = \"\";\r\n        let fractionPart = 0;\r\n        let parser;\r\n        let hourDifference = 0;\r\n        let minuteDifference = 0;\r\n        if (inputString[inputString.length - 1] === \"Z\") {\r\n            timeString = inputString.substring(0, inputString.length - 1);\r\n            isUTC = true;\r\n        }\r\n        else {\r\n            const number = new Number(inputString[inputString.length - 1]);\r\n            if (isNaN(number.valueOf()))\r\n                throw new Error(\"Wrong input string for conversion\");\r\n            timeString = inputString;\r\n        }\r\n        if (isUTC) {\r\n            if (timeString.indexOf(\"+\") !== -1)\r\n                throw new Error(\"Wrong input string for conversion\");\r\n            if (timeString.indexOf(\"-\") !== -1)\r\n                throw new Error(\"Wrong input string for conversion\");\r\n        }\r\n        else {\r\n            let multiplier = 1;\r\n            let differencePosition = timeString.indexOf(\"+\");\r\n            let differenceString = \"\";\r\n            if (differencePosition === -1) {\r\n                differencePosition = timeString.indexOf(\"-\");\r\n                multiplier = -1;\r\n            }\r\n            if (differencePosition !== -1) {\r\n                differenceString = timeString.substring(differencePosition + 1);\r\n                timeString = timeString.substring(0, differencePosition);\r\n                if ((differenceString.length !== 2) && (differenceString.length !== 4))\r\n                    throw new Error(\"Wrong input string for conversion\");\r\n                let number = parseInt(differenceString.substring(0, 2), 10);\r\n                if (isNaN(number.valueOf()))\r\n                    throw new Error(\"Wrong input string for conversion\");\r\n                hourDifference = multiplier * number;\r\n                if (differenceString.length === 4) {\r\n                    number = parseInt(differenceString.substring(2, 4), 10);\r\n                    if (isNaN(number.valueOf()))\r\n                        throw new Error(\"Wrong input string for conversion\");\r\n                    minuteDifference = multiplier * number;\r\n                }\r\n            }\r\n        }\r\n        let fractionPointPosition = timeString.indexOf(\".\");\r\n        if (fractionPointPosition === -1)\r\n            fractionPointPosition = timeString.indexOf(\",\");\r\n        if (fractionPointPosition !== -1) {\r\n            const fractionPartCheck = new Number(`0${timeString.substring(fractionPointPosition)}`);\r\n            if (isNaN(fractionPartCheck.valueOf()))\r\n                throw new Error(\"Wrong input string for conversion\");\r\n            fractionPart = fractionPartCheck.valueOf();\r\n            dateTimeString = timeString.substring(0, fractionPointPosition);\r\n        }\r\n        else\r\n            dateTimeString = timeString;\r\n        switch (true) {\r\n            case (dateTimeString.length === 8):\r\n                parser = /(\\d{4})(\\d{2})(\\d{2})/ig;\r\n                if (fractionPointPosition !== -1)\r\n                    throw new Error(\"Wrong input string for conversion\");\r\n                break;\r\n            case (dateTimeString.length === 10):\r\n                parser = /(\\d{4})(\\d{2})(\\d{2})(\\d{2})/ig;\r\n                if (fractionPointPosition !== -1) {\r\n                    let fractionResult = 60 * fractionPart;\r\n                    this.minute = Math.floor(fractionResult);\r\n                    fractionResult = 60 * (fractionResult - this.minute);\r\n                    this.second = Math.floor(fractionResult);\r\n                    fractionResult = 1000 * (fractionResult - this.second);\r\n                    this.millisecond = Math.floor(fractionResult);\r\n                }\r\n                break;\r\n            case (dateTimeString.length === 12):\r\n                parser = /(\\d{4})(\\d{2})(\\d{2})(\\d{2})(\\d{2})/ig;\r\n                if (fractionPointPosition !== -1) {\r\n                    let fractionResult = 60 * fractionPart;\r\n                    this.second = Math.floor(fractionResult);\r\n                    fractionResult = 1000 * (fractionResult - this.second);\r\n                    this.millisecond = Math.floor(fractionResult);\r\n                }\r\n                break;\r\n            case (dateTimeString.length === 14):\r\n                parser = /(\\d{4})(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})/ig;\r\n                if (fractionPointPosition !== -1) {\r\n                    const fractionResult = 1000 * fractionPart;\r\n                    this.millisecond = Math.floor(fractionResult);\r\n                }\r\n                break;\r\n            default:\r\n                throw new Error(\"Wrong input string for conversion\");\r\n        }\r\n        const parserArray = parser.exec(dateTimeString);\r\n        if (parserArray === null)\r\n            throw new Error(\"Wrong input string for conversion\");\r\n        for (let j = 1; j < parserArray.length; j++) {\r\n            switch (j) {\r\n                case 1:\r\n                    this.year = parseInt(parserArray[j], 10);\r\n                    break;\r\n                case 2:\r\n                    this.month = parseInt(parserArray[j], 10);\r\n                    break;\r\n                case 3:\r\n                    this.day = parseInt(parserArray[j], 10);\r\n                    break;\r\n                case 4:\r\n                    this.hour = parseInt(parserArray[j], 10) + hourDifference;\r\n                    break;\r\n                case 5:\r\n                    this.minute = parseInt(parserArray[j], 10) + minuteDifference;\r\n                    break;\r\n                case 6:\r\n                    this.second = parseInt(parserArray[j], 10);\r\n                    break;\r\n                default:\r\n                    throw new Error(\"Wrong input string for conversion\");\r\n            }\r\n        }\r\n        if (isUTC === false) {\r\n            const tempDate = new Date(this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);\r\n            this.year = tempDate.getUTCFullYear();\r\n            this.month = tempDate.getUTCMonth();\r\n            this.day = tempDate.getUTCDay();\r\n            this.hour = tempDate.getUTCHours();\r\n            this.minute = tempDate.getUTCMinutes();\r\n            this.second = tempDate.getUTCSeconds();\r\n            this.millisecond = tempDate.getUTCMilliseconds();\r\n        }\r\n    }\r\n    toString(encoding = \"iso\") {\r\n        if (encoding === \"iso\") {\r\n            const outputArray = [];\r\n            outputArray.push(pvutils.padNumber(this.year, 4));\r\n            outputArray.push(pvutils.padNumber(this.month, 2));\r\n            outputArray.push(pvutils.padNumber(this.day, 2));\r\n            outputArray.push(pvutils.padNumber(this.hour, 2));\r\n            outputArray.push(pvutils.padNumber(this.minute, 2));\r\n            outputArray.push(pvutils.padNumber(this.second, 2));\r\n            if (this.millisecond !== 0) {\r\n                outputArray.push(\".\");\r\n                outputArray.push(pvutils.padNumber(this.millisecond, 3));\r\n            }\r\n            outputArray.push(\"Z\");\r\n            return outputArray.join(\"\");\r\n        }\r\n        return super.toString(encoding);\r\n    }\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            millisecond: this.millisecond,\r\n        };\r\n    }\r\n}\r\n_a$5 = GeneralizedTime;\r\n(() => {\r\n    typeStore.GeneralizedTime = _a$5;\r\n})();\r\nGeneralizedTime.NAME = \"GeneralizedTime\";\n\nvar _a$4;\r\nclass DATE extends Utf8String {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 31;\r\n    }\r\n}\r\n_a$4 = DATE;\r\n(() => {\r\n    typeStore.DATE = _a$4;\r\n})();\r\nDATE.NAME = \"DATE\";\n\nvar _a$3;\r\nclass TimeOfDay extends Utf8String {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 32;\r\n    }\r\n}\r\n_a$3 = TimeOfDay;\r\n(() => {\r\n    typeStore.TimeOfDay = _a$3;\r\n})();\r\nTimeOfDay.NAME = \"TimeOfDay\";\n\nvar _a$2;\r\nclass DateTime extends Utf8String {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 33;\r\n    }\r\n}\r\n_a$2 = DateTime;\r\n(() => {\r\n    typeStore.DateTime = _a$2;\r\n})();\r\nDateTime.NAME = \"DateTime\";\n\nvar _a$1;\r\nclass Duration extends Utf8String {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 34;\r\n    }\r\n}\r\n_a$1 = Duration;\r\n(() => {\r\n    typeStore.Duration = _a$1;\r\n})();\r\nDuration.NAME = \"Duration\";\n\nvar _a;\r\nclass TIME extends Utf8String {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 14;\r\n    }\r\n}\r\n_a = TIME;\r\n(() => {\r\n    typeStore.TIME = _a;\r\n})();\r\nTIME.NAME = \"TIME\";\n\nclass Any {\r\n    constructor({ name = EMPTY_STRING, optional = false, } = {}) {\r\n        this.name = name;\r\n        this.optional = optional;\r\n    }\r\n}\n\nclass Choice extends Any {\r\n    constructor({ value = [], ...parameters } = {}) {\r\n        super(parameters);\r\n        this.value = value;\r\n    }\r\n}\n\nclass Repeated extends Any {\r\n    constructor({ value = new Any(), local = false, ...parameters } = {}) {\r\n        super(parameters);\r\n        this.value = value;\r\n        this.local = local;\r\n    }\r\n}\n\nclass RawData {\r\n    constructor({ data = EMPTY_VIEW } = {}) {\r\n        this.dataView = pvtsutils.BufferSourceConverter.toUint8Array(data);\r\n    }\r\n    get data() {\r\n        return this.dataView.slice().buffer;\r\n    }\r\n    set data(value) {\r\n        this.dataView = pvtsutils.BufferSourceConverter.toUint8Array(value);\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        const endLength = inputOffset + inputLength;\r\n        this.dataView = pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer).subarray(inputOffset, endLength);\r\n        return endLength;\r\n    }\r\n    toBER(sizeOnly) {\r\n        return this.dataView.slice().buffer;\r\n    }\r\n}\n\nfunction compareSchema(root, inputData, inputSchema) {\r\n    if (inputSchema instanceof Choice) {\r\n        for (let j = 0; j < inputSchema.value.length; j++) {\r\n            const result = compareSchema(root, inputData, inputSchema.value[j]);\r\n            if (result.verified) {\r\n                return {\r\n                    verified: true,\r\n                    result: root\r\n                };\r\n            }\r\n        }\r\n        {\r\n            const _result = {\r\n                verified: false,\r\n                result: {\r\n                    error: \"Wrong values for Choice type\"\r\n                },\r\n            };\r\n            if (inputSchema.hasOwnProperty(NAME))\r\n                _result.name = inputSchema.name;\r\n            return _result;\r\n        }\r\n    }\r\n    if (inputSchema instanceof Any) {\r\n        if (inputSchema.hasOwnProperty(NAME))\r\n            root[inputSchema.name] = inputData;\r\n        return {\r\n            verified: true,\r\n            result: root\r\n        };\r\n    }\r\n    if ((root instanceof Object) === false) {\r\n        return {\r\n            verified: false,\r\n            result: { error: \"Wrong root object\" }\r\n        };\r\n    }\r\n    if ((inputData instanceof Object) === false) {\r\n        return {\r\n            verified: false,\r\n            result: { error: \"Wrong ASN.1 data\" }\r\n        };\r\n    }\r\n    if ((inputSchema instanceof Object) === false) {\r\n        return {\r\n            verified: false,\r\n            result: { error: \"Wrong ASN.1 schema\" }\r\n        };\r\n    }\r\n    if ((ID_BLOCK in inputSchema) === false) {\r\n        return {\r\n            verified: false,\r\n            result: { error: \"Wrong ASN.1 schema\" }\r\n        };\r\n    }\r\n    if ((FROM_BER in inputSchema.idBlock) === false) {\r\n        return {\r\n            verified: false,\r\n            result: { error: \"Wrong ASN.1 schema\" }\r\n        };\r\n    }\r\n    if ((TO_BER in inputSchema.idBlock) === false) {\r\n        return {\r\n            verified: false,\r\n            result: { error: \"Wrong ASN.1 schema\" }\r\n        };\r\n    }\r\n    const encodedId = inputSchema.idBlock.toBER(false);\r\n    if (encodedId.byteLength === 0) {\r\n        return {\r\n            verified: false,\r\n            result: { error: \"Error encoding idBlock for ASN.1 schema\" }\r\n        };\r\n    }\r\n    const decodedOffset = inputSchema.idBlock.fromBER(encodedId, 0, encodedId.byteLength);\r\n    if (decodedOffset === -1) {\r\n        return {\r\n            verified: false,\r\n            result: { error: \"Error decoding idBlock for ASN.1 schema\" }\r\n        };\r\n    }\r\n    if (inputSchema.idBlock.hasOwnProperty(TAG_CLASS) === false) {\r\n        return {\r\n            verified: false,\r\n            result: { error: \"Wrong ASN.1 schema\" }\r\n        };\r\n    }\r\n    if (inputSchema.idBlock.tagClass !== inputData.idBlock.tagClass) {\r\n        return {\r\n            verified: false,\r\n            result: root\r\n        };\r\n    }\r\n    if (inputSchema.idBlock.hasOwnProperty(TAG_NUMBER) === false) {\r\n        return {\r\n            verified: false,\r\n            result: { error: \"Wrong ASN.1 schema\" }\r\n        };\r\n    }\r\n    if (inputSchema.idBlock.tagNumber !== inputData.idBlock.tagNumber) {\r\n        return {\r\n            verified: false,\r\n            result: root\r\n        };\r\n    }\r\n    if (inputSchema.idBlock.hasOwnProperty(IS_CONSTRUCTED) === false) {\r\n        return {\r\n            verified: false,\r\n            result: { error: \"Wrong ASN.1 schema\" }\r\n        };\r\n    }\r\n    if (inputSchema.idBlock.isConstructed !== inputData.idBlock.isConstructed) {\r\n        return {\r\n            verified: false,\r\n            result: root\r\n        };\r\n    }\r\n    if (!(IS_HEX_ONLY in inputSchema.idBlock)) {\r\n        return {\r\n            verified: false,\r\n            result: { error: \"Wrong ASN.1 schema\" }\r\n        };\r\n    }\r\n    if (inputSchema.idBlock.isHexOnly !== inputData.idBlock.isHexOnly) {\r\n        return {\r\n            verified: false,\r\n            result: root\r\n        };\r\n    }\r\n    if (inputSchema.idBlock.isHexOnly) {\r\n        if ((VALUE_HEX_VIEW in inputSchema.idBlock) === false) {\r\n            return {\r\n                verified: false,\r\n                result: { error: \"Wrong ASN.1 schema\" }\r\n            };\r\n        }\r\n        const schemaView = inputSchema.idBlock.valueHexView;\r\n        const asn1View = inputData.idBlock.valueHexView;\r\n        if (schemaView.length !== asn1View.length) {\r\n            return {\r\n                verified: false,\r\n                result: root\r\n            };\r\n        }\r\n        for (let i = 0; i < schemaView.length; i++) {\r\n            if (schemaView[i] !== asn1View[1]) {\r\n                return {\r\n                    verified: false,\r\n                    result: root\r\n                };\r\n            }\r\n        }\r\n    }\r\n    if (inputSchema.name) {\r\n        inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\r\n        if (inputSchema.name)\r\n            root[inputSchema.name] = inputData;\r\n    }\r\n    if (inputSchema instanceof typeStore.Constructed) {\r\n        let admission = 0;\r\n        let result = {\r\n            verified: false,\r\n            result: {\r\n                error: \"Unknown error\",\r\n            }\r\n        };\r\n        let maxLength = inputSchema.valueBlock.value.length;\r\n        if (maxLength > 0) {\r\n            if (inputSchema.valueBlock.value[0] instanceof Repeated) {\r\n                maxLength = inputData.valueBlock.value.length;\r\n            }\r\n        }\r\n        if (maxLength === 0) {\r\n            return {\r\n                verified: true,\r\n                result: root\r\n            };\r\n        }\r\n        if ((inputData.valueBlock.value.length === 0) &&\r\n            (inputSchema.valueBlock.value.length !== 0)) {\r\n            let _optional = true;\r\n            for (let i = 0; i < inputSchema.valueBlock.value.length; i++)\r\n                _optional = _optional && (inputSchema.valueBlock.value[i].optional || false);\r\n            if (_optional) {\r\n                return {\r\n                    verified: true,\r\n                    result: root\r\n                };\r\n            }\r\n            if (inputSchema.name) {\r\n                inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\r\n                if (inputSchema.name)\r\n                    delete root[inputSchema.name];\r\n            }\r\n            root.error = \"Inconsistent object length\";\r\n            return {\r\n                verified: false,\r\n                result: root\r\n            };\r\n        }\r\n        for (let i = 0; i < maxLength; i++) {\r\n            if ((i - admission) >= inputData.valueBlock.value.length) {\r\n                if (inputSchema.valueBlock.value[i].optional === false) {\r\n                    const _result = {\r\n                        verified: false,\r\n                        result: root\r\n                    };\r\n                    root.error = \"Inconsistent length between ASN.1 data and schema\";\r\n                    if (inputSchema.name) {\r\n                        inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\r\n                        if (inputSchema.name) {\r\n                            delete root[inputSchema.name];\r\n                            _result.name = inputSchema.name;\r\n                        }\r\n                    }\r\n                    return _result;\r\n                }\r\n            }\r\n            else {\r\n                if (inputSchema.valueBlock.value[0] instanceof Repeated) {\r\n                    result = compareSchema(root, inputData.valueBlock.value[i], inputSchema.valueBlock.value[0].value);\r\n                    if (result.verified === false) {\r\n                        if (inputSchema.valueBlock.value[0].optional)\r\n                            admission++;\r\n                        else {\r\n                            if (inputSchema.name) {\r\n                                inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\r\n                                if (inputSchema.name)\r\n                                    delete root[inputSchema.name];\r\n                            }\r\n                            return result;\r\n                        }\r\n                    }\r\n                    if ((NAME in inputSchema.valueBlock.value[0]) && (inputSchema.valueBlock.value[0].name.length > 0)) {\r\n                        let arrayRoot = {};\r\n                        if ((LOCAL in inputSchema.valueBlock.value[0]) && (inputSchema.valueBlock.value[0].local))\r\n                            arrayRoot = inputData;\r\n                        else\r\n                            arrayRoot = root;\r\n                        if (typeof arrayRoot[inputSchema.valueBlock.value[0].name] === \"undefined\")\r\n                            arrayRoot[inputSchema.valueBlock.value[0].name] = [];\r\n                        arrayRoot[inputSchema.valueBlock.value[0].name].push(inputData.valueBlock.value[i]);\r\n                    }\r\n                }\r\n                else {\r\n                    result = compareSchema(root, inputData.valueBlock.value[i - admission], inputSchema.valueBlock.value[i]);\r\n                    if (result.verified === false) {\r\n                        if (inputSchema.valueBlock.value[i].optional)\r\n                            admission++;\r\n                        else {\r\n                            if (inputSchema.name) {\r\n                                inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\r\n                                if (inputSchema.name)\r\n                                    delete root[inputSchema.name];\r\n                            }\r\n                            return result;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (result.verified === false) {\r\n            const _result = {\r\n                verified: false,\r\n                result: root\r\n            };\r\n            if (inputSchema.name) {\r\n                inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\r\n                if (inputSchema.name) {\r\n                    delete root[inputSchema.name];\r\n                    _result.name = inputSchema.name;\r\n                }\r\n            }\r\n            return _result;\r\n        }\r\n        return {\r\n            verified: true,\r\n            result: root\r\n        };\r\n    }\r\n    if (inputSchema.primitiveSchema &&\r\n        (VALUE_HEX_VIEW in inputData.valueBlock)) {\r\n        const asn1 = localFromBER(inputData.valueBlock.valueHexView);\r\n        if (asn1.offset === -1) {\r\n            const _result = {\r\n                verified: false,\r\n                result: asn1.result\r\n            };\r\n            if (inputSchema.name) {\r\n                inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\r\n                if (inputSchema.name) {\r\n                    delete root[inputSchema.name];\r\n                    _result.name = inputSchema.name;\r\n                }\r\n            }\r\n            return _result;\r\n        }\r\n        return compareSchema(root, asn1.result, inputSchema.primitiveSchema);\r\n    }\r\n    return {\r\n        verified: true,\r\n        result: root\r\n    };\r\n}\r\nfunction verifySchema(inputBuffer, inputSchema) {\r\n    if ((inputSchema instanceof Object) === false) {\r\n        return {\r\n            verified: false,\r\n            result: { error: \"Wrong ASN.1 schema type\" }\r\n        };\r\n    }\r\n    const asn1 = localFromBER(pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer));\r\n    if (asn1.offset === -1) {\r\n        return {\r\n            verified: false,\r\n            result: asn1.result\r\n        };\r\n    }\r\n    return compareSchema(asn1.result, asn1.result, inputSchema);\r\n}\n\nexport { Any, BaseBlock, BaseStringBlock, BitString, BmpString, Boolean, CharacterString, Choice, Constructed, DATE, DateTime, Duration, EndOfContent, Enumerated, GeneralString, GeneralizedTime, GraphicString, HexBlock, IA5String, Integer, Null, NumericString, ObjectIdentifier, OctetString, Primitive, PrintableString, RawData, RelativeObjectIdentifier, Repeated, Sequence, Set, TIME, TeletexString, TimeOfDay, UTCTime, UniversalString, Utf8String, ValueBlock, VideotexString, ViewWriter, VisibleString, compareSchema, fromBER, verifySchema };\n","export var AsnTypeTypes;\n(function (AsnTypeTypes) {\n    AsnTypeTypes[AsnTypeTypes[\"Sequence\"] = 0] = \"Sequence\";\n    AsnTypeTypes[AsnTypeTypes[\"Set\"] = 1] = \"Set\";\n    AsnTypeTypes[AsnTypeTypes[\"Choice\"] = 2] = \"Choice\";\n})(AsnTypeTypes || (AsnTypeTypes = {}));\nexport var AsnPropTypes;\n(function (AsnPropTypes) {\n    AsnPropTypes[AsnPropTypes[\"Any\"] = 1] = \"Any\";\n    AsnPropTypes[AsnPropTypes[\"Boolean\"] = 2] = \"Boolean\";\n    AsnPropTypes[AsnPropTypes[\"OctetString\"] = 3] = \"OctetString\";\n    AsnPropTypes[AsnPropTypes[\"BitString\"] = 4] = \"BitString\";\n    AsnPropTypes[AsnPropTypes[\"Integer\"] = 5] = \"Integer\";\n    AsnPropTypes[AsnPropTypes[\"Enumerated\"] = 6] = \"Enumerated\";\n    AsnPropTypes[AsnPropTypes[\"ObjectIdentifier\"] = 7] = \"ObjectIdentifier\";\n    AsnPropTypes[AsnPropTypes[\"Utf8String\"] = 8] = \"Utf8String\";\n    AsnPropTypes[AsnPropTypes[\"BmpString\"] = 9] = \"BmpString\";\n    AsnPropTypes[AsnPropTypes[\"UniversalString\"] = 10] = \"UniversalString\";\n    AsnPropTypes[AsnPropTypes[\"NumericString\"] = 11] = \"NumericString\";\n    AsnPropTypes[AsnPropTypes[\"PrintableString\"] = 12] = \"PrintableString\";\n    AsnPropTypes[AsnPropTypes[\"TeletexString\"] = 13] = \"TeletexString\";\n    AsnPropTypes[AsnPropTypes[\"VideotexString\"] = 14] = \"VideotexString\";\n    AsnPropTypes[AsnPropTypes[\"IA5String\"] = 15] = \"IA5String\";\n    AsnPropTypes[AsnPropTypes[\"GraphicString\"] = 16] = \"GraphicString\";\n    AsnPropTypes[AsnPropTypes[\"VisibleString\"] = 17] = \"VisibleString\";\n    AsnPropTypes[AsnPropTypes[\"GeneralString\"] = 18] = \"GeneralString\";\n    AsnPropTypes[AsnPropTypes[\"CharacterString\"] = 19] = \"CharacterString\";\n    AsnPropTypes[AsnPropTypes[\"UTCTime\"] = 20] = \"UTCTime\";\n    AsnPropTypes[AsnPropTypes[\"GeneralizedTime\"] = 21] = \"GeneralizedTime\";\n    AsnPropTypes[AsnPropTypes[\"DATE\"] = 22] = \"DATE\";\n    AsnPropTypes[AsnPropTypes[\"TimeOfDay\"] = 23] = \"TimeOfDay\";\n    AsnPropTypes[AsnPropTypes[\"DateTime\"] = 24] = \"DateTime\";\n    AsnPropTypes[AsnPropTypes[\"Duration\"] = 25] = \"Duration\";\n    AsnPropTypes[AsnPropTypes[\"TIME\"] = 26] = \"TIME\";\n    AsnPropTypes[AsnPropTypes[\"Null\"] = 27] = \"Null\";\n})(AsnPropTypes || (AsnPropTypes = {}));\n","import * as asn1js from \"asn1js\";\nimport { AsnPropTypes } from \"./enums\";\nimport { OctetString } from \"./types/index\";\nexport const AsnAnyConverter = {\n    fromASN: (value) => value instanceof asn1js.Null ? null : value.valueBeforeDecodeView,\n    toASN: (value) => {\n        if (value === null) {\n            return new asn1js.Null();\n        }\n        const schema = asn1js.fromBER(value);\n        if (schema.result.error) {\n            throw new Error(schema.result.error);\n        }\n        return schema.result;\n    },\n};\nexport const AsnIntegerConverter = {\n    fromASN: (value) => value.valueBlock.valueHexView.byteLength >= 4\n        ? value.valueBlock.toString()\n        : value.valueBlock.valueDec,\n    toASN: (value) => new asn1js.Integer({ value: +value }),\n};\nexport const AsnEnumeratedConverter = {\n    fromASN: (value) => value.valueBlock.valueDec,\n    toASN: (value) => new asn1js.Enumerated({ value }),\n};\nexport const AsnIntegerArrayBufferConverter = {\n    fromASN: (value) => value.valueBlock.valueHexView,\n    toASN: (value) => new asn1js.Integer({ valueHex: value }),\n};\nexport const AsnIntegerBigIntConverter = {\n    fromASN: (value) => value.toBigInt(),\n    toASN: (value) => asn1js.Integer.fromBigInt(value),\n};\nexport const AsnBitStringConverter = {\n    fromASN: (value) => value.valueBlock.valueHexView,\n    toASN: (value) => new asn1js.BitString({ valueHex: value }),\n};\nexport const AsnObjectIdentifierConverter = {\n    fromASN: (value) => value.valueBlock.toString(),\n    toASN: (value) => new asn1js.ObjectIdentifier({ value }),\n};\nexport const AsnBooleanConverter = {\n    fromASN: (value) => value.valueBlock.value,\n    toASN: (value) => new asn1js.Boolean({ value }),\n};\nexport const AsnOctetStringConverter = {\n    fromASN: (value) => value.valueBlock.valueHexView,\n    toASN: (value) => new asn1js.OctetString({ valueHex: value }),\n};\nexport const AsnConstructedOctetStringConverter = {\n    fromASN: (value) => new OctetString(value.getValue()),\n    toASN: (value) => value.toASN(),\n};\nfunction createStringConverter(Asn1Type) {\n    return {\n        fromASN: (value) => value.valueBlock.value,\n        toASN: (value) => new Asn1Type({ value }),\n    };\n}\nexport const AsnUtf8StringConverter = createStringConverter(asn1js.Utf8String);\nexport const AsnBmpStringConverter = createStringConverter(asn1js.BmpString);\nexport const AsnUniversalStringConverter = createStringConverter(asn1js.UniversalString);\nexport const AsnNumericStringConverter = createStringConverter(asn1js.NumericString);\nexport const AsnPrintableStringConverter = createStringConverter(asn1js.PrintableString);\nexport const AsnTeletexStringConverter = createStringConverter(asn1js.TeletexString);\nexport const AsnVideotexStringConverter = createStringConverter(asn1js.VideotexString);\nexport const AsnIA5StringConverter = createStringConverter(asn1js.IA5String);\nexport const AsnGraphicStringConverter = createStringConverter(asn1js.GraphicString);\nexport const AsnVisibleStringConverter = createStringConverter(asn1js.VisibleString);\nexport const AsnGeneralStringConverter = createStringConverter(asn1js.GeneralString);\nexport const AsnCharacterStringConverter = createStringConverter(asn1js.CharacterString);\nexport const AsnUTCTimeConverter = {\n    fromASN: (value) => value.toDate(),\n    toASN: (value) => new asn1js.UTCTime({ valueDate: value }),\n};\nexport const AsnGeneralizedTimeConverter = {\n    fromASN: (value) => value.toDate(),\n    toASN: (value) => new asn1js.GeneralizedTime({ valueDate: value }),\n};\nexport const AsnNullConverter = {\n    fromASN: () => null,\n    toASN: () => {\n        return new asn1js.Null();\n    },\n};\nexport function defaultConverter(type) {\n    switch (type) {\n        case AsnPropTypes.Any:\n            return AsnAnyConverter;\n        case AsnPropTypes.BitString:\n            return AsnBitStringConverter;\n        case AsnPropTypes.BmpString:\n            return AsnBmpStringConverter;\n        case AsnPropTypes.Boolean:\n            return AsnBooleanConverter;\n        case AsnPropTypes.CharacterString:\n            return AsnCharacterStringConverter;\n        case AsnPropTypes.Enumerated:\n            return AsnEnumeratedConverter;\n        case AsnPropTypes.GeneralString:\n            return AsnGeneralStringConverter;\n        case AsnPropTypes.GeneralizedTime:\n            return AsnGeneralizedTimeConverter;\n        case AsnPropTypes.GraphicString:\n            return AsnGraphicStringConverter;\n        case AsnPropTypes.IA5String:\n            return AsnIA5StringConverter;\n        case AsnPropTypes.Integer:\n            return AsnIntegerConverter;\n        case AsnPropTypes.Null:\n            return AsnNullConverter;\n        case AsnPropTypes.NumericString:\n            return AsnNumericStringConverter;\n        case AsnPropTypes.ObjectIdentifier:\n            return AsnObjectIdentifierConverter;\n        case AsnPropTypes.OctetString:\n            return AsnOctetStringConverter;\n        case AsnPropTypes.PrintableString:\n            return AsnPrintableStringConverter;\n        case AsnPropTypes.TeletexString:\n            return AsnTeletexStringConverter;\n        case AsnPropTypes.UTCTime:\n            return AsnUTCTimeConverter;\n        case AsnPropTypes.UniversalString:\n            return AsnUniversalStringConverter;\n        case AsnPropTypes.Utf8String:\n            return AsnUtf8StringConverter;\n        case AsnPropTypes.VideotexString:\n            return AsnVideotexStringConverter;\n        case AsnPropTypes.VisibleString:\n            return AsnVisibleStringConverter;\n        default:\n            return null;\n    }\n}\n","export function isConvertible(target) {\n    if (typeof target === \"function\" && target.prototype) {\n        if (target.prototype.toASN && target.prototype.fromASN) {\n            return true;\n        }\n        else {\n            return isConvertible(target.prototype);\n        }\n    }\n    else {\n        return !!(target && typeof target === \"object\" && \"toASN\" in target && \"fromASN\" in target);\n    }\n}\nexport function isTypeOfArray(target) {\n    var _a;\n    if (target) {\n        const proto = Object.getPrototypeOf(target);\n        if (((_a = proto === null || proto === void 0 ? void 0 : proto.prototype) === null || _a === void 0 ? void 0 : _a.constructor) === Array) {\n            return true;\n        }\n        return isTypeOfArray(proto);\n    }\n    return false;\n}\nexport function isArrayEqual(bytes1, bytes2) {\n    if (!(bytes1 && bytes2)) {\n        return false;\n    }\n    if (bytes1.byteLength !== bytes2.byteLength) {\n        return false;\n    }\n    const b1 = new Uint8Array(bytes1);\n    const b2 = new Uint8Array(bytes2);\n    for (let i = 0; i < bytes1.byteLength; i++) {\n        if (b1[i] !== b2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n","import * as asn1js from \"asn1js\";\nimport { AsnPropTypes, AsnTypeTypes } from \"./enums\";\nimport { isConvertible } from \"./helper\";\nexport class AsnSchemaStorage {\n    constructor() {\n        this.items = new WeakMap();\n    }\n    has(target) {\n        return this.items.has(target);\n    }\n    get(target, checkSchema = false) {\n        const schema = this.items.get(target);\n        if (!schema) {\n            throw new Error(`Cannot get schema for '${target.prototype.constructor.name}' target`);\n        }\n        if (checkSchema && !schema.schema) {\n            throw new Error(`Schema '${target.prototype.constructor.name}' doesn't contain ASN.1 schema. Call 'AsnSchemaStorage.cache'.`);\n        }\n        return schema;\n    }\n    cache(target) {\n        const schema = this.get(target);\n        if (!schema.schema) {\n            schema.schema = this.create(target, true);\n        }\n    }\n    createDefault(target) {\n        const schema = {\n            type: AsnTypeTypes.Sequence,\n            items: {},\n        };\n        const parentSchema = this.findParentSchema(target);\n        if (parentSchema) {\n            Object.assign(schema, parentSchema);\n            schema.items = Object.assign({}, schema.items, parentSchema.items);\n        }\n        return schema;\n    }\n    create(target, useNames) {\n        const schema = this.items.get(target) || this.createDefault(target);\n        const asn1Value = [];\n        for (const key in schema.items) {\n            const item = schema.items[key];\n            const name = useNames ? key : \"\";\n            let asn1Item;\n            if (typeof (item.type) === \"number\") {\n                const Asn1TypeName = AsnPropTypes[item.type];\n                const Asn1Type = asn1js[Asn1TypeName];\n                if (!Asn1Type) {\n                    throw new Error(`Cannot get ASN1 class by name '${Asn1TypeName}'`);\n                }\n                asn1Item = new Asn1Type({ name });\n            }\n            else if (isConvertible(item.type)) {\n                const instance = new item.type();\n                asn1Item = instance.toSchema(name);\n            }\n            else if (item.optional) {\n                const itemSchema = this.get(item.type);\n                if (itemSchema.type === AsnTypeTypes.Choice) {\n                    asn1Item = new asn1js.Any({ name });\n                }\n                else {\n                    asn1Item = this.create(item.type, false);\n                    asn1Item.name = name;\n                }\n            }\n            else {\n                asn1Item = new asn1js.Any({ name });\n            }\n            const optional = !!item.optional || item.defaultValue !== undefined;\n            if (item.repeated) {\n                asn1Item.name = \"\";\n                const Container = item.repeated === \"set\"\n                    ? asn1js.Set\n                    : asn1js.Sequence;\n                asn1Item = new Container({\n                    name: \"\",\n                    value: [\n                        new asn1js.Repeated({\n                            name,\n                            value: asn1Item,\n                        }),\n                    ],\n                });\n            }\n            if (item.context !== null && item.context !== undefined) {\n                if (item.implicit) {\n                    if (typeof item.type === \"number\" || isConvertible(item.type)) {\n                        const Container = item.repeated\n                            ? asn1js.Constructed\n                            : asn1js.Primitive;\n                        asn1Value.push(new Container({\n                            name,\n                            optional,\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: item.context,\n                            },\n                        }));\n                    }\n                    else {\n                        this.cache(item.type);\n                        const isRepeated = !!item.repeated;\n                        let value = !isRepeated\n                            ? this.get(item.type, true).schema\n                            : asn1Item;\n                        value = \"valueBlock\" in value ? value.valueBlock.value : value.value;\n                        asn1Value.push(new asn1js.Constructed({\n                            name: !isRepeated ? name : \"\",\n                            optional,\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: item.context,\n                            },\n                            value: value,\n                        }));\n                    }\n                }\n                else {\n                    asn1Value.push(new asn1js.Constructed({\n                        optional,\n                        idBlock: {\n                            tagClass: 3,\n                            tagNumber: item.context,\n                        },\n                        value: [asn1Item],\n                    }));\n                }\n            }\n            else {\n                asn1Item.optional = optional;\n                asn1Value.push(asn1Item);\n            }\n        }\n        switch (schema.type) {\n            case AsnTypeTypes.Sequence:\n                return new asn1js.Sequence({ value: asn1Value, name: \"\" });\n            case AsnTypeTypes.Set:\n                return new asn1js.Set({ value: asn1Value, name: \"\" });\n            case AsnTypeTypes.Choice:\n                return new asn1js.Choice({ value: asn1Value, name: \"\" });\n            default:\n                throw new Error(`Unsupported ASN1 type in use`);\n        }\n    }\n    set(target, schema) {\n        this.items.set(target, schema);\n        return this;\n    }\n    findParentSchema(target) {\n        const parent = Object.getPrototypeOf(target);\n        if (parent) {\n            const schema = this.items.get(parent);\n            return schema || this.findParentSchema(parent);\n        }\n        return null;\n    }\n}\n","import { AsnSchemaStorage } from \"./schema\";\nexport const schemaStorage = new AsnSchemaStorage();\n","import * as converters from \"./converters\";\nimport { AsnTypeTypes } from \"./enums\";\nimport { schemaStorage } from \"./storage\";\nexport const AsnType = (options) => (target) => {\n    let schema;\n    if (!schemaStorage.has(target)) {\n        schema = schemaStorage.createDefault(target);\n        schemaStorage.set(target, schema);\n    }\n    else {\n        schema = schemaStorage.get(target);\n    }\n    Object.assign(schema, options);\n};\nexport const AsnChoiceType = () => AsnType({ type: AsnTypeTypes.Choice });\nexport const AsnSetType = (options) => AsnType({ type: AsnTypeTypes.Set, ...options });\nexport const AsnSequenceType = (options) => AsnType({ type: AsnTypeTypes.Sequence, ...options });\nexport const AsnProp = (options) => (target, propertyKey) => {\n    let schema;\n    if (!schemaStorage.has(target.constructor)) {\n        schema = schemaStorage.createDefault(target.constructor);\n        schemaStorage.set(target.constructor, schema);\n    }\n    else {\n        schema = schemaStorage.get(target.constructor);\n    }\n    const copyOptions = Object.assign({}, options);\n    if (typeof copyOptions.type === \"number\" && !copyOptions.converter) {\n        const defaultConverter = converters.defaultConverter(options.type);\n        if (!defaultConverter) {\n            throw new Error(`Cannot get default converter for property '${propertyKey}' of ${target.constructor.name}`);\n        }\n        copyOptions.converter = defaultConverter;\n    }\n    schema.items[propertyKey] = copyOptions;\n};\n","export class AsnSchemaValidationError extends Error {\n    constructor() {\n        super(...arguments);\n        this.schemas = [];\n    }\n}\n","import * as asn1js from \"asn1js\";\nimport { AsnPropTypes, AsnTypeTypes } from \"./enums\";\nimport * as converters from \"./converters\";\nimport { AsnSchemaValidationError } from \"./errors\";\nimport { isConvertible, isTypeOfArray } from \"./helper\";\nimport { schemaStorage } from \"./storage\";\nexport class AsnParser {\n    static parse(data, target) {\n        const asn1Parsed = asn1js.fromBER(data);\n        if (asn1Parsed.result.error) {\n            throw new Error(asn1Parsed.result.error);\n        }\n        const res = this.fromASN(asn1Parsed.result, target);\n        return res;\n    }\n    static fromASN(asn1Schema, target) {\n        var _a;\n        try {\n            if (isConvertible(target)) {\n                const value = new target();\n                return value.fromASN(asn1Schema);\n            }\n            const schema = schemaStorage.get(target);\n            schemaStorage.cache(target);\n            let targetSchema = schema.schema;\n            if (asn1Schema.constructor === asn1js.Constructed && schema.type !== AsnTypeTypes.Choice) {\n                targetSchema = new asn1js.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: asn1Schema.idBlock.tagNumber,\n                    },\n                    value: schema.schema.valueBlock.value,\n                });\n                for (const key in schema.items) {\n                    delete asn1Schema[key];\n                }\n            }\n            const asn1ComparedSchema = asn1js.compareSchema({}, asn1Schema, targetSchema);\n            if (!asn1ComparedSchema.verified) {\n                throw new AsnSchemaValidationError(`Data does not match to ${target.name} ASN1 schema. ${asn1ComparedSchema.result.error}`);\n            }\n            const res = new target();\n            if (isTypeOfArray(target)) {\n                if (!(\"value\" in asn1Schema.valueBlock && Array.isArray(asn1Schema.valueBlock.value))) {\n                    throw new Error(`Cannot get items from the ASN.1 parsed value. ASN.1 object is not constructed.`);\n                }\n                const itemType = schema.itemType;\n                if (typeof itemType === \"number\") {\n                    const converter = converters.defaultConverter(itemType);\n                    if (!converter) {\n                        throw new Error(`Cannot get default converter for array item of ${target.name} ASN1 schema`);\n                    }\n                    return target.from(asn1Schema.valueBlock.value, (element) => converter.fromASN(element));\n                }\n                else {\n                    return target.from(asn1Schema.valueBlock.value, (element) => this.fromASN(element, itemType));\n                }\n            }\n            for (const key in schema.items) {\n                const asn1SchemaValue = asn1ComparedSchema.result[key];\n                if (!asn1SchemaValue) {\n                    continue;\n                }\n                const schemaItem = schema.items[key];\n                const schemaItemType = schemaItem.type;\n                if (typeof schemaItemType === \"number\" || isConvertible(schemaItemType)) {\n                    const converter = (_a = schemaItem.converter) !== null && _a !== void 0 ? _a : (isConvertible(schemaItemType)\n                        ? new schemaItemType()\n                        : null);\n                    if (!converter) {\n                        throw new Error(\"Converter is empty\");\n                    }\n                    if (schemaItem.repeated) {\n                        if (schemaItem.implicit) {\n                            const Container = schemaItem.repeated === \"sequence\"\n                                ? asn1js.Sequence\n                                : asn1js.Set;\n                            const newItem = new Container();\n                            newItem.valueBlock = asn1SchemaValue.valueBlock;\n                            const newItemAsn = asn1js.fromBER(newItem.toBER(false));\n                            if (newItemAsn.offset === -1) {\n                                throw new Error(`Cannot parse the child item. ${newItemAsn.result.error}`);\n                            }\n                            if (!(\"value\" in newItemAsn.result.valueBlock && Array.isArray(newItemAsn.result.valueBlock.value))) {\n                                throw new Error(\"Cannot get items from the ASN.1 parsed value. ASN.1 object is not constructed.\");\n                            }\n                            const value = newItemAsn.result.valueBlock.value;\n                            res[key] = Array.from(value, (element) => converter.fromASN(element));\n                        }\n                        else {\n                            res[key] = Array.from(asn1SchemaValue, (element) => converter.fromASN(element));\n                        }\n                    }\n                    else {\n                        let value = asn1SchemaValue;\n                        if (schemaItem.implicit) {\n                            let newItem;\n                            if (isConvertible(schemaItemType)) {\n                                newItem = new schemaItemType().toSchema(\"\");\n                            }\n                            else {\n                                const Asn1TypeName = AsnPropTypes[schemaItemType];\n                                const Asn1Type = asn1js[Asn1TypeName];\n                                if (!Asn1Type) {\n                                    throw new Error(`Cannot get '${Asn1TypeName}' class from asn1js module`);\n                                }\n                                newItem = new Asn1Type();\n                            }\n                            newItem.valueBlock = value.valueBlock;\n                            value = asn1js.fromBER(newItem.toBER(false)).result;\n                        }\n                        res[key] = converter.fromASN(value);\n                    }\n                }\n                else {\n                    if (schemaItem.repeated) {\n                        if (!Array.isArray(asn1SchemaValue)) {\n                            throw new Error(\"Cannot get list of items from the ASN.1 parsed value. ASN.1 value should be iterable.\");\n                        }\n                        res[key] = Array.from(asn1SchemaValue, (element) => this.fromASN(element, schemaItemType));\n                    }\n                    else {\n                        res[key] = this.fromASN(asn1SchemaValue, schemaItemType);\n                    }\n                }\n            }\n            return res;\n        }\n        catch (error) {\n            if (error instanceof AsnSchemaValidationError) {\n                error.schemas.push(target.name);\n            }\n            throw error;\n        }\n    }\n}\n","import * as asn1js from \"asn1js\";\nimport * as converters from \"./converters\";\nimport { AsnPropTypes, AsnTypeTypes } from \"./enums\";\nimport { isConvertible, isArrayEqual } from \"./helper\";\nimport { schemaStorage } from \"./storage\";\nexport class AsnSerializer {\n    static serialize(obj) {\n        if (obj instanceof asn1js.BaseBlock) {\n            return obj.toBER(false);\n        }\n        return this.toASN(obj).toBER(false);\n    }\n    static toASN(obj) {\n        if (obj && typeof obj === \"object\" && isConvertible(obj)) {\n            return obj.toASN();\n        }\n        if (!(obj && typeof obj === \"object\")) {\n            throw new TypeError(\"Parameter 1 should be type of Object.\");\n        }\n        const target = obj.constructor;\n        const schema = schemaStorage.get(target);\n        schemaStorage.cache(target);\n        let asn1Value = [];\n        if (schema.itemType) {\n            if (!Array.isArray(obj)) {\n                throw new TypeError(\"Parameter 1 should be type of Array.\");\n            }\n            if (typeof schema.itemType === \"number\") {\n                const converter = converters.defaultConverter(schema.itemType);\n                if (!converter) {\n                    throw new Error(`Cannot get default converter for array item of ${target.name} ASN1 schema`);\n                }\n                asn1Value = obj.map((o) => converter.toASN(o));\n            }\n            else {\n                asn1Value = obj.map((o) => this.toAsnItem({ type: schema.itemType }, \"[]\", target, o));\n            }\n        }\n        else {\n            for (const key in schema.items) {\n                const schemaItem = schema.items[key];\n                const objProp = obj[key];\n                if (objProp === undefined\n                    || schemaItem.defaultValue === objProp\n                    || (typeof schemaItem.defaultValue === \"object\" && typeof objProp === \"object\"\n                        && isArrayEqual(this.serialize(schemaItem.defaultValue), this.serialize(objProp)))) {\n                    continue;\n                }\n                const asn1Item = AsnSerializer.toAsnItem(schemaItem, key, target, objProp);\n                if (typeof schemaItem.context === \"number\") {\n                    if (schemaItem.implicit) {\n                        if (!schemaItem.repeated\n                            && (typeof schemaItem.type === \"number\" || isConvertible(schemaItem.type))) {\n                            const value = {};\n                            value.valueHex = asn1Item instanceof asn1js.Null ? asn1Item.valueBeforeDecodeView : asn1Item.valueBlock.toBER();\n                            asn1Value.push(new asn1js.Primitive({\n                                optional: schemaItem.optional,\n                                idBlock: {\n                                    tagClass: 3,\n                                    tagNumber: schemaItem.context,\n                                },\n                                ...value,\n                            }));\n                        }\n                        else {\n                            asn1Value.push(new asn1js.Constructed({\n                                optional: schemaItem.optional,\n                                idBlock: {\n                                    tagClass: 3,\n                                    tagNumber: schemaItem.context,\n                                },\n                                value: asn1Item.valueBlock.value,\n                            }));\n                        }\n                    }\n                    else {\n                        asn1Value.push(new asn1js.Constructed({\n                            optional: schemaItem.optional,\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: schemaItem.context,\n                            },\n                            value: [asn1Item],\n                        }));\n                    }\n                }\n                else if (schemaItem.repeated) {\n                    asn1Value = asn1Value.concat(asn1Item);\n                }\n                else {\n                    asn1Value.push(asn1Item);\n                }\n            }\n        }\n        let asnSchema;\n        switch (schema.type) {\n            case AsnTypeTypes.Sequence:\n                asnSchema = new asn1js.Sequence({ value: asn1Value });\n                break;\n            case AsnTypeTypes.Set:\n                asnSchema = new asn1js.Set({ value: asn1Value });\n                break;\n            case AsnTypeTypes.Choice:\n                if (!asn1Value[0]) {\n                    throw new Error(`Schema '${target.name}' has wrong data. Choice cannot be empty.`);\n                }\n                asnSchema = asn1Value[0];\n                break;\n        }\n        return asnSchema;\n    }\n    static toAsnItem(schemaItem, key, target, objProp) {\n        let asn1Item;\n        if (typeof (schemaItem.type) === \"number\") {\n            const converter = schemaItem.converter;\n            if (!converter) {\n                throw new Error(`Property '${key}' doesn't have converter for type ${AsnPropTypes[schemaItem.type]} in schema '${target.name}'`);\n            }\n            if (schemaItem.repeated) {\n                if (!Array.isArray(objProp)) {\n                    throw new TypeError(\"Parameter 'objProp' should be type of Array.\");\n                }\n                const items = Array.from(objProp, (element) => converter.toASN(element));\n                const Container = schemaItem.repeated === \"sequence\"\n                    ? asn1js.Sequence\n                    : asn1js.Set;\n                asn1Item = new Container({\n                    value: items,\n                });\n            }\n            else {\n                asn1Item = converter.toASN(objProp);\n            }\n        }\n        else {\n            if (schemaItem.repeated) {\n                if (!Array.isArray(objProp)) {\n                    throw new TypeError(\"Parameter 'objProp' should be type of Array.\");\n                }\n                const items = Array.from(objProp, (element) => this.toASN(element));\n                const Container = schemaItem.repeated === \"sequence\"\n                    ? asn1js.Sequence\n                    : asn1js.Set;\n                asn1Item = new Container({\n                    value: items,\n                });\n            }\n            else {\n                asn1Item = this.toASN(objProp);\n            }\n        }\n        return asn1Item;\n    }\n}\n","import * as asn1js from \"asn1js\";\nimport { BufferSourceConverter } from \"pvtsutils\";\nimport { AsnParser } from \"./parser\";\nimport { AsnSerializer } from \"./serializer\";\nexport class AsnConvert {\n    static serialize(obj) {\n        return AsnSerializer.serialize(obj);\n    }\n    static parse(data, target) {\n        return AsnParser.parse(data, target);\n    }\n    static toString(data) {\n        const buf = BufferSourceConverter.isBufferSource(data)\n            ? BufferSourceConverter.toArrayBuffer(data)\n            : AsnConvert.serialize(data);\n        const asn = asn1js.fromBER(buf);\n        if (asn.offset === -1) {\n            throw new Error(`Cannot decode ASN.1 data. ${asn.result.error}`);\n        }\n        return asn.result.toString();\n    }\n}\n","/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n        desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\nexport function __classPrivateFieldIn(state, receiver) {\r\n    if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\r\n    return typeof state === \"function\" ? receiver === state : state.has(receiver);\r\n}\r\n","/**\n * Copyright (c) 2020, Peculiar Ventures, All rights reserved.\n */\n\nclass JsonError extends Error {\r\n    constructor(message, innerError) {\r\n        super(innerError\r\n            ? `${message}. See the inner exception for more details.`\r\n            : message);\r\n        this.message = message;\r\n        this.innerError = innerError;\r\n    }\r\n}\n\nclass TransformError extends JsonError {\r\n    constructor(schema, message, innerError) {\r\n        super(message, innerError);\r\n        this.schema = schema;\r\n    }\r\n}\n\nclass ParserError extends TransformError {\r\n    constructor(schema, message, innerError) {\r\n        super(schema, `JSON doesn't match to '${schema.target.name}' schema. ${message}`, innerError);\r\n    }\r\n}\n\nclass ValidationError extends JsonError {\r\n}\n\nclass SerializerError extends JsonError {\r\n    constructor(schemaName, message, innerError) {\r\n        super(`Cannot serialize by '${schemaName}' schema. ${message}`, innerError);\r\n        this.schemaName = schemaName;\r\n    }\r\n}\n\nclass KeyError extends ParserError {\r\n    constructor(schema, keys, errors = {}) {\r\n        super(schema, \"Some keys doesn't match to schema\");\r\n        this.keys = keys;\r\n        this.errors = errors;\r\n    }\r\n}\n\nvar JsonPropTypes;\r\n(function (JsonPropTypes) {\r\n    JsonPropTypes[JsonPropTypes[\"Any\"] = 0] = \"Any\";\r\n    JsonPropTypes[JsonPropTypes[\"Boolean\"] = 1] = \"Boolean\";\r\n    JsonPropTypes[JsonPropTypes[\"Number\"] = 2] = \"Number\";\r\n    JsonPropTypes[JsonPropTypes[\"String\"] = 3] = \"String\";\r\n})(JsonPropTypes || (JsonPropTypes = {}));\n\nfunction checkType(value, type) {\r\n    switch (type) {\r\n        case JsonPropTypes.Boolean:\r\n            return typeof value === \"boolean\";\r\n        case JsonPropTypes.Number:\r\n            return typeof value === \"number\";\r\n        case JsonPropTypes.String:\r\n            return typeof value === \"string\";\r\n    }\r\n    return true;\r\n}\r\nfunction throwIfTypeIsWrong(value, type) {\r\n    if (!checkType(value, type)) {\r\n        throw new TypeError(`Value must be ${JsonPropTypes[type]}`);\r\n    }\r\n}\r\nfunction isConvertible(target) {\r\n    if (target && target.prototype) {\r\n        if (target.prototype.toJSON && target.prototype.fromJSON) {\r\n            return true;\r\n        }\r\n        else {\r\n            return isConvertible(target.prototype);\r\n        }\r\n    }\r\n    else {\r\n        return !!(target && target.toJSON && target.fromJSON);\r\n    }\r\n}\n\nclass JsonSchemaStorage {\r\n    constructor() {\r\n        this.items = new Map();\r\n    }\r\n    has(target) {\r\n        return this.items.has(target) || !!this.findParentSchema(target);\r\n    }\r\n    get(target) {\r\n        const schema = this.items.get(target) || this.findParentSchema(target);\r\n        if (!schema) {\r\n            throw new Error(\"Cannot get schema for current target\");\r\n        }\r\n        return schema;\r\n    }\r\n    create(target) {\r\n        const schema = { names: {} };\r\n        const parentSchema = this.findParentSchema(target);\r\n        if (parentSchema) {\r\n            Object.assign(schema, parentSchema);\r\n            schema.names = {};\r\n            for (const name in parentSchema.names) {\r\n                schema.names[name] = Object.assign({}, parentSchema.names[name]);\r\n            }\r\n        }\r\n        schema.target = target;\r\n        return schema;\r\n    }\r\n    set(target, schema) {\r\n        this.items.set(target, schema);\r\n        return this;\r\n    }\r\n    findParentSchema(target) {\r\n        const parent = target.__proto__;\r\n        if (parent) {\r\n            const schema = this.items.get(parent);\r\n            return schema || this.findParentSchema(parent);\r\n        }\r\n        return null;\r\n    }\r\n}\n\nconst DEFAULT_SCHEMA = \"default\";\r\nconst schemaStorage = new JsonSchemaStorage();\n\nclass PatternValidation {\r\n    constructor(pattern) {\r\n        this.pattern = new RegExp(pattern);\r\n    }\r\n    validate(value) {\r\n        const pattern = new RegExp(this.pattern.source, this.pattern.flags);\r\n        if (typeof value !== \"string\") {\r\n            throw new ValidationError(\"Incoming value must be string\");\r\n        }\r\n        if (!pattern.exec(value)) {\r\n            throw new ValidationError(`Value doesn't match to pattern '${pattern.toString()}'`);\r\n        }\r\n    }\r\n}\n\nclass InclusiveValidation {\r\n    constructor(min = Number.MIN_VALUE, max = Number.MAX_VALUE) {\r\n        this.min = min;\r\n        this.max = max;\r\n    }\r\n    validate(value) {\r\n        throwIfTypeIsWrong(value, JsonPropTypes.Number);\r\n        if (!(this.min <= value && value <= this.max)) {\r\n            const min = this.min === Number.MIN_VALUE ? \"MIN\" : this.min;\r\n            const max = this.max === Number.MAX_VALUE ? \"MAX\" : this.max;\r\n            throw new ValidationError(`Value doesn't match to diapason [${min},${max}]`);\r\n        }\r\n    }\r\n}\n\nclass ExclusiveValidation {\r\n    constructor(min = Number.MIN_VALUE, max = Number.MAX_VALUE) {\r\n        this.min = min;\r\n        this.max = max;\r\n    }\r\n    validate(value) {\r\n        throwIfTypeIsWrong(value, JsonPropTypes.Number);\r\n        if (!(this.min < value && value < this.max)) {\r\n            const min = this.min === Number.MIN_VALUE ? \"MIN\" : this.min;\r\n            const max = this.max === Number.MAX_VALUE ? \"MAX\" : this.max;\r\n            throw new ValidationError(`Value doesn't match to diapason (${min},${max})`);\r\n        }\r\n    }\r\n}\n\nclass LengthValidation {\r\n    constructor(length, minLength, maxLength) {\r\n        this.length = length;\r\n        this.minLength = minLength;\r\n        this.maxLength = maxLength;\r\n    }\r\n    validate(value) {\r\n        if (this.length !== undefined) {\r\n            if (value.length !== this.length) {\r\n                throw new ValidationError(`Value length must be exactly ${this.length}.`);\r\n            }\r\n            return;\r\n        }\r\n        if (this.minLength !== undefined) {\r\n            if (value.length < this.minLength) {\r\n                throw new ValidationError(`Value length must be more than ${this.minLength}.`);\r\n            }\r\n        }\r\n        if (this.maxLength !== undefined) {\r\n            if (value.length > this.maxLength) {\r\n                throw new ValidationError(`Value length must be less than ${this.maxLength}.`);\r\n            }\r\n        }\r\n    }\r\n}\n\nclass EnumerationValidation {\r\n    constructor(enumeration) {\r\n        this.enumeration = enumeration;\r\n    }\r\n    validate(value) {\r\n        throwIfTypeIsWrong(value, JsonPropTypes.String);\r\n        if (!this.enumeration.includes(value)) {\r\n            throw new ValidationError(`Value must be one of ${this.enumeration.map((v) => `'${v}'`).join(\", \")}`);\r\n        }\r\n    }\r\n}\n\nclass JsonTransform {\r\n    static checkValues(data, schemaItem) {\r\n        const values = Array.isArray(data) ? data : [data];\r\n        for (const value of values) {\r\n            for (const validation of schemaItem.validations) {\r\n                if (validation instanceof LengthValidation && schemaItem.repeated) {\r\n                    validation.validate(data);\r\n                }\r\n                else {\r\n                    validation.validate(value);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    static checkTypes(value, schemaItem) {\r\n        if (schemaItem.repeated && !Array.isArray(value)) {\r\n            throw new TypeError(\"Value must be Array\");\r\n        }\r\n        if (typeof schemaItem.type === \"number\") {\r\n            const values = Array.isArray(value) ? value : [value];\r\n            for (const v of values) {\r\n                throwIfTypeIsWrong(v, schemaItem.type);\r\n            }\r\n        }\r\n    }\r\n    static getSchemaByName(schema, name = DEFAULT_SCHEMA) {\r\n        return { ...schema.names[DEFAULT_SCHEMA], ...schema.names[name] };\r\n    }\r\n}\n\nclass JsonSerializer extends JsonTransform {\r\n    static serialize(obj, options, replacer, space) {\r\n        const json = this.toJSON(obj, options);\r\n        return JSON.stringify(json, replacer, space);\r\n    }\r\n    static toJSON(obj, options = {}) {\r\n        let res;\r\n        let targetSchema = options.targetSchema;\r\n        const schemaName = options.schemaName || DEFAULT_SCHEMA;\r\n        if (isConvertible(obj)) {\r\n            return obj.toJSON();\r\n        }\r\n        if (Array.isArray(obj)) {\r\n            res = [];\r\n            for (const item of obj) {\r\n                res.push(this.toJSON(item, options));\r\n            }\r\n        }\r\n        else if (typeof obj === \"object\") {\r\n            if (targetSchema && !schemaStorage.has(targetSchema)) {\r\n                throw new JsonError(\"Cannot get schema for `targetSchema` param\");\r\n            }\r\n            targetSchema = (targetSchema || obj.constructor);\r\n            if (schemaStorage.has(targetSchema)) {\r\n                const schema = schemaStorage.get(targetSchema);\r\n                res = {};\r\n                const namedSchema = this.getSchemaByName(schema, schemaName);\r\n                for (const key in namedSchema) {\r\n                    try {\r\n                        const item = namedSchema[key];\r\n                        const objItem = obj[key];\r\n                        let value;\r\n                        if ((item.optional && objItem === undefined)\r\n                            || (item.defaultValue !== undefined && objItem === item.defaultValue)) {\r\n                            continue;\r\n                        }\r\n                        if (!item.optional && objItem === undefined) {\r\n                            throw new SerializerError(targetSchema.name, `Property '${key}' is required.`);\r\n                        }\r\n                        if (typeof item.type === \"number\") {\r\n                            if (item.converter) {\r\n                                if (item.repeated) {\r\n                                    value = objItem.map((el) => item.converter.toJSON(el, obj));\r\n                                }\r\n                                else {\r\n                                    value = item.converter.toJSON(objItem, obj);\r\n                                }\r\n                            }\r\n                            else {\r\n                                value = objItem;\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (item.repeated) {\r\n                                value = objItem.map((el) => this.toJSON(el, { schemaName }));\r\n                            }\r\n                            else {\r\n                                value = this.toJSON(objItem, { schemaName });\r\n                            }\r\n                        }\r\n                        this.checkTypes(value, item);\r\n                        this.checkValues(value, item);\r\n                        res[item.name || key] = value;\r\n                    }\r\n                    catch (e) {\r\n                        if (e instanceof SerializerError) {\r\n                            throw e;\r\n                        }\r\n                        else {\r\n                            throw new SerializerError(schema.target.name, `Property '${key}' is wrong. ${e.message}`, e);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                res = {};\r\n                for (const key in obj) {\r\n                    res[key] = this.toJSON(obj[key], { schemaName });\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            res = obj;\r\n        }\r\n        return res;\r\n    }\r\n}\n\nclass JsonParser extends JsonTransform {\r\n    static parse(data, options) {\r\n        const obj = JSON.parse(data);\r\n        return this.fromJSON(obj, options);\r\n    }\r\n    static fromJSON(target, options) {\r\n        const targetSchema = options.targetSchema;\r\n        const schemaName = options.schemaName || DEFAULT_SCHEMA;\r\n        const obj = new targetSchema();\r\n        if (isConvertible(obj)) {\r\n            return obj.fromJSON(target);\r\n        }\r\n        const schema = schemaStorage.get(targetSchema);\r\n        const namedSchema = this.getSchemaByName(schema, schemaName);\r\n        const keyErrors = {};\r\n        if (options.strictProperty && !Array.isArray(target)) {\r\n            JsonParser.checkStrictProperty(target, namedSchema, schema);\r\n        }\r\n        for (const key in namedSchema) {\r\n            try {\r\n                const item = namedSchema[key];\r\n                const name = item.name || key;\r\n                const value = target[name];\r\n                if (value === undefined && (item.optional || item.defaultValue !== undefined)) {\r\n                    continue;\r\n                }\r\n                if (!item.optional && value === undefined) {\r\n                    throw new ParserError(schema, `Property '${name}' is required.`);\r\n                }\r\n                this.checkTypes(value, item);\r\n                this.checkValues(value, item);\r\n                if (typeof (item.type) === \"number\") {\r\n                    if (item.converter) {\r\n                        if (item.repeated) {\r\n                            obj[key] = value.map((el) => item.converter.fromJSON(el, obj));\r\n                        }\r\n                        else {\r\n                            obj[key] = item.converter.fromJSON(value, obj);\r\n                        }\r\n                    }\r\n                    else {\r\n                        obj[key] = value;\r\n                    }\r\n                }\r\n                else {\r\n                    const newOptions = {\r\n                        ...options,\r\n                        targetSchema: item.type,\r\n                        schemaName,\r\n                    };\r\n                    if (item.repeated) {\r\n                        obj[key] = value.map((el) => this.fromJSON(el, newOptions));\r\n                    }\r\n                    else {\r\n                        obj[key] = this.fromJSON(value, newOptions);\r\n                    }\r\n                }\r\n            }\r\n            catch (e) {\r\n                if (!(e instanceof ParserError)) {\r\n                    e = new ParserError(schema, `Property '${key}' is wrong. ${e.message}`, e);\r\n                }\r\n                if (options.strictAllKeys) {\r\n                    keyErrors[key] = e;\r\n                }\r\n                else {\r\n                    throw e;\r\n                }\r\n            }\r\n        }\r\n        const keys = Object.keys(keyErrors);\r\n        if (keys.length) {\r\n            throw new KeyError(schema, keys, keyErrors);\r\n        }\r\n        return obj;\r\n    }\r\n    static checkStrictProperty(target, namedSchema, schema) {\r\n        const jsonProps = Object.keys(target);\r\n        const schemaProps = Object.keys(namedSchema);\r\n        const keys = [];\r\n        for (const key of jsonProps) {\r\n            if (schemaProps.indexOf(key) === -1) {\r\n                keys.push(key);\r\n            }\r\n        }\r\n        if (keys.length) {\r\n            throw new KeyError(schema, keys);\r\n        }\r\n    }\r\n}\n\nfunction getValidations(item) {\r\n    const validations = [];\r\n    if (item.pattern) {\r\n        validations.push(new PatternValidation(item.pattern));\r\n    }\r\n    if (item.type === JsonPropTypes.Number || item.type === JsonPropTypes.Any) {\r\n        if (item.minInclusive !== undefined || item.maxInclusive !== undefined) {\r\n            validations.push(new InclusiveValidation(item.minInclusive, item.maxInclusive));\r\n        }\r\n        if (item.minExclusive !== undefined || item.maxExclusive !== undefined) {\r\n            validations.push(new ExclusiveValidation(item.minExclusive, item.maxExclusive));\r\n        }\r\n        if (item.enumeration !== undefined) {\r\n            validations.push(new EnumerationValidation(item.enumeration));\r\n        }\r\n    }\r\n    if (item.type === JsonPropTypes.String || item.repeated || item.type === JsonPropTypes.Any) {\r\n        if (item.length !== undefined || item.minLength !== undefined || item.maxLength !== undefined) {\r\n            validations.push(new LengthValidation(item.length, item.minLength, item.maxLength));\r\n        }\r\n    }\r\n    return validations;\r\n}\r\nconst JsonProp = (options = {}) => (target, propertyKey) => {\r\n    const errorMessage = `Cannot set type for ${propertyKey} property of ${target.constructor.name} schema`;\r\n    let schema;\r\n    if (!schemaStorage.has(target.constructor)) {\r\n        schema = schemaStorage.create(target.constructor);\r\n        schemaStorage.set(target.constructor, schema);\r\n    }\r\n    else {\r\n        schema = schemaStorage.get(target.constructor);\r\n        if (schema.target !== target.constructor) {\r\n            schema = schemaStorage.create(target.constructor);\r\n            schemaStorage.set(target.constructor, schema);\r\n        }\r\n    }\r\n    const defaultSchema = {\r\n        type: JsonPropTypes.Any,\r\n        validations: [],\r\n    };\r\n    const copyOptions = Object.assign(defaultSchema, options);\r\n    copyOptions.validations = getValidations(copyOptions);\r\n    if (typeof copyOptions.type !== \"number\") {\r\n        if (!schemaStorage.has(copyOptions.type) && !isConvertible(copyOptions.type)) {\r\n            throw new Error(`${errorMessage}. Assigning type doesn't have schema.`);\r\n        }\r\n    }\r\n    let schemaNames;\r\n    if (Array.isArray(options.schema)) {\r\n        schemaNames = options.schema;\r\n    }\r\n    else {\r\n        schemaNames = [options.schema || DEFAULT_SCHEMA];\r\n    }\r\n    for (const schemaName of schemaNames) {\r\n        if (!schema.names[schemaName]) {\r\n            schema.names[schemaName] = {};\r\n        }\r\n        const namedSchema = schema.names[schemaName];\r\n        namedSchema[propertyKey] = copyOptions;\r\n    }\r\n};\n\nexport { JsonError, JsonParser, JsonProp, JsonPropTypes, JsonSerializer, KeyError, ParserError, SerializerError, TransformError, ValidationError };\n","/*!\n Copyright (c) Peculiar Ventures, LLC\n*/\n\nimport { Convert, BufferSourceConverter, combine } from 'pvtsutils';\nexport { BufferSourceConverter } from 'pvtsutils';\nimport { AsnProp, AsnPropTypes, AsnType, AsnTypeTypes, AsnIntegerConverter, AsnSerializer, AsnConvert } from '@peculiar/asn1-schema';\nimport { __decorate } from 'tslib';\nimport { JsonProp, JsonPropTypes } from '@peculiar/json-schema';\nimport * as asn1 from 'asn1js';\n\nclass CryptoError extends Error {\r\n}\n\nclass AlgorithmError extends CryptoError {\r\n}\n\nclass UnsupportedOperationError extends CryptoError {\r\n    constructor(methodName) {\r\n        super(`Unsupported operation: ${methodName ? `${methodName}` : \"\"}`);\r\n    }\r\n}\n\nclass OperationError extends CryptoError {\r\n}\n\nclass RequiredPropertyError extends CryptoError {\r\n    constructor(propName) {\r\n        super(`${propName}: Missing required property`);\r\n    }\r\n}\n\nclass PemConverter {\r\n    static toArrayBuffer(pem) {\r\n        const base64 = pem\r\n            .replace(/-{5}(BEGIN|END) .*-{5}/g, \"\")\r\n            .replace(\"\\r\", \"\")\r\n            .replace(\"\\n\", \"\");\r\n        return Convert.FromBase64(base64);\r\n    }\r\n    static toUint8Array(pem) {\r\n        const bytes = this.toArrayBuffer(pem);\r\n        return new Uint8Array(bytes);\r\n    }\r\n    static fromBufferSource(buffer, tag) {\r\n        const base64 = Convert.ToBase64(buffer);\r\n        let sliced;\r\n        let offset = 0;\r\n        const rows = [];\r\n        while (true) {\r\n            sliced = base64.slice(offset, offset = offset + 64);\r\n            if (sliced.length) {\r\n                rows.push(sliced);\r\n                if (sliced.length < 64) {\r\n                    break;\r\n                }\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        const upperCaseTag = tag.toUpperCase();\r\n        return `-----BEGIN ${upperCaseTag}-----\\n${rows.join(\"\\n\")}\\n-----END ${upperCaseTag}-----`;\r\n    }\r\n    static isPEM(data) {\r\n        return /-----BEGIN .+-----[A-Za-z0-9+\\/\\+\\=\\s\\n]+-----END .+-----/i.test(data);\r\n    }\r\n    static getTagName(pem) {\r\n        if (!this.isPEM(pem)) {\r\n            throw new Error(\"Bad parameter. Incoming data is not right PEM\");\r\n        }\r\n        const res = /-----BEGIN (.+)-----/.exec(pem);\r\n        if (!res) {\r\n            throw new Error(\"Cannot get tag from PEM\");\r\n        }\r\n        return res[1];\r\n    }\r\n    static hasTagName(pem, tagName) {\r\n        const tag = this.getTagName(pem);\r\n        return tagName.toLowerCase() === tag.toLowerCase();\r\n    }\r\n    static isCertificate(pem) {\r\n        return this.hasTagName(pem, \"certificate\");\r\n    }\r\n    static isCertificateRequest(pem) {\r\n        return this.hasTagName(pem, \"certificate request\");\r\n    }\r\n    static isCRL(pem) {\r\n        return this.hasTagName(pem, \"x509 crl\");\r\n    }\r\n    static isPublicKey(pem) {\r\n        return this.hasTagName(pem, \"public key\");\r\n    }\r\n}\n\nfunction isJWK(data) {\r\n    return typeof data === \"object\" && \"kty\" in data;\r\n}\n\nclass ProviderCrypto {\r\n    async digest(...args) {\r\n        this.checkDigest.apply(this, args);\r\n        return this.onDigest.apply(this, args);\r\n    }\r\n    checkDigest(algorithm, data) {\r\n        this.checkAlgorithmName(algorithm);\r\n    }\r\n    async onDigest(algorithm, data) {\r\n        throw new UnsupportedOperationError(\"digest\");\r\n    }\r\n    async generateKey(...args) {\r\n        this.checkGenerateKey.apply(this, args);\r\n        return this.onGenerateKey.apply(this, args);\r\n    }\r\n    checkGenerateKey(algorithm, extractable, keyUsages, ...args) {\r\n        this.checkAlgorithmName(algorithm);\r\n        this.checkGenerateKeyParams(algorithm);\r\n        if (!(keyUsages && keyUsages.length)) {\r\n            throw new TypeError(`Usages cannot be empty when creating a key.`);\r\n        }\r\n        let allowedUsages;\r\n        if (Array.isArray(this.usages)) {\r\n            allowedUsages = this.usages;\r\n        }\r\n        else {\r\n            allowedUsages = this.usages.privateKey.concat(this.usages.publicKey);\r\n        }\r\n        this.checkKeyUsages(keyUsages, allowedUsages);\r\n    }\r\n    checkGenerateKeyParams(algorithm) {\r\n    }\r\n    async onGenerateKey(algorithm, extractable, keyUsages, ...args) {\r\n        throw new UnsupportedOperationError(\"generateKey\");\r\n    }\r\n    async sign(...args) {\r\n        this.checkSign.apply(this, args);\r\n        return this.onSign.apply(this, args);\r\n    }\r\n    checkSign(algorithm, key, data, ...args) {\r\n        this.checkAlgorithmName(algorithm);\r\n        this.checkAlgorithmParams(algorithm);\r\n        this.checkCryptoKey(key, \"sign\");\r\n    }\r\n    async onSign(algorithm, key, data, ...args) {\r\n        throw new UnsupportedOperationError(\"sign\");\r\n    }\r\n    async verify(...args) {\r\n        this.checkVerify.apply(this, args);\r\n        return this.onVerify.apply(this, args);\r\n    }\r\n    checkVerify(algorithm, key, signature, data, ...args) {\r\n        this.checkAlgorithmName(algorithm);\r\n        this.checkAlgorithmParams(algorithm);\r\n        this.checkCryptoKey(key, \"verify\");\r\n    }\r\n    async onVerify(algorithm, key, signature, data, ...args) {\r\n        throw new UnsupportedOperationError(\"verify\");\r\n    }\r\n    async encrypt(...args) {\r\n        this.checkEncrypt.apply(this, args);\r\n        return this.onEncrypt.apply(this, args);\r\n    }\r\n    checkEncrypt(algorithm, key, data, options = {}, ...args) {\r\n        this.checkAlgorithmName(algorithm);\r\n        this.checkAlgorithmParams(algorithm);\r\n        this.checkCryptoKey(key, options.keyUsage ? \"encrypt\" : void 0);\r\n    }\r\n    async onEncrypt(algorithm, key, data, ...args) {\r\n        throw new UnsupportedOperationError(\"encrypt\");\r\n    }\r\n    async decrypt(...args) {\r\n        this.checkDecrypt.apply(this, args);\r\n        return this.onDecrypt.apply(this, args);\r\n    }\r\n    checkDecrypt(algorithm, key, data, options = {}, ...args) {\r\n        this.checkAlgorithmName(algorithm);\r\n        this.checkAlgorithmParams(algorithm);\r\n        this.checkCryptoKey(key, options.keyUsage ? \"decrypt\" : void 0);\r\n    }\r\n    async onDecrypt(algorithm, key, data, ...args) {\r\n        throw new UnsupportedOperationError(\"decrypt\");\r\n    }\r\n    async deriveBits(...args) {\r\n        this.checkDeriveBits.apply(this, args);\r\n        return this.onDeriveBits.apply(this, args);\r\n    }\r\n    checkDeriveBits(algorithm, baseKey, length, options = {}, ...args) {\r\n        this.checkAlgorithmName(algorithm);\r\n        this.checkAlgorithmParams(algorithm);\r\n        this.checkCryptoKey(baseKey, options.keyUsage ? \"deriveBits\" : void 0);\r\n        if (length % 8 !== 0) {\r\n            throw new OperationError(\"length: Is not multiple of 8\");\r\n        }\r\n    }\r\n    async onDeriveBits(algorithm, baseKey, length, ...args) {\r\n        throw new UnsupportedOperationError(\"deriveBits\");\r\n    }\r\n    async exportKey(...args) {\r\n        this.checkExportKey.apply(this, args);\r\n        return this.onExportKey.apply(this, args);\r\n    }\r\n    checkExportKey(format, key, ...args) {\r\n        this.checkKeyFormat(format);\r\n        this.checkCryptoKey(key);\r\n        if (!key.extractable) {\r\n            throw new CryptoError(\"key: Is not extractable\");\r\n        }\r\n    }\r\n    async onExportKey(format, key, ...args) {\r\n        throw new UnsupportedOperationError(\"exportKey\");\r\n    }\r\n    async importKey(...args) {\r\n        this.checkImportKey.apply(this, args);\r\n        return this.onImportKey.apply(this, args);\r\n    }\r\n    checkImportKey(format, keyData, algorithm, extractable, keyUsages, ...args) {\r\n        this.checkKeyFormat(format);\r\n        this.checkKeyData(format, keyData);\r\n        this.checkAlgorithmName(algorithm);\r\n        this.checkImportParams(algorithm);\r\n        if (Array.isArray(this.usages)) {\r\n            this.checkKeyUsages(keyUsages, this.usages);\r\n        }\r\n    }\r\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages, ...args) {\r\n        throw new UnsupportedOperationError(\"importKey\");\r\n    }\r\n    checkAlgorithmName(algorithm) {\r\n        if (algorithm.name.toLowerCase() !== this.name.toLowerCase()) {\r\n            throw new AlgorithmError(\"Unrecognized name\");\r\n        }\r\n    }\r\n    checkAlgorithmParams(algorithm) {\r\n    }\r\n    checkDerivedKeyParams(algorithm) {\r\n    }\r\n    checkKeyUsages(usages, allowed) {\r\n        for (const usage of usages) {\r\n            if (allowed.indexOf(usage) === -1) {\r\n                throw new TypeError(\"Cannot create a key using the specified key usages\");\r\n            }\r\n        }\r\n    }\r\n    checkCryptoKey(key, keyUsage) {\r\n        this.checkAlgorithmName(key.algorithm);\r\n        if (keyUsage && key.usages.indexOf(keyUsage) === -1) {\r\n            throw new CryptoError(`key does not match that of operation`);\r\n        }\r\n    }\r\n    checkRequiredProperty(data, propName) {\r\n        if (!(propName in data)) {\r\n            throw new RequiredPropertyError(propName);\r\n        }\r\n    }\r\n    checkHashAlgorithm(algorithm, hashAlgorithms) {\r\n        for (const item of hashAlgorithms) {\r\n            if (item.toLowerCase() === algorithm.name.toLowerCase()) {\r\n                return;\r\n            }\r\n        }\r\n        throw new OperationError(`hash: Must be one of ${hashAlgorithms.join(\", \")}`);\r\n    }\r\n    checkImportParams(algorithm) {\r\n    }\r\n    checkKeyFormat(format) {\r\n        switch (format) {\r\n            case \"raw\":\r\n            case \"pkcs8\":\r\n            case \"spki\":\r\n            case \"jwk\":\r\n                break;\r\n            default:\r\n                throw new TypeError(\"format: Is invalid value. Must be 'jwk', 'raw', 'spki', or 'pkcs8'\");\r\n        }\r\n    }\r\n    checkKeyData(format, keyData) {\r\n        if (!keyData) {\r\n            throw new TypeError(\"keyData: Cannot be empty on empty on key importing\");\r\n        }\r\n        if (format === \"jwk\") {\r\n            if (!isJWK(keyData)) {\r\n                throw new TypeError(\"keyData: Is not JsonWebToken\");\r\n            }\r\n        }\r\n        else if (!BufferSourceConverter.isBufferSource(keyData)) {\r\n            throw new TypeError(\"keyData: Is not ArrayBufferView or ArrayBuffer\");\r\n        }\r\n    }\r\n    prepareData(data) {\r\n        return BufferSourceConverter.toArrayBuffer(data);\r\n    }\r\n}\n\nclass AesProvider extends ProviderCrypto {\r\n    checkGenerateKeyParams(algorithm) {\r\n        this.checkRequiredProperty(algorithm, \"length\");\r\n        if (typeof algorithm.length !== \"number\") {\r\n            throw new TypeError(\"length: Is not of type Number\");\r\n        }\r\n        switch (algorithm.length) {\r\n            case 128:\r\n            case 192:\r\n            case 256:\r\n                break;\r\n            default:\r\n                throw new TypeError(\"length: Must be 128, 192, or 256\");\r\n        }\r\n    }\r\n    checkDerivedKeyParams(algorithm) {\r\n        this.checkGenerateKeyParams(algorithm);\r\n    }\r\n}\n\nclass AesCbcProvider extends AesProvider {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.name = \"AES-CBC\";\r\n        this.usages = [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"];\r\n    }\r\n    checkAlgorithmParams(algorithm) {\r\n        this.checkRequiredProperty(algorithm, \"iv\");\r\n        if (!(algorithm.iv instanceof ArrayBuffer || ArrayBuffer.isView(algorithm.iv))) {\r\n            throw new TypeError(\"iv: Is not of type '(ArrayBuffer or ArrayBufferView)'\");\r\n        }\r\n        if (algorithm.iv.byteLength !== 16) {\r\n            throw new TypeError(\"iv: Must have length 16 bytes\");\r\n        }\r\n    }\r\n}\n\nclass AesCmacProvider extends AesProvider {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.name = \"AES-CMAC\";\r\n        this.usages = [\"sign\", \"verify\"];\r\n    }\r\n    checkAlgorithmParams(algorithm) {\r\n        this.checkRequiredProperty(algorithm, \"length\");\r\n        if (typeof algorithm.length !== \"number\") {\r\n            throw new TypeError(\"length: Is not a Number\");\r\n        }\r\n        if (algorithm.length < 1) {\r\n            throw new OperationError(\"length: Must be more than 0\");\r\n        }\r\n    }\r\n}\n\nclass AesCtrProvider extends AesProvider {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.name = \"AES-CTR\";\r\n        this.usages = [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"];\r\n    }\r\n    checkAlgorithmParams(algorithm) {\r\n        this.checkRequiredProperty(algorithm, \"counter\");\r\n        if (!(algorithm.counter instanceof ArrayBuffer || ArrayBuffer.isView(algorithm.counter))) {\r\n            throw new TypeError(\"counter: Is not of type '(ArrayBuffer or ArrayBufferView)'\");\r\n        }\r\n        if (algorithm.counter.byteLength !== 16) {\r\n            throw new TypeError(\"iv: Must have length 16 bytes\");\r\n        }\r\n        this.checkRequiredProperty(algorithm, \"length\");\r\n        if (typeof algorithm.length !== \"number\") {\r\n            throw new TypeError(\"length: Is not a Number\");\r\n        }\r\n        if (algorithm.length < 1) {\r\n            throw new OperationError(\"length: Must be more than 0\");\r\n        }\r\n    }\r\n}\n\nclass AesEcbProvider extends AesProvider {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.name = \"AES-ECB\";\r\n        this.usages = [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"];\r\n    }\r\n}\n\nclass AesGcmProvider extends AesProvider {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.name = \"AES-GCM\";\r\n        this.usages = [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"];\r\n    }\r\n    checkAlgorithmParams(algorithm) {\r\n        this.checkRequiredProperty(algorithm, \"iv\");\r\n        if (!(algorithm.iv instanceof ArrayBuffer || ArrayBuffer.isView(algorithm.iv))) {\r\n            throw new TypeError(\"iv: Is not of type '(ArrayBuffer or ArrayBufferView)'\");\r\n        }\r\n        if (algorithm.iv.byteLength < 1) {\r\n            throw new OperationError(\"iv: Must have length more than 0 and less than 2^64 - 1\");\r\n        }\r\n        if (!(\"tagLength\" in algorithm)) {\r\n            algorithm.tagLength = 128;\r\n        }\r\n        switch (algorithm.tagLength) {\r\n            case 32:\r\n            case 64:\r\n            case 96:\r\n            case 104:\r\n            case 112:\r\n            case 120:\r\n            case 128:\r\n                break;\r\n            default:\r\n                throw new OperationError(\"tagLength: Must be one of 32, 64, 96, 104, 112, 120 or 128\");\r\n        }\r\n    }\r\n}\n\nclass AesKwProvider extends AesProvider {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.name = \"AES-KW\";\r\n        this.usages = [\"wrapKey\", \"unwrapKey\"];\r\n    }\r\n}\n\nclass DesProvider extends ProviderCrypto {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.usages = [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"];\r\n    }\r\n    checkAlgorithmParams(algorithm) {\r\n        if (this.ivSize) {\r\n            this.checkRequiredProperty(algorithm, \"iv\");\r\n            if (!(algorithm.iv instanceof ArrayBuffer || ArrayBuffer.isView(algorithm.iv))) {\r\n                throw new TypeError(\"iv: Is not of type '(ArrayBuffer or ArrayBufferView)'\");\r\n            }\r\n            if (algorithm.iv.byteLength !== this.ivSize) {\r\n                throw new TypeError(`iv: Must have length ${this.ivSize} bytes`);\r\n            }\r\n        }\r\n    }\r\n    checkGenerateKeyParams(algorithm) {\r\n        this.checkRequiredProperty(algorithm, \"length\");\r\n        if (typeof algorithm.length !== \"number\") {\r\n            throw new TypeError(\"length: Is not of type Number\");\r\n        }\r\n        if (algorithm.length !== this.keySizeBits) {\r\n            throw new OperationError(`algorithm.length: Must be ${this.keySizeBits}`);\r\n        }\r\n    }\r\n    checkDerivedKeyParams(algorithm) {\r\n        this.checkGenerateKeyParams(algorithm);\r\n    }\r\n}\n\nclass RsaProvider extends ProviderCrypto {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.hashAlgorithms = [\"SHA-1\", \"SHA-256\", \"SHA-384\", \"SHA-512\"];\r\n    }\r\n    checkGenerateKeyParams(algorithm) {\r\n        this.checkRequiredProperty(algorithm, \"hash\");\r\n        this.checkHashAlgorithm(algorithm.hash, this.hashAlgorithms);\r\n        this.checkRequiredProperty(algorithm, \"publicExponent\");\r\n        if (!(algorithm.publicExponent && algorithm.publicExponent instanceof Uint8Array)) {\r\n            throw new TypeError(\"publicExponent: Missing or not a Uint8Array\");\r\n        }\r\n        const publicExponent = Convert.ToBase64(algorithm.publicExponent);\r\n        if (!(publicExponent === \"Aw==\" || publicExponent === \"AQAB\")) {\r\n            throw new TypeError(\"publicExponent: Must be [3] or [1,0,1]\");\r\n        }\r\n        this.checkRequiredProperty(algorithm, \"modulusLength\");\r\n        if (algorithm.modulusLength % 8\r\n            || algorithm.modulusLength < 256\r\n            || algorithm.modulusLength > 16384) {\r\n            throw new TypeError(\"The modulus length must be a multiple of 8 bits and >= 256 and <= 16384\");\r\n        }\r\n    }\r\n    checkImportParams(algorithm) {\r\n        this.checkRequiredProperty(algorithm, \"hash\");\r\n        this.checkHashAlgorithm(algorithm.hash, this.hashAlgorithms);\r\n    }\r\n}\n\nclass RsaSsaProvider extends RsaProvider {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.name = \"RSASSA-PKCS1-v1_5\";\r\n        this.usages = {\r\n            privateKey: [\"sign\"],\r\n            publicKey: [\"verify\"],\r\n        };\r\n    }\r\n}\n\nclass RsaPssProvider extends RsaProvider {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.name = \"RSA-PSS\";\r\n        this.usages = {\r\n            privateKey: [\"sign\"],\r\n            publicKey: [\"verify\"],\r\n        };\r\n    }\r\n    checkAlgorithmParams(algorithm) {\r\n        this.checkRequiredProperty(algorithm, \"saltLength\");\r\n        if (typeof algorithm.saltLength !== \"number\") {\r\n            throw new TypeError(\"saltLength: Is not a Number\");\r\n        }\r\n        if (algorithm.saltLength < 0) {\r\n            throw new RangeError(\"saltLength: Must be positive number\");\r\n        }\r\n    }\r\n}\n\nclass RsaOaepProvider extends RsaProvider {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.name = \"RSA-OAEP\";\r\n        this.usages = {\r\n            privateKey: [\"decrypt\", \"unwrapKey\"],\r\n            publicKey: [\"encrypt\", \"wrapKey\"],\r\n        };\r\n    }\r\n    checkAlgorithmParams(algorithm) {\r\n        if (algorithm.label\r\n            && !(algorithm.label instanceof ArrayBuffer || ArrayBuffer.isView(algorithm.label))) {\r\n            throw new TypeError(\"label: Is not of type '(ArrayBuffer or ArrayBufferView)'\");\r\n        }\r\n    }\r\n}\n\nclass EllipticProvider extends ProviderCrypto {\r\n    checkGenerateKeyParams(algorithm) {\r\n        this.checkRequiredProperty(algorithm, \"namedCurve\");\r\n        this.checkNamedCurve(algorithm.namedCurve);\r\n    }\r\n    checkNamedCurve(namedCurve) {\r\n        for (const item of this.namedCurves) {\r\n            if (item.toLowerCase() === namedCurve.toLowerCase()) {\r\n                return;\r\n            }\r\n        }\r\n        throw new OperationError(`namedCurve: Must be one of ${this.namedCurves.join(\", \")}`);\r\n    }\r\n}\n\nclass EcdsaProvider extends EllipticProvider {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.name = \"ECDSA\";\r\n        this.hashAlgorithms = [\"SHA-1\", \"SHA-256\", \"SHA-384\", \"SHA-512\"];\r\n        this.usages = {\r\n            privateKey: [\"sign\"],\r\n            publicKey: [\"verify\"],\r\n        };\r\n        this.namedCurves = [\"P-256\", \"P-384\", \"P-521\", \"K-256\"];\r\n    }\r\n    checkAlgorithmParams(algorithm) {\r\n        this.checkRequiredProperty(algorithm, \"hash\");\r\n        this.checkHashAlgorithm(algorithm.hash, this.hashAlgorithms);\r\n    }\r\n}\n\nconst KEY_TYPES = [\"secret\", \"private\", \"public\"];\r\nclass CryptoKey {\r\n    static create(algorithm, type, extractable, usages) {\r\n        const key = new this();\r\n        key.algorithm = algorithm;\r\n        key.type = type;\r\n        key.extractable = extractable;\r\n        key.usages = usages;\r\n        return key;\r\n    }\r\n    static isKeyType(data) {\r\n        return KEY_TYPES.indexOf(data) !== -1;\r\n    }\r\n    get [Symbol.toStringTag]() {\r\n        return \"CryptoKey\";\r\n    }\r\n}\n\nclass EcdhProvider extends EllipticProvider {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.name = \"ECDH\";\r\n        this.usages = {\r\n            privateKey: [\"deriveBits\", \"deriveKey\"],\r\n            publicKey: [],\r\n        };\r\n        this.namedCurves = [\"P-256\", \"P-384\", \"P-521\", \"K-256\"];\r\n    }\r\n    checkAlgorithmParams(algorithm) {\r\n        this.checkRequiredProperty(algorithm, \"public\");\r\n        if (!(algorithm.public instanceof CryptoKey)) {\r\n            throw new TypeError(\"public: Is not a CryptoKey\");\r\n        }\r\n        if (algorithm.public.type !== \"public\") {\r\n            throw new OperationError(\"public: Is not a public key\");\r\n        }\r\n        if (algorithm.public.algorithm.name !== this.name) {\r\n            throw new OperationError(`public: Is not ${this.name} key`);\r\n        }\r\n    }\r\n}\n\nclass EcdhEsProvider extends EcdhProvider {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.name = \"ECDH-ES\";\r\n        this.namedCurves = [\"X25519\", \"X448\"];\r\n    }\r\n}\n\nclass EdDsaProvider extends EllipticProvider {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.name = \"EdDSA\";\r\n        this.usages = {\r\n            privateKey: [\"sign\"],\r\n            publicKey: [\"verify\"],\r\n        };\r\n        this.namedCurves = [\"Ed25519\", \"Ed448\"];\r\n    }\r\n}\n\nlet ObjectIdentifier = class ObjectIdentifier {\r\n    constructor(value) {\r\n        if (value) {\r\n            this.value = value;\r\n        }\r\n    }\r\n};\r\n__decorate([\r\n    AsnProp({ type: AsnPropTypes.ObjectIdentifier })\r\n], ObjectIdentifier.prototype, \"value\", void 0);\r\nObjectIdentifier = __decorate([\r\n    AsnType({ type: AsnTypeTypes.Choice })\r\n], ObjectIdentifier);\n\nclass AlgorithmIdentifier {\r\n    constructor(params) {\r\n        Object.assign(this, params);\r\n    }\r\n}\r\n__decorate([\r\n    AsnProp({\r\n        type: AsnPropTypes.ObjectIdentifier,\r\n    })\r\n], AlgorithmIdentifier.prototype, \"algorithm\", void 0);\r\n__decorate([\r\n    AsnProp({\r\n        type: AsnPropTypes.Any,\r\n        optional: true,\r\n    })\r\n], AlgorithmIdentifier.prototype, \"parameters\", void 0);\n\nclass PrivateKeyInfo {\r\n    constructor() {\r\n        this.version = 0;\r\n        this.privateKeyAlgorithm = new AlgorithmIdentifier();\r\n        this.privateKey = new ArrayBuffer(0);\r\n    }\r\n}\r\n__decorate([\r\n    AsnProp({ type: AsnPropTypes.Integer })\r\n], PrivateKeyInfo.prototype, \"version\", void 0);\r\n__decorate([\r\n    AsnProp({ type: AlgorithmIdentifier })\r\n], PrivateKeyInfo.prototype, \"privateKeyAlgorithm\", void 0);\r\n__decorate([\r\n    AsnProp({ type: AsnPropTypes.OctetString })\r\n], PrivateKeyInfo.prototype, \"privateKey\", void 0);\r\n__decorate([\r\n    AsnProp({ type: AsnPropTypes.Any, optional: true })\r\n], PrivateKeyInfo.prototype, \"attributes\", void 0);\n\nclass PublicKeyInfo {\r\n    constructor() {\r\n        this.publicKeyAlgorithm = new AlgorithmIdentifier();\r\n        this.publicKey = new ArrayBuffer(0);\r\n    }\r\n}\r\n__decorate([\r\n    AsnProp({ type: AlgorithmIdentifier })\r\n], PublicKeyInfo.prototype, \"publicKeyAlgorithm\", void 0);\r\n__decorate([\r\n    AsnProp({ type: AsnPropTypes.BitString })\r\n], PublicKeyInfo.prototype, \"publicKey\", void 0);\n\nconst JsonBase64UrlArrayBufferConverter = {\r\n    fromJSON: (value) => Convert.FromBase64Url(value),\r\n    toJSON: (value) => Convert.ToBase64Url(new Uint8Array(value)),\r\n};\n\nconst AsnIntegerArrayBufferConverter = {\r\n    fromASN: (value) => {\r\n        const valueHex = value.valueBlock.valueHex;\r\n        return !(new Uint8Array(valueHex)[0])\r\n            ? value.valueBlock.valueHex.slice(1)\r\n            : value.valueBlock.valueHex;\r\n    },\r\n    toASN: (value) => {\r\n        const valueHex = new Uint8Array(value)[0] > 127\r\n            ? combine(new Uint8Array([0]).buffer, value)\r\n            : value;\r\n        return new asn1.Integer({ valueHex });\r\n    },\r\n};\n\nvar index$3 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  JsonBase64UrlArrayBufferConverter: JsonBase64UrlArrayBufferConverter,\n  AsnIntegerArrayBufferConverter: AsnIntegerArrayBufferConverter\n});\n\nclass RsaPrivateKey {\r\n    constructor() {\r\n        this.version = 0;\r\n        this.modulus = new ArrayBuffer(0);\r\n        this.publicExponent = new ArrayBuffer(0);\r\n        this.privateExponent = new ArrayBuffer(0);\r\n        this.prime1 = new ArrayBuffer(0);\r\n        this.prime2 = new ArrayBuffer(0);\r\n        this.exponent1 = new ArrayBuffer(0);\r\n        this.exponent2 = new ArrayBuffer(0);\r\n        this.coefficient = new ArrayBuffer(0);\r\n    }\r\n}\r\n__decorate([\r\n    AsnProp({ type: AsnPropTypes.Integer, converter: AsnIntegerConverter })\r\n], RsaPrivateKey.prototype, \"version\", void 0);\r\n__decorate([\r\n    AsnProp({ type: AsnPropTypes.Integer, converter: AsnIntegerArrayBufferConverter }),\r\n    JsonProp({ name: \"n\", converter: JsonBase64UrlArrayBufferConverter })\r\n], RsaPrivateKey.prototype, \"modulus\", void 0);\r\n__decorate([\r\n    AsnProp({ type: AsnPropTypes.Integer, converter: AsnIntegerArrayBufferConverter }),\r\n    JsonProp({ name: \"e\", converter: JsonBase64UrlArrayBufferConverter })\r\n], RsaPrivateKey.prototype, \"publicExponent\", void 0);\r\n__decorate([\r\n    AsnProp({ type: AsnPropTypes.Integer, converter: AsnIntegerArrayBufferConverter }),\r\n    JsonProp({ name: \"d\", converter: JsonBase64UrlArrayBufferConverter })\r\n], RsaPrivateKey.prototype, \"privateExponent\", void 0);\r\n__decorate([\r\n    AsnProp({ type: AsnPropTypes.Integer, converter: AsnIntegerArrayBufferConverter }),\r\n    JsonProp({ name: \"p\", converter: JsonBase64UrlArrayBufferConverter })\r\n], RsaPrivateKey.prototype, \"prime1\", void 0);\r\n__decorate([\r\n    AsnProp({ type: AsnPropTypes.Integer, converter: AsnIntegerArrayBufferConverter }),\r\n    JsonProp({ name: \"q\", converter: JsonBase64UrlArrayBufferConverter })\r\n], RsaPrivateKey.prototype, \"prime2\", void 0);\r\n__decorate([\r\n    AsnProp({ type: AsnPropTypes.Integer, converter: AsnIntegerArrayBufferConverter }),\r\n    JsonProp({ name: \"dp\", converter: JsonBase64UrlArrayBufferConverter })\r\n], RsaPrivateKey.prototype, \"exponent1\", void 0);\r\n__decorate([\r\n    AsnProp({ type: AsnPropTypes.Integer, converter: AsnIntegerArrayBufferConverter }),\r\n    JsonProp({ name: \"dq\", converter: JsonBase64UrlArrayBufferConverter })\r\n], RsaPrivateKey.prototype, \"exponent2\", void 0);\r\n__decorate([\r\n    AsnProp({ type: AsnPropTypes.Integer, converter: AsnIntegerArrayBufferConverter }),\r\n    JsonProp({ name: \"qi\", converter: JsonBase64UrlArrayBufferConverter })\r\n], RsaPrivateKey.prototype, \"coefficient\", void 0);\r\n__decorate([\r\n    AsnProp({ type: AsnPropTypes.Any, optional: true })\r\n], RsaPrivateKey.prototype, \"otherPrimeInfos\", void 0);\n\nclass RsaPublicKey {\r\n    constructor() {\r\n        this.modulus = new ArrayBuffer(0);\r\n        this.publicExponent = new ArrayBuffer(0);\r\n    }\r\n}\r\n__decorate([\r\n    AsnProp({ type: AsnPropTypes.Integer, converter: AsnIntegerArrayBufferConverter }),\r\n    JsonProp({ name: \"n\", converter: JsonBase64UrlArrayBufferConverter })\r\n], RsaPublicKey.prototype, \"modulus\", void 0);\r\n__decorate([\r\n    AsnProp({ type: AsnPropTypes.Integer, converter: AsnIntegerArrayBufferConverter }),\r\n    JsonProp({ name: \"e\", converter: JsonBase64UrlArrayBufferConverter })\r\n], RsaPublicKey.prototype, \"publicExponent\", void 0);\n\nlet EcPublicKey = class EcPublicKey {\r\n    constructor(value) {\r\n        this.value = new ArrayBuffer(0);\r\n        if (value) {\r\n            this.value = value;\r\n        }\r\n    }\r\n    toJSON() {\r\n        let bytes = new Uint8Array(this.value);\r\n        if (bytes[0] !== 0x04) {\r\n            throw new CryptoError(\"Wrong ECPoint. Current version supports only Uncompressed (0x04) point\");\r\n        }\r\n        bytes = new Uint8Array(this.value.slice(1));\r\n        const size = bytes.length / 2;\r\n        const offset = 0;\r\n        const json = {\r\n            x: Convert.ToBase64Url(bytes.buffer.slice(offset, offset + size)),\r\n            y: Convert.ToBase64Url(bytes.buffer.slice(offset + size, offset + size + size)),\r\n        };\r\n        return json;\r\n    }\r\n    fromJSON(json) {\r\n        if (!(\"x\" in json)) {\r\n            throw new Error(\"x: Missing required property\");\r\n        }\r\n        if (!(\"y\" in json)) {\r\n            throw new Error(\"y: Missing required property\");\r\n        }\r\n        const x = Convert.FromBase64Url(json.x);\r\n        const y = Convert.FromBase64Url(json.y);\r\n        const value = combine(new Uint8Array([0x04]).buffer, x, y);\r\n        this.value = new Uint8Array(value).buffer;\r\n        return this;\r\n    }\r\n};\r\n__decorate([\r\n    AsnProp({ type: AsnPropTypes.OctetString })\r\n], EcPublicKey.prototype, \"value\", void 0);\r\nEcPublicKey = __decorate([\r\n    AsnType({ type: AsnTypeTypes.Choice })\r\n], EcPublicKey);\n\nclass EcPrivateKey {\r\n    constructor() {\r\n        this.version = 1;\r\n        this.privateKey = new ArrayBuffer(0);\r\n    }\r\n    fromJSON(json) {\r\n        if (!(\"d\" in json)) {\r\n            throw new Error(\"d: Missing required property\");\r\n        }\r\n        this.privateKey = Convert.FromBase64Url(json.d);\r\n        if (\"x\" in json) {\r\n            const publicKey = new EcPublicKey();\r\n            publicKey.fromJSON(json);\r\n            this.publicKey = AsnSerializer.toASN(publicKey).valueBlock.valueHex;\r\n        }\r\n        return this;\r\n    }\r\n    toJSON() {\r\n        const jwk = {};\r\n        jwk.d = Convert.ToBase64Url(this.privateKey);\r\n        if (this.publicKey) {\r\n            Object.assign(jwk, new EcPublicKey(this.publicKey).toJSON());\r\n        }\r\n        return jwk;\r\n    }\r\n}\r\n__decorate([\r\n    AsnProp({ type: AsnPropTypes.Integer, converter: AsnIntegerConverter })\r\n], EcPrivateKey.prototype, \"version\", void 0);\r\n__decorate([\r\n    AsnProp({ type: AsnPropTypes.OctetString })\r\n], EcPrivateKey.prototype, \"privateKey\", void 0);\r\n__decorate([\r\n    AsnProp({ context: 0, type: AsnPropTypes.Any, optional: true })\r\n], EcPrivateKey.prototype, \"parameters\", void 0);\r\n__decorate([\r\n    AsnProp({ context: 1, type: AsnPropTypes.BitString, optional: true })\r\n], EcPrivateKey.prototype, \"publicKey\", void 0);\n\nconst AsnIntegerWithoutPaddingConverter = {\r\n    fromASN: (value) => {\r\n        const bytes = new Uint8Array(value.valueBlock.valueHex);\r\n        return (bytes[0] === 0)\r\n            ? bytes.buffer.slice(1)\r\n            : bytes.buffer;\r\n    },\r\n    toASN: (value) => {\r\n        const bytes = new Uint8Array(value);\r\n        if (bytes[0] > 127) {\r\n            const newValue = new Uint8Array(bytes.length + 1);\r\n            newValue.set(bytes, 1);\r\n            return new asn1.Integer({ valueHex: newValue.buffer });\r\n        }\r\n        return new asn1.Integer({ valueHex: value });\r\n    },\r\n};\n\nvar index$2 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  AsnIntegerWithoutPaddingConverter: AsnIntegerWithoutPaddingConverter\n});\n\nclass EcUtils {\r\n    static decodePoint(data, pointSize) {\r\n        const view = BufferSourceConverter.toUint8Array(data);\r\n        if ((view.length === 0) || (view[0] !== 4)) {\r\n            throw new Error(\"Only uncompressed point format supported\");\r\n        }\r\n        const n = (view.length - 1) / 2;\r\n        if (n !== (Math.ceil(pointSize / 8))) {\r\n            throw new Error(\"Point does not match field size\");\r\n        }\r\n        const xb = view.slice(1, n + 1);\r\n        const yb = view.slice(n + 1, n + 1 + n);\r\n        return { x: xb, y: yb };\r\n    }\r\n    static encodePoint(point, pointSize) {\r\n        const size = Math.ceil(pointSize / 8);\r\n        if (point.x.byteLength !== size || point.y.byteLength !== size) {\r\n            throw new Error(\"X,Y coordinates don't match point size criteria\");\r\n        }\r\n        const x = BufferSourceConverter.toUint8Array(point.x);\r\n        const y = BufferSourceConverter.toUint8Array(point.y);\r\n        const res = new Uint8Array(size * 2 + 1);\r\n        res[0] = 4;\r\n        res.set(x, 1);\r\n        res.set(y, size + 1);\r\n        return res;\r\n    }\r\n    static getSize(pointSize) {\r\n        return Math.ceil(pointSize / 8);\r\n    }\r\n    static encodeSignature(signature, pointSize) {\r\n        const size = this.getSize(pointSize);\r\n        const r = BufferSourceConverter.toUint8Array(signature.r);\r\n        const s = BufferSourceConverter.toUint8Array(signature.s);\r\n        const res = new Uint8Array(size * 2);\r\n        res.set(this.padStart(r, size));\r\n        res.set(this.padStart(s, size), size);\r\n        return res;\r\n    }\r\n    static decodeSignature(data, pointSize) {\r\n        const size = this.getSize(pointSize);\r\n        const view = BufferSourceConverter.toUint8Array(data);\r\n        if (view.length !== (size * 2)) {\r\n            throw new Error(\"Incorrect size of the signature\");\r\n        }\r\n        const r = view.slice(0, size);\r\n        const s = view.slice(size);\r\n        return {\r\n            r: this.trimStart(r),\r\n            s: this.trimStart(s),\r\n        };\r\n    }\r\n    static trimStart(data) {\r\n        let i = 0;\r\n        while ((i < data.length - 1) && (data[i] === 0)) {\r\n            i++;\r\n        }\r\n        if (i === 0) {\r\n            return data;\r\n        }\r\n        return data.slice(i, data.length);\r\n    }\r\n    static padStart(data, size) {\r\n        if (size === data.length) {\r\n            return data;\r\n        }\r\n        const res = new Uint8Array(size);\r\n        res.set(data, size - data.length);\r\n        return res;\r\n    }\r\n}\n\nclass EcDsaSignature {\r\n    constructor() {\r\n        this.r = new ArrayBuffer(0);\r\n        this.s = new ArrayBuffer(0);\r\n    }\r\n    static fromWebCryptoSignature(value) {\r\n        const pointSize = value.byteLength / 2;\r\n        const point = EcUtils.decodeSignature(value, pointSize * 8);\r\n        const ecSignature = new EcDsaSignature();\r\n        ecSignature.r = BufferSourceConverter.toArrayBuffer(point.r);\r\n        ecSignature.s = BufferSourceConverter.toArrayBuffer(point.s);\r\n        return ecSignature;\r\n    }\r\n    toWebCryptoSignature(pointSize) {\r\n        pointSize !== null && pointSize !== void 0 ? pointSize : (pointSize = Math.max(this.r.byteLength, this.s.byteLength) * 8);\r\n        const signature = EcUtils.encodeSignature(this, pointSize);\r\n        return signature.buffer;\r\n    }\r\n}\r\n__decorate([\r\n    AsnProp({ type: AsnPropTypes.Integer, converter: AsnIntegerWithoutPaddingConverter })\r\n], EcDsaSignature.prototype, \"r\", void 0);\r\n__decorate([\r\n    AsnProp({ type: AsnPropTypes.Integer, converter: AsnIntegerWithoutPaddingConverter })\r\n], EcDsaSignature.prototype, \"s\", void 0);\n\nclass OneAsymmetricKey extends PrivateKeyInfo {\r\n}\r\n__decorate([\r\n    AsnProp({ context: 1, implicit: true, type: AsnPropTypes.BitString, optional: true })\r\n], OneAsymmetricKey.prototype, \"publicKey\", void 0);\n\nlet EdPrivateKey = class EdPrivateKey {\r\n    constructor() {\r\n        this.value = new ArrayBuffer(0);\r\n    }\r\n    fromJSON(json) {\r\n        if (!json.d) {\r\n            throw new Error(\"d: Missing required property\");\r\n        }\r\n        this.value = Convert.FromBase64Url(json.d);\r\n        return this;\r\n    }\r\n    toJSON() {\r\n        const jwk = {\r\n            d: Convert.ToBase64Url(this.value),\r\n        };\r\n        return jwk;\r\n    }\r\n};\r\n__decorate([\r\n    AsnProp({ type: AsnPropTypes.OctetString })\r\n], EdPrivateKey.prototype, \"value\", void 0);\r\nEdPrivateKey = __decorate([\r\n    AsnType({ type: AsnTypeTypes.Choice })\r\n], EdPrivateKey);\n\nlet EdPublicKey = class EdPublicKey {\r\n    constructor(value) {\r\n        this.value = new ArrayBuffer(0);\r\n        if (value) {\r\n            this.value = value;\r\n        }\r\n    }\r\n    toJSON() {\r\n        const json = {\r\n            x: Convert.ToBase64Url(this.value),\r\n        };\r\n        return json;\r\n    }\r\n    fromJSON(json) {\r\n        if (!(\"x\" in json)) {\r\n            throw new Error(\"x: Missing required property\");\r\n        }\r\n        this.value = Convert.FromBase64Url(json.x);\r\n        return this;\r\n    }\r\n};\r\n__decorate([\r\n    AsnProp({ type: AsnPropTypes.BitString })\r\n], EdPublicKey.prototype, \"value\", void 0);\r\nEdPublicKey = __decorate([\r\n    AsnType({ type: AsnTypeTypes.Choice })\r\n], EdPublicKey);\n\nlet CurvePrivateKey = class CurvePrivateKey {\r\n};\r\n__decorate([\r\n    AsnProp({ type: AsnPropTypes.OctetString }),\r\n    JsonProp({ type: JsonPropTypes.String, converter: JsonBase64UrlArrayBufferConverter })\r\n], CurvePrivateKey.prototype, \"d\", void 0);\r\nCurvePrivateKey = __decorate([\r\n    AsnType({ type: AsnTypeTypes.Choice })\r\n], CurvePrivateKey);\n\nconst idSecp256r1 = \"1.2.840.10045.3.1.7\";\r\nconst idEllipticCurve = \"1.3.132.0\";\r\nconst idSecp384r1 = `${idEllipticCurve}.34`;\r\nconst idSecp521r1 = `${idEllipticCurve}.35`;\r\nconst idSecp256k1 = `${idEllipticCurve}.10`;\r\nconst idVersionOne = \"1.3.36.3.3.2.8.1.1\";\r\nconst idBrainpoolP160r1 = `${idVersionOne}.1`;\r\nconst idBrainpoolP160t1 = `${idVersionOne}.2`;\r\nconst idBrainpoolP192r1 = `${idVersionOne}.3`;\r\nconst idBrainpoolP192t1 = `${idVersionOne}.4`;\r\nconst idBrainpoolP224r1 = `${idVersionOne}.5`;\r\nconst idBrainpoolP224t1 = `${idVersionOne}.6`;\r\nconst idBrainpoolP256r1 = `${idVersionOne}.7`;\r\nconst idBrainpoolP256t1 = `${idVersionOne}.8`;\r\nconst idBrainpoolP320r1 = `${idVersionOne}.9`;\r\nconst idBrainpoolP320t1 = `${idVersionOne}.10`;\r\nconst idBrainpoolP384r1 = `${idVersionOne}.11`;\r\nconst idBrainpoolP384t1 = `${idVersionOne}.12`;\r\nconst idBrainpoolP512r1 = `${idVersionOne}.13`;\r\nconst idBrainpoolP512t1 = `${idVersionOne}.14`;\r\nconst idX25519 = \"1.3.101.110\";\r\nconst idX448 = \"1.3.101.111\";\r\nconst idEd25519 = \"1.3.101.112\";\r\nconst idEd448 = \"1.3.101.113\";\n\nvar index$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  converters: index$2,\n  get ObjectIdentifier () { return ObjectIdentifier; },\n  AlgorithmIdentifier: AlgorithmIdentifier,\n  PrivateKeyInfo: PrivateKeyInfo,\n  PublicKeyInfo: PublicKeyInfo,\n  RsaPrivateKey: RsaPrivateKey,\n  RsaPublicKey: RsaPublicKey,\n  EcPrivateKey: EcPrivateKey,\n  get EcPublicKey () { return EcPublicKey; },\n  EcDsaSignature: EcDsaSignature,\n  OneAsymmetricKey: OneAsymmetricKey,\n  get EdPrivateKey () { return EdPrivateKey; },\n  get EdPublicKey () { return EdPublicKey; },\n  get CurvePrivateKey () { return CurvePrivateKey; },\n  idSecp256r1: idSecp256r1,\n  idEllipticCurve: idEllipticCurve,\n  idSecp384r1: idSecp384r1,\n  idSecp521r1: idSecp521r1,\n  idSecp256k1: idSecp256k1,\n  idVersionOne: idVersionOne,\n  idBrainpoolP160r1: idBrainpoolP160r1,\n  idBrainpoolP160t1: idBrainpoolP160t1,\n  idBrainpoolP192r1: idBrainpoolP192r1,\n  idBrainpoolP192t1: idBrainpoolP192t1,\n  idBrainpoolP224r1: idBrainpoolP224r1,\n  idBrainpoolP224t1: idBrainpoolP224t1,\n  idBrainpoolP256r1: idBrainpoolP256r1,\n  idBrainpoolP256t1: idBrainpoolP256t1,\n  idBrainpoolP320r1: idBrainpoolP320r1,\n  idBrainpoolP320t1: idBrainpoolP320t1,\n  idBrainpoolP384r1: idBrainpoolP384r1,\n  idBrainpoolP384t1: idBrainpoolP384t1,\n  idBrainpoolP512r1: idBrainpoolP512r1,\n  idBrainpoolP512t1: idBrainpoolP512t1,\n  idX25519: idX25519,\n  idX448: idX448,\n  idEd25519: idEd25519,\n  idEd448: idEd448\n});\n\nclass EcCurves {\r\n    constructor() { }\r\n    static register(item) {\r\n        const oid = new ObjectIdentifier();\r\n        oid.value = item.id;\r\n        const raw = AsnConvert.serialize(oid);\r\n        this.items.push({\r\n            ...item,\r\n            raw,\r\n        });\r\n        this.names.push(item.name);\r\n    }\r\n    static find(nameOrId) {\r\n        nameOrId = nameOrId.toUpperCase();\r\n        for (const item of this.items) {\r\n            if (item.name.toUpperCase() === nameOrId || item.id.toUpperCase() === nameOrId) {\r\n                return item;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    static get(nameOrId) {\r\n        const res = this.find(nameOrId);\r\n        if (!res) {\r\n            throw new Error(`Unsupported EC named curve '${nameOrId}'`);\r\n        }\r\n        return res;\r\n    }\r\n}\r\nEcCurves.items = [];\r\nEcCurves.names = [];\r\nEcCurves.register({ name: \"P-256\", id: idSecp256r1, size: 256 });\r\nEcCurves.register({ name: \"P-384\", id: idSecp384r1, size: 384 });\r\nEcCurves.register({ name: \"P-521\", id: idSecp521r1, size: 521 });\r\nEcCurves.register({ name: \"K-256\", id: idSecp256k1, size: 256 });\r\nEcCurves.register({ name: \"brainpoolP160r1\", id: idBrainpoolP160r1, size: 160 });\r\nEcCurves.register({ name: \"brainpoolP160t1\", id: idBrainpoolP160t1, size: 160 });\r\nEcCurves.register({ name: \"brainpoolP192r1\", id: idBrainpoolP192r1, size: 192 });\r\nEcCurves.register({ name: \"brainpoolP192t1\", id: idBrainpoolP192t1, size: 192 });\r\nEcCurves.register({ name: \"brainpoolP224r1\", id: idBrainpoolP224r1, size: 224 });\r\nEcCurves.register({ name: \"brainpoolP224t1\", id: idBrainpoolP224t1, size: 224 });\r\nEcCurves.register({ name: \"brainpoolP256r1\", id: idBrainpoolP256r1, size: 256 });\r\nEcCurves.register({ name: \"brainpoolP256t1\", id: idBrainpoolP256t1, size: 256 });\r\nEcCurves.register({ name: \"brainpoolP320r1\", id: idBrainpoolP320r1, size: 320 });\r\nEcCurves.register({ name: \"brainpoolP320t1\", id: idBrainpoolP320t1, size: 320 });\r\nEcCurves.register({ name: \"brainpoolP384r1\", id: idBrainpoolP384r1, size: 384 });\r\nEcCurves.register({ name: \"brainpoolP384t1\", id: idBrainpoolP384t1, size: 384 });\r\nEcCurves.register({ name: \"brainpoolP512r1\", id: idBrainpoolP512r1, size: 512 });\r\nEcCurves.register({ name: \"brainpoolP512t1\", id: idBrainpoolP512t1, size: 512 });\n\nclass HmacProvider extends ProviderCrypto {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.name = \"HMAC\";\r\n        this.hashAlgorithms = [\"SHA-1\", \"SHA-256\", \"SHA-384\", \"SHA-512\"];\r\n        this.usages = [\"sign\", \"verify\"];\r\n    }\r\n    getDefaultLength(algName) {\r\n        switch (algName.toUpperCase()) {\r\n            case \"SHA-1\":\r\n            case \"SHA-256\":\r\n            case \"SHA-384\":\r\n            case \"SHA-512\":\r\n                return 512;\r\n            default:\r\n                throw new Error(`Unknown algorithm name '${algName}'`);\r\n        }\r\n    }\r\n    checkGenerateKeyParams(algorithm) {\r\n        this.checkRequiredProperty(algorithm, \"hash\");\r\n        this.checkHashAlgorithm(algorithm.hash, this.hashAlgorithms);\r\n        if (\"length\" in algorithm) {\r\n            if (typeof algorithm.length !== \"number\") {\r\n                throw new TypeError(\"length: Is not a Number\");\r\n            }\r\n            if (algorithm.length < 1) {\r\n                throw new RangeError(\"length: Number is out of range\");\r\n            }\r\n        }\r\n    }\r\n    checkImportParams(algorithm) {\r\n        this.checkRequiredProperty(algorithm, \"hash\");\r\n        this.checkHashAlgorithm(algorithm.hash, this.hashAlgorithms);\r\n    }\r\n}\n\nclass Pbkdf2Provider extends ProviderCrypto {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.name = \"PBKDF2\";\r\n        this.hashAlgorithms = [\"SHA-1\", \"SHA-256\", \"SHA-384\", \"SHA-512\"];\r\n        this.usages = [\"deriveBits\", \"deriveKey\"];\r\n    }\r\n    checkAlgorithmParams(algorithm) {\r\n        this.checkRequiredProperty(algorithm, \"hash\");\r\n        this.checkHashAlgorithm(algorithm.hash, this.hashAlgorithms);\r\n        this.checkRequiredProperty(algorithm, \"salt\");\r\n        if (!(algorithm.salt instanceof ArrayBuffer || ArrayBuffer.isView(algorithm.salt))) {\r\n            throw new TypeError(\"salt: Is not of type '(ArrayBuffer or ArrayBufferView)'\");\r\n        }\r\n        this.checkRequiredProperty(algorithm, \"iterations\");\r\n        if (typeof algorithm.iterations !== \"number\") {\r\n            throw new TypeError(\"iterations: Is not a Number\");\r\n        }\r\n        if (algorithm.iterations < 1) {\r\n            throw new TypeError(\"iterations: Is less than 1\");\r\n        }\r\n    }\r\n    checkImportKey(format, keyData, algorithm, extractable, keyUsages, ...args) {\r\n        super.checkImportKey(format, keyData, algorithm, extractable, keyUsages);\r\n        if (extractable) {\r\n            throw new SyntaxError(\"extractable: Must be 'false'\");\r\n        }\r\n    }\r\n}\n\nclass HkdfProvider extends ProviderCrypto {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.name = \"HKDF\";\r\n        this.hashAlgorithms = [\"SHA-1\", \"SHA-256\", \"SHA-384\", \"SHA-512\"];\r\n        this.usages = [\"deriveKey\", \"deriveBits\"];\r\n    }\r\n    checkAlgorithmParams(algorithm) {\r\n        this.checkRequiredProperty(algorithm, \"hash\");\r\n        this.checkHashAlgorithm(algorithm.hash, this.hashAlgorithms);\r\n        this.checkRequiredProperty(algorithm, \"salt\");\r\n        if (!BufferSourceConverter.isBufferSource(algorithm.salt)) {\r\n            throw new TypeError(\"salt: Is not of type '(ArrayBuffer or ArrayBufferView)'\");\r\n        }\r\n        this.checkRequiredProperty(algorithm, \"info\");\r\n        if (!BufferSourceConverter.isBufferSource(algorithm.info)) {\r\n            throw new TypeError(\"salt: Is not of type '(ArrayBuffer or ArrayBufferView)'\");\r\n        }\r\n    }\r\n    checkImportKey(format, keyData, algorithm, extractable, keyUsages, ...args) {\r\n        super.checkImportKey(format, keyData, algorithm, extractable, keyUsages);\r\n        if (extractable) {\r\n            throw new SyntaxError(\"extractable: Must be 'false'\");\r\n        }\r\n    }\r\n}\n\nclass ShakeProvider extends ProviderCrypto {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.usages = [];\r\n        this.defaultLength = 0;\r\n    }\r\n    digest(...args) {\r\n        args[0] = { length: this.defaultLength, ...args[0] };\r\n        return super.digest.apply(this, args);\r\n    }\r\n    checkDigest(algorithm, data) {\r\n        super.checkDigest(algorithm, data);\r\n        const length = algorithm.length || 0;\r\n        if (typeof length !== \"number\") {\r\n            throw new TypeError(\"length: Is not a Number\");\r\n        }\r\n        if (length < 0) {\r\n            throw new TypeError(\"length: Is negative\");\r\n        }\r\n    }\r\n}\n\nclass Shake128Provider extends ShakeProvider {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.name = \"shake128\";\r\n        this.defaultLength = 16;\r\n    }\r\n}\n\nclass Shake256Provider extends ShakeProvider {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.name = \"shake256\";\r\n        this.defaultLength = 32;\r\n    }\r\n}\n\nclass Crypto {\r\n    get [Symbol.toStringTag]() {\r\n        return \"Crypto\";\r\n    }\r\n    randomUUID() {\r\n        const b = this.getRandomValues(new Uint8Array(16));\r\n        b[6] = (b[6] & 0x0f) | 0x40;\r\n        b[8] = (b[8] & 0x3f) | 0x80;\r\n        const uuid = Convert.ToHex(b).toLowerCase();\r\n        return `${uuid.substring(0, 8)}-${uuid.substring(8, 12)}-${uuid.substring(12, 16)}-${uuid.substring(16)}`;\r\n    }\r\n}\n\nclass ProviderStorage {\r\n    constructor() {\r\n        this.items = {};\r\n    }\r\n    get(algorithmName) {\r\n        return this.items[algorithmName.toLowerCase()] || null;\r\n    }\r\n    set(provider) {\r\n        this.items[provider.name.toLowerCase()] = provider;\r\n    }\r\n    removeAt(algorithmName) {\r\n        const provider = this.get(algorithmName.toLowerCase());\r\n        if (provider) {\r\n            delete this.items[algorithmName];\r\n        }\r\n        return provider;\r\n    }\r\n    has(name) {\r\n        return !!this.get(name);\r\n    }\r\n    get length() {\r\n        return Object.keys(this.items).length;\r\n    }\r\n    get algorithms() {\r\n        const algorithms = [];\r\n        for (const key in this.items) {\r\n            const provider = this.items[key];\r\n            algorithms.push(provider.name);\r\n        }\r\n        return algorithms.sort();\r\n    }\r\n}\n\nclass SubtleCrypto {\r\n    constructor() {\r\n        this.providers = new ProviderStorage();\r\n    }\r\n    static isHashedAlgorithm(data) {\r\n        return data\r\n            && typeof data === \"object\"\r\n            && \"name\" in data\r\n            && \"hash\" in data\r\n            ? true\r\n            : false;\r\n    }\r\n    get [Symbol.toStringTag]() {\r\n        return \"SubtleCrypto\";\r\n    }\r\n    async digest(...args) {\r\n        this.checkRequiredArguments(args, 2, \"digest\");\r\n        const [algorithm, data, ...params] = args;\r\n        const preparedAlgorithm = this.prepareAlgorithm(algorithm);\r\n        const preparedData = BufferSourceConverter.toArrayBuffer(data);\r\n        const provider = this.getProvider(preparedAlgorithm.name);\r\n        const result = await provider.digest(preparedAlgorithm, preparedData, ...params);\r\n        return result;\r\n    }\r\n    async generateKey(...args) {\r\n        this.checkRequiredArguments(args, 3, \"generateKey\");\r\n        const [algorithm, extractable, keyUsages, ...params] = args;\r\n        const preparedAlgorithm = this.prepareAlgorithm(algorithm);\r\n        const provider = this.getProvider(preparedAlgorithm.name);\r\n        const result = await provider.generateKey({ ...preparedAlgorithm, name: provider.name }, extractable, keyUsages, ...params);\r\n        return result;\r\n    }\r\n    async sign(...args) {\r\n        this.checkRequiredArguments(args, 3, \"sign\");\r\n        const [algorithm, key, data, ...params] = args;\r\n        this.checkCryptoKey(key);\r\n        const preparedAlgorithm = this.prepareAlgorithm(algorithm);\r\n        const preparedData = BufferSourceConverter.toArrayBuffer(data);\r\n        const provider = this.getProvider(preparedAlgorithm.name);\r\n        const result = await provider.sign({ ...preparedAlgorithm, name: provider.name }, key, preparedData, ...params);\r\n        return result;\r\n    }\r\n    async verify(...args) {\r\n        this.checkRequiredArguments(args, 4, \"verify\");\r\n        const [algorithm, key, signature, data, ...params] = args;\r\n        this.checkCryptoKey(key);\r\n        const preparedAlgorithm = this.prepareAlgorithm(algorithm);\r\n        const preparedData = BufferSourceConverter.toArrayBuffer(data);\r\n        const preparedSignature = BufferSourceConverter.toArrayBuffer(signature);\r\n        const provider = this.getProvider(preparedAlgorithm.name);\r\n        const result = await provider.verify({ ...preparedAlgorithm, name: provider.name }, key, preparedSignature, preparedData, ...params);\r\n        return result;\r\n    }\r\n    async encrypt(...args) {\r\n        this.checkRequiredArguments(args, 3, \"encrypt\");\r\n        const [algorithm, key, data, ...params] = args;\r\n        this.checkCryptoKey(key);\r\n        const preparedAlgorithm = this.prepareAlgorithm(algorithm);\r\n        const preparedData = BufferSourceConverter.toArrayBuffer(data);\r\n        const provider = this.getProvider(preparedAlgorithm.name);\r\n        const result = await provider.encrypt({ ...preparedAlgorithm, name: provider.name }, key, preparedData, { keyUsage: true }, ...params);\r\n        return result;\r\n    }\r\n    async decrypt(...args) {\r\n        this.checkRequiredArguments(args, 3, \"decrypt\");\r\n        const [algorithm, key, data, ...params] = args;\r\n        this.checkCryptoKey(key);\r\n        const preparedAlgorithm = this.prepareAlgorithm(algorithm);\r\n        const preparedData = BufferSourceConverter.toArrayBuffer(data);\r\n        const provider = this.getProvider(preparedAlgorithm.name);\r\n        const result = await provider.decrypt({ ...preparedAlgorithm, name: provider.name }, key, preparedData, { keyUsage: true }, ...params);\r\n        return result;\r\n    }\r\n    async deriveBits(...args) {\r\n        this.checkRequiredArguments(args, 3, \"deriveBits\");\r\n        const [algorithm, baseKey, length, ...params] = args;\r\n        this.checkCryptoKey(baseKey);\r\n        const preparedAlgorithm = this.prepareAlgorithm(algorithm);\r\n        const provider = this.getProvider(preparedAlgorithm.name);\r\n        const result = await provider.deriveBits({ ...preparedAlgorithm, name: provider.name }, baseKey, length, { keyUsage: true }, ...params);\r\n        return result;\r\n    }\r\n    async deriveKey(...args) {\r\n        this.checkRequiredArguments(args, 5, \"deriveKey\");\r\n        const [algorithm, baseKey, derivedKeyType, extractable, keyUsages, ...params] = args;\r\n        const preparedDerivedKeyType = this.prepareAlgorithm(derivedKeyType);\r\n        const importProvider = this.getProvider(preparedDerivedKeyType.name);\r\n        importProvider.checkDerivedKeyParams(preparedDerivedKeyType);\r\n        const preparedAlgorithm = this.prepareAlgorithm(algorithm);\r\n        const provider = this.getProvider(preparedAlgorithm.name);\r\n        provider.checkCryptoKey(baseKey, \"deriveKey\");\r\n        const derivedBits = await provider.deriveBits({ ...preparedAlgorithm, name: provider.name }, baseKey, derivedKeyType.length || 512, { keyUsage: false }, ...params);\r\n        return this.importKey(\"raw\", derivedBits, derivedKeyType, extractable, keyUsages, ...params);\r\n    }\r\n    async exportKey(...args) {\r\n        this.checkRequiredArguments(args, 2, \"exportKey\");\r\n        const [format, key, ...params] = args;\r\n        this.checkCryptoKey(key);\r\n        const provider = this.getProvider(key.algorithm.name);\r\n        const result = await provider.exportKey(format, key, ...params);\r\n        return result;\r\n    }\r\n    async importKey(...args) {\r\n        this.checkRequiredArguments(args, 5, \"importKey\");\r\n        const [format, keyData, algorithm, extractable, keyUsages, ...params] = args;\r\n        const preparedAlgorithm = this.prepareAlgorithm(algorithm);\r\n        const provider = this.getProvider(preparedAlgorithm.name);\r\n        if ([\"pkcs8\", \"spki\", \"raw\"].indexOf(format) !== -1) {\r\n            const preparedData = BufferSourceConverter.toArrayBuffer(keyData);\r\n            return provider.importKey(format, preparedData, { ...preparedAlgorithm, name: provider.name }, extractable, keyUsages, ...params);\r\n        }\r\n        else {\r\n            if (!keyData.kty) {\r\n                throw new TypeError(\"keyData: Is not JSON\");\r\n            }\r\n        }\r\n        return provider.importKey(format, keyData, { ...preparedAlgorithm, name: provider.name }, extractable, keyUsages, ...params);\r\n    }\r\n    async wrapKey(format, key, wrappingKey, wrapAlgorithm, ...args) {\r\n        let keyData = await this.exportKey(format, key, ...args);\r\n        if (format === \"jwk\") {\r\n            const json = JSON.stringify(keyData);\r\n            keyData = Convert.FromUtf8String(json);\r\n        }\r\n        const preparedAlgorithm = this.prepareAlgorithm(wrapAlgorithm);\r\n        const preparedData = BufferSourceConverter.toArrayBuffer(keyData);\r\n        const provider = this.getProvider(preparedAlgorithm.name);\r\n        return provider.encrypt({ ...preparedAlgorithm, name: provider.name }, wrappingKey, preparedData, { keyUsage: false }, ...args);\r\n    }\r\n    async unwrapKey(format, wrappedKey, unwrappingKey, unwrapAlgorithm, unwrappedKeyAlgorithm, extractable, keyUsages, ...args) {\r\n        const preparedAlgorithm = this.prepareAlgorithm(unwrapAlgorithm);\r\n        const preparedData = BufferSourceConverter.toArrayBuffer(wrappedKey);\r\n        const provider = this.getProvider(preparedAlgorithm.name);\r\n        let keyData = await provider.decrypt({ ...preparedAlgorithm, name: provider.name }, unwrappingKey, preparedData, { keyUsage: false }, ...args);\r\n        if (format === \"jwk\") {\r\n            try {\r\n                keyData = JSON.parse(Convert.ToUtf8String(keyData));\r\n            }\r\n            catch (e) {\r\n                const error = new TypeError(\"wrappedKey: Is not a JSON\");\r\n                error.internal = e;\r\n                throw error;\r\n            }\r\n        }\r\n        return this.importKey(format, keyData, unwrappedKeyAlgorithm, extractable, keyUsages, ...args);\r\n    }\r\n    checkRequiredArguments(args, size, methodName) {\r\n        if (args.length < size) {\r\n            throw new TypeError(`Failed to execute '${methodName}' on 'SubtleCrypto': ${size} arguments required, but only ${args.length} present`);\r\n        }\r\n    }\r\n    prepareAlgorithm(algorithm) {\r\n        if (typeof algorithm === \"string\") {\r\n            return {\r\n                name: algorithm,\r\n            };\r\n        }\r\n        if (SubtleCrypto.isHashedAlgorithm(algorithm)) {\r\n            const preparedAlgorithm = { ...algorithm };\r\n            preparedAlgorithm.hash = this.prepareAlgorithm(algorithm.hash);\r\n            return preparedAlgorithm;\r\n        }\r\n        return { ...algorithm };\r\n    }\r\n    getProvider(name) {\r\n        const provider = this.providers.get(name);\r\n        if (!provider) {\r\n            throw new AlgorithmError(\"Unrecognized name\");\r\n        }\r\n        return provider;\r\n    }\r\n    checkCryptoKey(key) {\r\n        if (!(key instanceof CryptoKey)) {\r\n            throw new TypeError(`Key is not of type 'CryptoKey'`);\r\n        }\r\n    }\r\n}\n\nvar index = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  converters: index$3\n});\n\nconst REQUIRED_FIELDS = [\"crv\", \"e\", \"k\", \"kty\", \"n\", \"x\", \"y\"];\r\nclass JwkUtils {\r\n    static async thumbprint(hash, jwk, crypto) {\r\n        const data = this.format(jwk, true);\r\n        return crypto.subtle.digest(hash, Convert.FromBinary(JSON.stringify(data)));\r\n    }\r\n    static format(jwk, remove = false) {\r\n        let res = Object.entries(jwk);\r\n        if (remove) {\r\n            res = res.filter(o => REQUIRED_FIELDS.includes(o[0]));\r\n        }\r\n        res = res.sort(([keyA], [keyB]) => keyA > keyB ? 1 : keyA < keyB ? -1 : 0);\r\n        return Object.fromEntries(res);\r\n    }\r\n}\n\nexport { AesCbcProvider, AesCmacProvider, AesCtrProvider, AesEcbProvider, AesGcmProvider, AesKwProvider, AesProvider, AlgorithmError, Crypto, CryptoError, CryptoKey, DesProvider, EcCurves, EcUtils, EcdhEsProvider, EcdhProvider, EcdsaProvider, EdDsaProvider, EllipticProvider, HkdfProvider, HmacProvider, JwkUtils, OperationError, Pbkdf2Provider, PemConverter, ProviderCrypto, ProviderStorage, RequiredPropertyError, RsaOaepProvider, RsaProvider, RsaPssProvider, RsaSsaProvider, Shake128Provider, Shake256Provider, ShakeProvider, SubtleCrypto, UnsupportedOperationError, index$1 as asn1, isJWK, index as json };\n","/*!\n Copyright (c) Peculiar Ventures, LLC\n*/\n\nimport * as core from 'webcrypto-core';\nimport { BufferSourceConverter as BufferSourceConverter$1 } from 'webcrypto-core';\nexport { CryptoKey } from 'webcrypto-core';\nimport * as crypto from 'crypto';\nimport crypto__default from 'crypto';\nimport * as process from 'process';\nimport { __decorate } from 'tslib';\nimport { JsonProp, JsonPropTypes, JsonSerializer, JsonParser } from '@peculiar/json-schema';\nimport { Convert, BufferSourceConverter } from 'pvtsutils';\nimport { AsnParser, AsnSerializer } from '@peculiar/asn1-schema';\n\nconst JsonBase64UrlConverter = {\r\n    fromJSON: (value) => Buffer.from(Convert.FromBase64Url(value)),\r\n    toJSON: (value) => Convert.ToBase64Url(value),\r\n};\n\nclass CryptoKey extends core.CryptoKey {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.data = Buffer.alloc(0);\r\n        this.algorithm = { name: \"\" };\r\n        this.extractable = false;\r\n        this.type = \"secret\";\r\n        this.usages = [];\r\n        this.kty = \"oct\";\r\n        this.alg = \"\";\r\n    }\r\n}\r\n__decorate([\r\n    JsonProp({ name: \"ext\", type: JsonPropTypes.Boolean, optional: true })\r\n], CryptoKey.prototype, \"extractable\", void 0);\r\n__decorate([\r\n    JsonProp({ name: \"key_ops\", type: JsonPropTypes.String, repeated: true, optional: true })\r\n], CryptoKey.prototype, \"usages\", void 0);\r\n__decorate([\r\n    JsonProp({ type: JsonPropTypes.String })\r\n], CryptoKey.prototype, \"kty\", void 0);\r\n__decorate([\r\n    JsonProp({ type: JsonPropTypes.String, optional: true })\r\n], CryptoKey.prototype, \"alg\", void 0);\n\nclass SymmetricKey extends CryptoKey {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.kty = \"oct\";\r\n        this.type = \"secret\";\r\n    }\r\n}\n\nclass AsymmetricKey extends CryptoKey {\r\n}\n\nclass AesCryptoKey extends SymmetricKey {\r\n    get alg() {\r\n        switch (this.algorithm.name.toUpperCase()) {\r\n            case \"AES-CBC\":\r\n                return `A${this.algorithm.length}CBC`;\r\n            case \"AES-CTR\":\r\n                return `A${this.algorithm.length}CTR`;\r\n            case \"AES-GCM\":\r\n                return `A${this.algorithm.length}GCM`;\r\n            case \"AES-KW\":\r\n                return `A${this.algorithm.length}KW`;\r\n            case \"AES-CMAC\":\r\n                return `A${this.algorithm.length}CMAC`;\r\n            case \"AES-ECB\":\r\n                return `A${this.algorithm.length}ECB`;\r\n            default:\r\n                throw new core.AlgorithmError(\"Unsupported algorithm name\");\r\n        }\r\n    }\r\n    set alg(value) {\r\n    }\r\n}\r\n__decorate([\r\n    JsonProp({ name: \"k\", converter: JsonBase64UrlConverter })\r\n], AesCryptoKey.prototype, \"data\", void 0);\n\nconst keyStorage = new WeakMap();\r\nfunction getCryptoKey(key) {\r\n    const res = keyStorage.get(key);\r\n    if (!res) {\r\n        throw new core.OperationError(\"Cannot get CryptoKey from secure storage\");\r\n    }\r\n    return res;\r\n}\r\nfunction setCryptoKey(value) {\r\n    const key = core.CryptoKey.create(value.algorithm, value.type, value.extractable, value.usages);\r\n    Object.freeze(key);\r\n    keyStorage.set(key, value);\r\n    return key;\r\n}\n\nclass AesCrypto {\r\n    static async generateKey(algorithm, extractable, keyUsages) {\r\n        const key = new AesCryptoKey();\r\n        key.algorithm = algorithm;\r\n        key.extractable = extractable;\r\n        key.usages = keyUsages;\r\n        key.data = crypto__default.randomBytes(algorithm.length >> 3);\r\n        return key;\r\n    }\r\n    static async exportKey(format, key) {\r\n        if (!(key instanceof AesCryptoKey)) {\r\n            throw new Error(\"key: Is not AesCryptoKey\");\r\n        }\r\n        switch (format.toLowerCase()) {\r\n            case \"jwk\":\r\n                return JsonSerializer.toJSON(key);\r\n            case \"raw\":\r\n                return new Uint8Array(key.data).buffer;\r\n            default:\r\n                throw new core.OperationError(\"format: Must be 'jwk' or 'raw'\");\r\n        }\r\n    }\r\n    static async importKey(format, keyData, algorithm, extractable, keyUsages) {\r\n        let key;\r\n        switch (format.toLowerCase()) {\r\n            case \"jwk\":\r\n                key = JsonParser.fromJSON(keyData, { targetSchema: AesCryptoKey });\r\n                break;\r\n            case \"raw\":\r\n                key = new AesCryptoKey();\r\n                key.data = Buffer.from(keyData);\r\n                break;\r\n            default:\r\n                throw new core.OperationError(\"format: Must be 'jwk' or 'raw'\");\r\n        }\r\n        key.algorithm = algorithm;\r\n        key.algorithm.length = key.data.length << 3;\r\n        key.extractable = extractable;\r\n        key.usages = keyUsages;\r\n        switch (key.algorithm.length) {\r\n            case 128:\r\n            case 192:\r\n            case 256:\r\n                break;\r\n            default:\r\n                throw new core.OperationError(\"keyData: Is wrong key length\");\r\n        }\r\n        return key;\r\n    }\r\n    static async encrypt(algorithm, key, data) {\r\n        switch (algorithm.name.toUpperCase()) {\r\n            case \"AES-CBC\":\r\n                return this.encryptAesCBC(algorithm, key, Buffer.from(data));\r\n            case \"AES-CTR\":\r\n                return this.encryptAesCTR(algorithm, key, Buffer.from(data));\r\n            case \"AES-GCM\":\r\n                return this.encryptAesGCM(algorithm, key, Buffer.from(data));\r\n            case \"AES-KW\":\r\n                return this.encryptAesKW(algorithm, key, Buffer.from(data));\r\n            case \"AES-ECB\":\r\n                return this.encryptAesECB(algorithm, key, Buffer.from(data));\r\n            default:\r\n                throw new core.OperationError(\"algorithm: Is not recognized\");\r\n        }\r\n    }\r\n    static async decrypt(algorithm, key, data) {\r\n        if (!(key instanceof AesCryptoKey)) {\r\n            throw new Error(\"key: Is not AesCryptoKey\");\r\n        }\r\n        switch (algorithm.name.toUpperCase()) {\r\n            case \"AES-CBC\":\r\n                return this.decryptAesCBC(algorithm, key, Buffer.from(data));\r\n            case \"AES-CTR\":\r\n                return this.decryptAesCTR(algorithm, key, Buffer.from(data));\r\n            case \"AES-GCM\":\r\n                return this.decryptAesGCM(algorithm, key, Buffer.from(data));\r\n            case \"AES-KW\":\r\n                return this.decryptAesKW(algorithm, key, Buffer.from(data));\r\n            case \"AES-ECB\":\r\n                return this.decryptAesECB(algorithm, key, Buffer.from(data));\r\n            default:\r\n                throw new core.OperationError(\"algorithm: Is not recognized\");\r\n        }\r\n    }\r\n    static async encryptAesCBC(algorithm, key, data) {\r\n        const cipher = crypto__default.createCipheriv(`aes-${key.algorithm.length}-cbc`, key.data, new Uint8Array(algorithm.iv));\r\n        let enc = cipher.update(data);\r\n        enc = Buffer.concat([enc, cipher.final()]);\r\n        const res = new Uint8Array(enc).buffer;\r\n        return res;\r\n    }\r\n    static async decryptAesCBC(algorithm, key, data) {\r\n        const decipher = crypto__default.createDecipheriv(`aes-${key.algorithm.length}-cbc`, key.data, new Uint8Array(algorithm.iv));\r\n        let dec = decipher.update(data);\r\n        dec = Buffer.concat([dec, decipher.final()]);\r\n        return new Uint8Array(dec).buffer;\r\n    }\r\n    static async encryptAesCTR(algorithm, key, data) {\r\n        const cipher = crypto__default.createCipheriv(`aes-${key.algorithm.length}-ctr`, key.data, Buffer.from(algorithm.counter));\r\n        let enc = cipher.update(data);\r\n        enc = Buffer.concat([enc, cipher.final()]);\r\n        const res = new Uint8Array(enc).buffer;\r\n        return res;\r\n    }\r\n    static async decryptAesCTR(algorithm, key, data) {\r\n        const decipher = crypto__default.createDecipheriv(`aes-${key.algorithm.length}-ctr`, key.data, new Uint8Array(algorithm.counter));\r\n        let dec = decipher.update(data);\r\n        dec = Buffer.concat([dec, decipher.final()]);\r\n        return new Uint8Array(dec).buffer;\r\n    }\r\n    static async encryptAesGCM(algorithm, key, data) {\r\n        const cipher = crypto__default.createCipheriv(`aes-${key.algorithm.length}-gcm`, key.data, Buffer.from(algorithm.iv), {\r\n            authTagLength: (algorithm.tagLength || 128) >> 3,\r\n        });\r\n        if (algorithm.additionalData) {\r\n            cipher.setAAD(Buffer.from(algorithm.additionalData));\r\n        }\r\n        let enc = cipher.update(data);\r\n        enc = Buffer.concat([enc, cipher.final(), cipher.getAuthTag()]);\r\n        const res = new Uint8Array(enc).buffer;\r\n        return res;\r\n    }\r\n    static async decryptAesGCM(algorithm, key, data) {\r\n        const decipher = crypto__default.createDecipheriv(`aes-${key.algorithm.length}-gcm`, key.data, new Uint8Array(algorithm.iv));\r\n        const tagLength = (algorithm.tagLength || 128) >> 3;\r\n        const enc = data.slice(0, data.length - tagLength);\r\n        const tag = data.slice(data.length - tagLength);\r\n        if (algorithm.additionalData) {\r\n            decipher.setAAD(Buffer.from(algorithm.additionalData));\r\n        }\r\n        decipher.setAuthTag(tag);\r\n        let dec = decipher.update(enc);\r\n        dec = Buffer.concat([dec, decipher.final()]);\r\n        return new Uint8Array(dec).buffer;\r\n    }\r\n    static async encryptAesKW(algorithm, key, data) {\r\n        const cipher = crypto__default.createCipheriv(`id-aes${key.algorithm.length}-wrap`, key.data, this.AES_KW_IV);\r\n        let enc = cipher.update(data);\r\n        enc = Buffer.concat([enc, cipher.final()]);\r\n        return new Uint8Array(enc).buffer;\r\n    }\r\n    static async decryptAesKW(algorithm, key, data) {\r\n        const decipher = crypto__default.createDecipheriv(`id-aes${key.algorithm.length}-wrap`, key.data, this.AES_KW_IV);\r\n        let dec = decipher.update(data);\r\n        dec = Buffer.concat([dec, decipher.final()]);\r\n        return new Uint8Array(dec).buffer;\r\n    }\r\n    static async encryptAesECB(algorithm, key, data) {\r\n        const cipher = crypto__default.createCipheriv(`aes-${key.algorithm.length}-ecb`, key.data, new Uint8Array(0));\r\n        let enc = cipher.update(data);\r\n        enc = Buffer.concat([enc, cipher.final()]);\r\n        const res = new Uint8Array(enc).buffer;\r\n        return res;\r\n    }\r\n    static async decryptAesECB(algorithm, key, data) {\r\n        const decipher = crypto__default.createDecipheriv(`aes-${key.algorithm.length}-ecb`, key.data, new Uint8Array(0));\r\n        let dec = decipher.update(data);\r\n        dec = Buffer.concat([dec, decipher.final()]);\r\n        return new Uint8Array(dec).buffer;\r\n    }\r\n}\r\nAesCrypto.AES_KW_IV = Buffer.from(\"A6A6A6A6A6A6A6A6\", \"hex\");\n\nclass AesCbcProvider extends core.AesCbcProvider {\r\n    async onGenerateKey(algorithm, extractable, keyUsages) {\r\n        const key = await AesCrypto.generateKey({\r\n            name: this.name,\r\n            length: algorithm.length,\r\n        }, extractable, keyUsages);\r\n        return setCryptoKey(key);\r\n    }\r\n    async onEncrypt(algorithm, key, data) {\r\n        return AesCrypto.encrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\r\n    }\r\n    async onDecrypt(algorithm, key, data) {\r\n        return AesCrypto.decrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\r\n    }\r\n    async onExportKey(format, key) {\r\n        return AesCrypto.exportKey(format, getCryptoKey(key));\r\n    }\r\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\r\n        const key = await AesCrypto.importKey(format, keyData, { name: algorithm.name }, extractable, keyUsages);\r\n        return setCryptoKey(key);\r\n    }\r\n    checkCryptoKey(key, keyUsage) {\r\n        super.checkCryptoKey(key, keyUsage);\r\n        if (!(getCryptoKey(key) instanceof AesCryptoKey)) {\r\n            throw new TypeError(\"key: Is not a AesCryptoKey\");\r\n        }\r\n    }\r\n}\n\nconst zero = Buffer.from([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\r\nconst rb = Buffer.from([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 135]);\r\nconst blockSize = 16;\r\nfunction bitShiftLeft(buffer) {\r\n    const shifted = Buffer.alloc(buffer.length);\r\n    const last = buffer.length - 1;\r\n    for (let index = 0; index < last; index++) {\r\n        shifted[index] = buffer[index] << 1;\r\n        if (buffer[index + 1] & 0x80) {\r\n            shifted[index] += 0x01;\r\n        }\r\n    }\r\n    shifted[last] = buffer[last] << 1;\r\n    return shifted;\r\n}\r\nfunction xor(a, b) {\r\n    const length = Math.min(a.length, b.length);\r\n    const output = Buffer.alloc(length);\r\n    for (let index = 0; index < length; index++) {\r\n        output[index] = a[index] ^ b[index];\r\n    }\r\n    return output;\r\n}\r\nfunction aes(key, message) {\r\n    const cipher = crypto.createCipheriv(`aes${key.length << 3}`, key, zero);\r\n    const result = cipher.update(message);\r\n    cipher.final();\r\n    return result;\r\n}\r\nfunction getMessageBlock(message, blockIndex) {\r\n    const block = Buffer.alloc(blockSize);\r\n    const start = blockIndex * blockSize;\r\n    const end = start + blockSize;\r\n    message.copy(block, 0, start, end);\r\n    return block;\r\n}\r\nfunction getPaddedMessageBlock(message, blockIndex) {\r\n    const block = Buffer.alloc(blockSize);\r\n    const start = blockIndex * blockSize;\r\n    const end = message.length;\r\n    block.fill(0);\r\n    message.copy(block, 0, start, end);\r\n    block[end - start] = 0x80;\r\n    return block;\r\n}\r\nfunction generateSubkeys(key) {\r\n    const l = aes(key, zero);\r\n    let subkey1 = bitShiftLeft(l);\r\n    if (l[0] & 0x80) {\r\n        subkey1 = xor(subkey1, rb);\r\n    }\r\n    let subkey2 = bitShiftLeft(subkey1);\r\n    if (subkey1[0] & 0x80) {\r\n        subkey2 = xor(subkey2, rb);\r\n    }\r\n    return { subkey1, subkey2 };\r\n}\r\nfunction aesCmac(key, message) {\r\n    const subkeys = generateSubkeys(key);\r\n    let blockCount = Math.ceil(message.length / blockSize);\r\n    let lastBlockCompleteFlag;\r\n    let lastBlock;\r\n    if (blockCount === 0) {\r\n        blockCount = 1;\r\n        lastBlockCompleteFlag = false;\r\n    }\r\n    else {\r\n        lastBlockCompleteFlag = (message.length % blockSize === 0);\r\n    }\r\n    const lastBlockIndex = blockCount - 1;\r\n    if (lastBlockCompleteFlag) {\r\n        lastBlock = xor(getMessageBlock(message, lastBlockIndex), subkeys.subkey1);\r\n    }\r\n    else {\r\n        lastBlock = xor(getPaddedMessageBlock(message, lastBlockIndex), subkeys.subkey2);\r\n    }\r\n    let x = zero;\r\n    let y;\r\n    for (let index = 0; index < lastBlockIndex; index++) {\r\n        y = xor(x, getMessageBlock(message, index));\r\n        x = aes(key, y);\r\n    }\r\n    y = xor(lastBlock, x);\r\n    return aes(key, y);\r\n}\r\nclass AesCmacProvider extends core.AesCmacProvider {\r\n    async onGenerateKey(algorithm, extractable, keyUsages) {\r\n        const key = await AesCrypto.generateKey({\r\n            name: this.name,\r\n            length: algorithm.length,\r\n        }, extractable, keyUsages);\r\n        return setCryptoKey(key);\r\n    }\r\n    async onSign(algorithm, key, data) {\r\n        const result = aesCmac(getCryptoKey(key).data, Buffer.from(data));\r\n        return new Uint8Array(result).buffer;\r\n    }\r\n    async onVerify(algorithm, key, signature, data) {\r\n        const signature2 = await this.sign(algorithm, key, data);\r\n        return Buffer.from(signature).compare(Buffer.from(signature2)) === 0;\r\n    }\r\n    async onExportKey(format, key) {\r\n        return AesCrypto.exportKey(format, getCryptoKey(key));\r\n    }\r\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\r\n        const res = await AesCrypto.importKey(format, keyData, { name: algorithm.name }, extractable, keyUsages);\r\n        return setCryptoKey(res);\r\n    }\r\n    checkCryptoKey(key, keyUsage) {\r\n        super.checkCryptoKey(key, keyUsage);\r\n        if (!(getCryptoKey(key) instanceof AesCryptoKey)) {\r\n            throw new TypeError(\"key: Is not a AesCryptoKey\");\r\n        }\r\n    }\r\n}\n\nclass AesCtrProvider extends core.AesCtrProvider {\r\n    async onGenerateKey(algorithm, extractable, keyUsages) {\r\n        const key = await AesCrypto.generateKey({\r\n            name: this.name,\r\n            length: algorithm.length,\r\n        }, extractable, keyUsages);\r\n        return setCryptoKey(key);\r\n    }\r\n    async onEncrypt(algorithm, key, data) {\r\n        return AesCrypto.encrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\r\n    }\r\n    async onDecrypt(algorithm, key, data) {\r\n        return AesCrypto.decrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\r\n    }\r\n    async onExportKey(format, key) {\r\n        return AesCrypto.exportKey(format, getCryptoKey(key));\r\n    }\r\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\r\n        const res = await AesCrypto.importKey(format, keyData, { name: algorithm.name }, extractable, keyUsages);\r\n        return setCryptoKey(res);\r\n    }\r\n    checkCryptoKey(key, keyUsage) {\r\n        super.checkCryptoKey(key, keyUsage);\r\n        if (!(getCryptoKey(key) instanceof AesCryptoKey)) {\r\n            throw new TypeError(\"key: Is not a AesCryptoKey\");\r\n        }\r\n    }\r\n}\n\nclass AesGcmProvider extends core.AesGcmProvider {\r\n    async onGenerateKey(algorithm, extractable, keyUsages) {\r\n        const key = await AesCrypto.generateKey({\r\n            name: this.name,\r\n            length: algorithm.length,\r\n        }, extractable, keyUsages);\r\n        return setCryptoKey(key);\r\n    }\r\n    async onEncrypt(algorithm, key, data) {\r\n        return AesCrypto.encrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\r\n    }\r\n    async onDecrypt(algorithm, key, data) {\r\n        return AesCrypto.decrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\r\n    }\r\n    async onExportKey(format, key) {\r\n        return AesCrypto.exportKey(format, getCryptoKey(key));\r\n    }\r\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\r\n        const res = await AesCrypto.importKey(format, keyData, { name: algorithm.name }, extractable, keyUsages);\r\n        return setCryptoKey(res);\r\n    }\r\n    checkCryptoKey(key, keyUsage) {\r\n        super.checkCryptoKey(key, keyUsage);\r\n        if (!(getCryptoKey(key) instanceof AesCryptoKey)) {\r\n            throw new TypeError(\"key: Is not a AesCryptoKey\");\r\n        }\r\n    }\r\n}\n\nclass AesKwProvider extends core.AesKwProvider {\r\n    async onGenerateKey(algorithm, extractable, keyUsages) {\r\n        const res = await AesCrypto.generateKey({\r\n            name: this.name,\r\n            length: algorithm.length,\r\n        }, extractable, keyUsages);\r\n        return setCryptoKey(res);\r\n    }\r\n    async onExportKey(format, key) {\r\n        return AesCrypto.exportKey(format, getCryptoKey(key));\r\n    }\r\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\r\n        const res = await AesCrypto.importKey(format, keyData, { name: algorithm.name }, extractable, keyUsages);\r\n        return setCryptoKey(res);\r\n    }\r\n    async onEncrypt(algorithm, key, data) {\r\n        return AesCrypto.encrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\r\n    }\r\n    async onDecrypt(algorithm, key, data) {\r\n        return AesCrypto.decrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\r\n    }\r\n    checkCryptoKey(key, keyUsage) {\r\n        super.checkCryptoKey(key, keyUsage);\r\n        if (!(getCryptoKey(key) instanceof AesCryptoKey)) {\r\n            throw new TypeError(\"key: Is not a AesCryptoKey\");\r\n        }\r\n    }\r\n}\n\nclass AesEcbProvider extends core.AesEcbProvider {\r\n    async onGenerateKey(algorithm, extractable, keyUsages) {\r\n        const key = await AesCrypto.generateKey({\r\n            name: this.name,\r\n            length: algorithm.length,\r\n        }, extractable, keyUsages);\r\n        return setCryptoKey(key);\r\n    }\r\n    async onEncrypt(algorithm, key, data) {\r\n        return AesCrypto.encrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\r\n    }\r\n    async onDecrypt(algorithm, key, data) {\r\n        return AesCrypto.decrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\r\n    }\r\n    async onExportKey(format, key) {\r\n        return AesCrypto.exportKey(format, getCryptoKey(key));\r\n    }\r\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\r\n        const res = await AesCrypto.importKey(format, keyData, { name: algorithm.name }, extractable, keyUsages);\r\n        return setCryptoKey(res);\r\n    }\r\n    checkCryptoKey(key, keyUsage) {\r\n        super.checkCryptoKey(key, keyUsage);\r\n        if (!(getCryptoKey(key) instanceof AesCryptoKey)) {\r\n            throw new TypeError(\"key: Is not a AesCryptoKey\");\r\n        }\r\n    }\r\n}\n\nclass DesCryptoKey extends SymmetricKey {\r\n    get alg() {\r\n        switch (this.algorithm.name.toUpperCase()) {\r\n            case \"DES-CBC\":\r\n                return `DES-CBC`;\r\n            case \"DES-EDE3-CBC\":\r\n                return `3DES-CBC`;\r\n            default:\r\n                throw new core.AlgorithmError(\"Unsupported algorithm name\");\r\n        }\r\n    }\r\n    set alg(value) {\r\n    }\r\n}\r\n__decorate([\r\n    JsonProp({ name: \"k\", converter: JsonBase64UrlConverter })\r\n], DesCryptoKey.prototype, \"data\", void 0);\n\nclass DesCrypto {\r\n    static async generateKey(algorithm, extractable, keyUsages) {\r\n        const key = new DesCryptoKey();\r\n        key.algorithm = algorithm;\r\n        key.extractable = extractable;\r\n        key.usages = keyUsages;\r\n        key.data = crypto__default.randomBytes(algorithm.length >> 3);\r\n        return key;\r\n    }\r\n    static async exportKey(format, key) {\r\n        switch (format.toLowerCase()) {\r\n            case \"jwk\":\r\n                return JsonSerializer.toJSON(key);\r\n            case \"raw\":\r\n                return new Uint8Array(key.data).buffer;\r\n            default:\r\n                throw new core.OperationError(\"format: Must be 'jwk' or 'raw'\");\r\n        }\r\n    }\r\n    static async importKey(format, keyData, algorithm, extractable, keyUsages) {\r\n        let key;\r\n        switch (format.toLowerCase()) {\r\n            case \"jwk\":\r\n                key = JsonParser.fromJSON(keyData, { targetSchema: DesCryptoKey });\r\n                break;\r\n            case \"raw\":\r\n                key = new DesCryptoKey();\r\n                key.data = Buffer.from(keyData);\r\n                break;\r\n            default:\r\n                throw new core.OperationError(\"format: Must be 'jwk' or 'raw'\");\r\n        }\r\n        key.algorithm = algorithm;\r\n        key.extractable = extractable;\r\n        key.usages = keyUsages;\r\n        return key;\r\n    }\r\n    static async encrypt(algorithm, key, data) {\r\n        switch (algorithm.name.toUpperCase()) {\r\n            case \"DES-CBC\":\r\n                return this.encryptDesCBC(algorithm, key, Buffer.from(data));\r\n            case \"DES-EDE3-CBC\":\r\n                return this.encryptDesEDE3CBC(algorithm, key, Buffer.from(data));\r\n            default:\r\n                throw new core.OperationError(\"algorithm: Is not recognized\");\r\n        }\r\n    }\r\n    static async decrypt(algorithm, key, data) {\r\n        if (!(key instanceof DesCryptoKey)) {\r\n            throw new Error(\"key: Is not DesCryptoKey\");\r\n        }\r\n        switch (algorithm.name.toUpperCase()) {\r\n            case \"DES-CBC\":\r\n                return this.decryptDesCBC(algorithm, key, Buffer.from(data));\r\n            case \"DES-EDE3-CBC\":\r\n                return this.decryptDesEDE3CBC(algorithm, key, Buffer.from(data));\r\n            default:\r\n                throw new core.OperationError(\"algorithm: Is not recognized\");\r\n        }\r\n    }\r\n    static async encryptDesCBC(algorithm, key, data) {\r\n        const cipher = crypto__default.createCipheriv(`des-cbc`, key.data, new Uint8Array(algorithm.iv));\r\n        let enc = cipher.update(data);\r\n        enc = Buffer.concat([enc, cipher.final()]);\r\n        const res = new Uint8Array(enc).buffer;\r\n        return res;\r\n    }\r\n    static async decryptDesCBC(algorithm, key, data) {\r\n        const decipher = crypto__default.createDecipheriv(`des-cbc`, key.data, new Uint8Array(algorithm.iv));\r\n        let dec = decipher.update(data);\r\n        dec = Buffer.concat([dec, decipher.final()]);\r\n        return new Uint8Array(dec).buffer;\r\n    }\r\n    static async encryptDesEDE3CBC(algorithm, key, data) {\r\n        const cipher = crypto__default.createCipheriv(`des-ede3-cbc`, key.data, Buffer.from(algorithm.iv));\r\n        let enc = cipher.update(data);\r\n        enc = Buffer.concat([enc, cipher.final()]);\r\n        const res = new Uint8Array(enc).buffer;\r\n        return res;\r\n    }\r\n    static async decryptDesEDE3CBC(algorithm, key, data) {\r\n        const decipher = crypto__default.createDecipheriv(`des-ede3-cbc`, key.data, new Uint8Array(algorithm.iv));\r\n        let dec = decipher.update(data);\r\n        dec = Buffer.concat([dec, decipher.final()]);\r\n        return new Uint8Array(dec).buffer;\r\n    }\r\n}\n\nclass DesCbcProvider extends core.DesProvider {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.keySizeBits = 64;\r\n        this.ivSize = 8;\r\n        this.name = \"DES-CBC\";\r\n    }\r\n    async onGenerateKey(algorithm, extractable, keyUsages) {\r\n        const key = await DesCrypto.generateKey({\r\n            name: this.name,\r\n            length: this.keySizeBits,\r\n        }, extractable, keyUsages);\r\n        return setCryptoKey(key);\r\n    }\r\n    async onEncrypt(algorithm, key, data) {\r\n        return DesCrypto.encrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\r\n    }\r\n    async onDecrypt(algorithm, key, data) {\r\n        return DesCrypto.decrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\r\n    }\r\n    async onExportKey(format, key) {\r\n        return DesCrypto.exportKey(format, getCryptoKey(key));\r\n    }\r\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\r\n        const key = await DesCrypto.importKey(format, keyData, { name: this.name, length: this.keySizeBits }, extractable, keyUsages);\r\n        if (key.data.length !== (this.keySizeBits >> 3)) {\r\n            throw new core.OperationError(\"keyData: Wrong key size\");\r\n        }\r\n        return setCryptoKey(key);\r\n    }\r\n    checkCryptoKey(key, keyUsage) {\r\n        super.checkCryptoKey(key, keyUsage);\r\n        if (!(getCryptoKey(key) instanceof DesCryptoKey)) {\r\n            throw new TypeError(\"key: Is not a DesCryptoKey\");\r\n        }\r\n    }\r\n}\n\nclass DesEde3CbcProvider extends core.DesProvider {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.keySizeBits = 192;\r\n        this.ivSize = 8;\r\n        this.name = \"DES-EDE3-CBC\";\r\n    }\r\n    async onGenerateKey(algorithm, extractable, keyUsages) {\r\n        const key = await DesCrypto.generateKey({\r\n            name: this.name,\r\n            length: this.keySizeBits,\r\n        }, extractable, keyUsages);\r\n        return setCryptoKey(key);\r\n    }\r\n    async onEncrypt(algorithm, key, data) {\r\n        return DesCrypto.encrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\r\n    }\r\n    async onDecrypt(algorithm, key, data) {\r\n        return DesCrypto.decrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\r\n    }\r\n    async onExportKey(format, key) {\r\n        return DesCrypto.exportKey(format, getCryptoKey(key));\r\n    }\r\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\r\n        const key = await DesCrypto.importKey(format, keyData, { name: this.name, length: this.keySizeBits }, extractable, keyUsages);\r\n        if (key.data.length !== (this.keySizeBits >> 3)) {\r\n            throw new core.OperationError(\"keyData: Wrong key size\");\r\n        }\r\n        return setCryptoKey(key);\r\n    }\r\n    checkCryptoKey(key, keyUsage) {\r\n        super.checkCryptoKey(key, keyUsage);\r\n        if (!(getCryptoKey(key) instanceof DesCryptoKey)) {\r\n            throw new TypeError(\"key: Is not a DesCryptoKey\");\r\n        }\r\n    }\r\n}\n\nfunction getJwkAlgorithm(algorithm) {\r\n    switch (algorithm.name.toUpperCase()) {\r\n        case \"RSA-OAEP\": {\r\n            const mdSize = /(\\d+)$/.exec(algorithm.hash.name)[1];\r\n            return `RSA-OAEP${mdSize !== \"1\" ? `-${mdSize}` : \"\"}`;\r\n        }\r\n        case \"RSASSA-PKCS1-V1_5\":\r\n            return `RS${/(\\d+)$/.exec(algorithm.hash.name)[1]}`;\r\n        case \"RSA-PSS\":\r\n            return `PS${/(\\d+)$/.exec(algorithm.hash.name)[1]}`;\r\n        case \"RSA-PKCS1\":\r\n            return `RS1`;\r\n        default:\r\n            throw new core.OperationError(\"algorithm: Is not recognized\");\r\n    }\r\n}\n\nclass RsaPrivateKey extends AsymmetricKey {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.type = \"private\";\r\n    }\r\n    getKey() {\r\n        const keyInfo = AsnParser.parse(this.data, core.asn1.PrivateKeyInfo);\r\n        return AsnParser.parse(keyInfo.privateKey, core.asn1.RsaPrivateKey);\r\n    }\r\n    toJSON() {\r\n        const key = this.getKey();\r\n        const json = {\r\n            kty: \"RSA\",\r\n            alg: getJwkAlgorithm(this.algorithm),\r\n            key_ops: this.usages,\r\n            ext: this.extractable,\r\n        };\r\n        return Object.assign(json, JsonSerializer.toJSON(key));\r\n    }\r\n    fromJSON(json) {\r\n        const key = JsonParser.fromJSON(json, { targetSchema: core.asn1.RsaPrivateKey });\r\n        const keyInfo = new core.asn1.PrivateKeyInfo();\r\n        keyInfo.privateKeyAlgorithm.algorithm = \"1.2.840.113549.1.1.1\";\r\n        keyInfo.privateKeyAlgorithm.parameters = null;\r\n        keyInfo.privateKey = AsnSerializer.serialize(key);\r\n        this.data = Buffer.from(AsnSerializer.serialize(keyInfo));\r\n    }\r\n}\n\nclass RsaPublicKey extends AsymmetricKey {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.type = \"public\";\r\n    }\r\n    getKey() {\r\n        const keyInfo = AsnParser.parse(this.data, core.asn1.PublicKeyInfo);\r\n        return AsnParser.parse(keyInfo.publicKey, core.asn1.RsaPublicKey);\r\n    }\r\n    toJSON() {\r\n        const key = this.getKey();\r\n        const json = {\r\n            kty: \"RSA\",\r\n            alg: getJwkAlgorithm(this.algorithm),\r\n            key_ops: this.usages,\r\n            ext: this.extractable,\r\n        };\r\n        return Object.assign(json, JsonSerializer.toJSON(key));\r\n    }\r\n    fromJSON(json) {\r\n        const key = JsonParser.fromJSON(json, { targetSchema: core.asn1.RsaPublicKey });\r\n        const keyInfo = new core.asn1.PublicKeyInfo();\r\n        keyInfo.publicKeyAlgorithm.algorithm = \"1.2.840.113549.1.1.1\";\r\n        keyInfo.publicKeyAlgorithm.parameters = null;\r\n        keyInfo.publicKey = AsnSerializer.serialize(key);\r\n        this.data = Buffer.from(AsnSerializer.serialize(keyInfo));\r\n    }\r\n}\n\nclass RsaCrypto {\r\n    static async generateKey(algorithm, extractable, keyUsages) {\r\n        const privateKey = new RsaPrivateKey();\r\n        privateKey.algorithm = algorithm;\r\n        privateKey.extractable = extractable;\r\n        privateKey.usages = keyUsages.filter((usage) => this.privateKeyUsages.indexOf(usage) !== -1);\r\n        const publicKey = new RsaPublicKey();\r\n        publicKey.algorithm = algorithm;\r\n        publicKey.extractable = true;\r\n        publicKey.usages = keyUsages.filter((usage) => this.publicKeyUsages.indexOf(usage) !== -1);\r\n        const publicExponent = Buffer.concat([\r\n            Buffer.alloc(4 - algorithm.publicExponent.byteLength, 0),\r\n            Buffer.from(algorithm.publicExponent),\r\n        ]).readInt32BE(0);\r\n        const keys = crypto__default.generateKeyPairSync(\"rsa\", {\r\n            modulusLength: algorithm.modulusLength,\r\n            publicExponent,\r\n            publicKeyEncoding: {\r\n                format: \"der\",\r\n                type: \"spki\",\r\n            },\r\n            privateKeyEncoding: {\r\n                format: \"der\",\r\n                type: \"pkcs8\",\r\n            },\r\n        });\r\n        privateKey.data = keys.privateKey;\r\n        publicKey.data = keys.publicKey;\r\n        const res = {\r\n            privateKey,\r\n            publicKey,\r\n        };\r\n        return res;\r\n    }\r\n    static async exportKey(format, key) {\r\n        switch (format.toLowerCase()) {\r\n            case \"jwk\":\r\n                return JsonSerializer.toJSON(key);\r\n            case \"pkcs8\":\r\n            case \"spki\":\r\n                return new Uint8Array(key.data).buffer;\r\n            default:\r\n                throw new core.OperationError(\"format: Must be 'jwk', 'pkcs8' or 'spki'\");\r\n        }\r\n    }\r\n    static async importKey(format, keyData, algorithm, extractable, keyUsages) {\r\n        switch (format.toLowerCase()) {\r\n            case \"jwk\": {\r\n                const jwk = keyData;\r\n                if (jwk.d) {\r\n                    const asnKey = JsonParser.fromJSON(keyData, { targetSchema: core.asn1.RsaPrivateKey });\r\n                    return this.importPrivateKey(asnKey, algorithm, extractable, keyUsages);\r\n                }\r\n                else {\r\n                    const asnKey = JsonParser.fromJSON(keyData, { targetSchema: core.asn1.RsaPublicKey });\r\n                    return this.importPublicKey(asnKey, algorithm, extractable, keyUsages);\r\n                }\r\n            }\r\n            case \"spki\": {\r\n                const keyInfo = AsnParser.parse(new Uint8Array(keyData), core.asn1.PublicKeyInfo);\r\n                const asnKey = AsnParser.parse(keyInfo.publicKey, core.asn1.RsaPublicKey);\r\n                return this.importPublicKey(asnKey, algorithm, extractable, keyUsages);\r\n            }\r\n            case \"pkcs8\": {\r\n                const keyInfo = AsnParser.parse(new Uint8Array(keyData), core.asn1.PrivateKeyInfo);\r\n                const asnKey = AsnParser.parse(keyInfo.privateKey, core.asn1.RsaPrivateKey);\r\n                return this.importPrivateKey(asnKey, algorithm, extractable, keyUsages);\r\n            }\r\n            default:\r\n                throw new core.OperationError(\"format: Must be 'jwk', 'pkcs8' or 'spki'\");\r\n        }\r\n    }\r\n    static async sign(algorithm, key, data) {\r\n        switch (algorithm.name.toUpperCase()) {\r\n            case \"RSA-PSS\":\r\n            case \"RSASSA-PKCS1-V1_5\":\r\n                return this.signRsa(algorithm, key, data);\r\n            default:\r\n                throw new core.OperationError(\"algorithm: Is not recognized\");\r\n        }\r\n    }\r\n    static async verify(algorithm, key, signature, data) {\r\n        switch (algorithm.name.toUpperCase()) {\r\n            case \"RSA-PSS\":\r\n            case \"RSASSA-PKCS1-V1_5\":\r\n                return this.verifySSA(algorithm, key, data, signature);\r\n            default:\r\n                throw new core.OperationError(\"algorithm: Is not recognized\");\r\n        }\r\n    }\r\n    static async encrypt(algorithm, key, data) {\r\n        switch (algorithm.name.toUpperCase()) {\r\n            case \"RSA-OAEP\":\r\n                return this.encryptOAEP(algorithm, key, data);\r\n            default:\r\n                throw new core.OperationError(\"algorithm: Is not recognized\");\r\n        }\r\n    }\r\n    static async decrypt(algorithm, key, data) {\r\n        switch (algorithm.name.toUpperCase()) {\r\n            case \"RSA-OAEP\":\r\n                return this.decryptOAEP(algorithm, key, data);\r\n            default:\r\n                throw new core.OperationError(\"algorithm: Is not recognized\");\r\n        }\r\n    }\r\n    static importPrivateKey(asnKey, algorithm, extractable, keyUsages) {\r\n        const keyInfo = new core.asn1.PrivateKeyInfo();\r\n        keyInfo.privateKeyAlgorithm.algorithm = \"1.2.840.113549.1.1.1\";\r\n        keyInfo.privateKeyAlgorithm.parameters = null;\r\n        keyInfo.privateKey = AsnSerializer.serialize(asnKey);\r\n        const key = new RsaPrivateKey();\r\n        key.data = Buffer.from(AsnSerializer.serialize(keyInfo));\r\n        key.algorithm = Object.assign({}, algorithm);\r\n        key.algorithm.publicExponent = new Uint8Array(asnKey.publicExponent);\r\n        key.algorithm.modulusLength = asnKey.modulus.byteLength << 3;\r\n        key.extractable = extractable;\r\n        key.usages = keyUsages;\r\n        return key;\r\n    }\r\n    static importPublicKey(asnKey, algorithm, extractable, keyUsages) {\r\n        const keyInfo = new core.asn1.PublicKeyInfo();\r\n        keyInfo.publicKeyAlgorithm.algorithm = \"1.2.840.113549.1.1.1\";\r\n        keyInfo.publicKeyAlgorithm.parameters = null;\r\n        keyInfo.publicKey = AsnSerializer.serialize(asnKey);\r\n        const key = new RsaPublicKey();\r\n        key.data = Buffer.from(AsnSerializer.serialize(keyInfo));\r\n        key.algorithm = Object.assign({}, algorithm);\r\n        key.algorithm.publicExponent = new Uint8Array(asnKey.publicExponent);\r\n        key.algorithm.modulusLength = asnKey.modulus.byteLength << 3;\r\n        key.extractable = extractable;\r\n        key.usages = keyUsages;\r\n        return key;\r\n    }\r\n    static getCryptoAlgorithm(alg) {\r\n        switch (alg.hash.name.toUpperCase()) {\r\n            case \"SHA-1\":\r\n                return \"RSA-SHA1\";\r\n            case \"SHA-256\":\r\n                return \"RSA-SHA256\";\r\n            case \"SHA-384\":\r\n                return \"RSA-SHA384\";\r\n            case \"SHA-512\":\r\n                return \"RSA-SHA512\";\r\n            case \"SHA3-256\":\r\n                return \"RSA-SHA3-256\";\r\n            case \"SHA3-384\":\r\n                return \"RSA-SHA3-384\";\r\n            case \"SHA3-512\":\r\n                return \"RSA-SHA3-512\";\r\n            default:\r\n                throw new core.OperationError(\"algorithm.hash: Is not recognized\");\r\n        }\r\n    }\r\n    static signRsa(algorithm, key, data) {\r\n        const cryptoAlg = this.getCryptoAlgorithm(key.algorithm);\r\n        const signer = crypto__default.createSign(cryptoAlg);\r\n        signer.update(Buffer.from(data));\r\n        if (!key.pem) {\r\n            key.pem = `-----BEGIN PRIVATE KEY-----\\n${key.data.toString(\"base64\")}\\n-----END PRIVATE KEY-----`;\r\n        }\r\n        const options = {\r\n            key: key.pem,\r\n        };\r\n        if (algorithm.name.toUpperCase() === \"RSA-PSS\") {\r\n            options.padding = crypto__default.constants.RSA_PKCS1_PSS_PADDING;\r\n            options.saltLength = algorithm.saltLength;\r\n        }\r\n        const signature = signer.sign(options);\r\n        return new Uint8Array(signature).buffer;\r\n    }\r\n    static verifySSA(algorithm, key, data, signature) {\r\n        const cryptoAlg = this.getCryptoAlgorithm(key.algorithm);\r\n        const signer = crypto__default.createVerify(cryptoAlg);\r\n        signer.update(Buffer.from(data));\r\n        if (!key.pem) {\r\n            key.pem = `-----BEGIN PUBLIC KEY-----\\n${key.data.toString(\"base64\")}\\n-----END PUBLIC KEY-----`;\r\n        }\r\n        const options = {\r\n            key: key.pem,\r\n        };\r\n        if (algorithm.name.toUpperCase() === \"RSA-PSS\") {\r\n            options.padding = crypto__default.constants.RSA_PKCS1_PSS_PADDING;\r\n            options.saltLength = algorithm.saltLength;\r\n        }\r\n        const ok = signer.verify(options, signature);\r\n        return ok;\r\n    }\r\n    static encryptOAEP(algorithm, key, data) {\r\n        const options = {\r\n            key: `-----BEGIN PUBLIC KEY-----\\n${key.data.toString(\"base64\")}\\n-----END PUBLIC KEY-----`,\r\n            padding: crypto__default.constants.RSA_PKCS1_OAEP_PADDING,\r\n        };\r\n        if (algorithm.label) ;\r\n        return new Uint8Array(crypto__default.publicEncrypt(options, data)).buffer;\r\n    }\r\n    static decryptOAEP(algorithm, key, data) {\r\n        const options = {\r\n            key: `-----BEGIN PRIVATE KEY-----\\n${key.data.toString(\"base64\")}\\n-----END PRIVATE KEY-----`,\r\n            padding: crypto__default.constants.RSA_PKCS1_OAEP_PADDING,\r\n        };\r\n        if (algorithm.label) ;\r\n        return new Uint8Array(crypto__default.privateDecrypt(options, data)).buffer;\r\n    }\r\n}\r\nRsaCrypto.publicKeyUsages = [\"verify\", \"encrypt\", \"wrapKey\"];\r\nRsaCrypto.privateKeyUsages = [\"sign\", \"decrypt\", \"unwrapKey\"];\n\nclass RsaSsaProvider extends core.RsaSsaProvider {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.hashAlgorithms = [\r\n            \"SHA-1\", \"SHA-256\", \"SHA-384\", \"SHA-512\",\r\n            \"shake128\", \"shake256\",\r\n            \"SHA3-256\", \"SHA3-384\", \"SHA3-512\"\r\n        ];\r\n    }\r\n    async onGenerateKey(algorithm, extractable, keyUsages) {\r\n        const keys = await RsaCrypto.generateKey({\r\n            ...algorithm,\r\n            name: this.name,\r\n        }, extractable, keyUsages);\r\n        return {\r\n            privateKey: setCryptoKey(keys.privateKey),\r\n            publicKey: setCryptoKey(keys.publicKey),\r\n        };\r\n    }\r\n    async onSign(algorithm, key, data) {\r\n        return RsaCrypto.sign(algorithm, getCryptoKey(key), new Uint8Array(data));\r\n    }\r\n    async onVerify(algorithm, key, signature, data) {\r\n        return RsaCrypto.verify(algorithm, getCryptoKey(key), new Uint8Array(signature), new Uint8Array(data));\r\n    }\r\n    async onExportKey(format, key) {\r\n        return RsaCrypto.exportKey(format, getCryptoKey(key));\r\n    }\r\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\r\n        const key = await RsaCrypto.importKey(format, keyData, { ...algorithm, name: this.name }, extractable, keyUsages);\r\n        return setCryptoKey(key);\r\n    }\r\n    checkCryptoKey(key, keyUsage) {\r\n        super.checkCryptoKey(key, keyUsage);\r\n        const internalKey = getCryptoKey(key);\r\n        if (!(internalKey instanceof RsaPrivateKey || internalKey instanceof RsaPublicKey)) {\r\n            throw new TypeError(\"key: Is not RSA CryptoKey\");\r\n        }\r\n    }\r\n}\n\nclass RsaPssProvider extends core.RsaPssProvider {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.hashAlgorithms = [\r\n            \"SHA-1\", \"SHA-256\", \"SHA-384\", \"SHA-512\",\r\n            \"shake128\", \"shake256\",\r\n            \"SHA3-256\", \"SHA3-384\", \"SHA3-512\"\r\n        ];\r\n    }\r\n    async onGenerateKey(algorithm, extractable, keyUsages) {\r\n        const keys = await RsaCrypto.generateKey({\r\n            ...algorithm,\r\n            name: this.name,\r\n        }, extractable, keyUsages);\r\n        return {\r\n            privateKey: setCryptoKey(keys.privateKey),\r\n            publicKey: setCryptoKey(keys.publicKey),\r\n        };\r\n    }\r\n    async onSign(algorithm, key, data) {\r\n        return RsaCrypto.sign(algorithm, getCryptoKey(key), new Uint8Array(data));\r\n    }\r\n    async onVerify(algorithm, key, signature, data) {\r\n        return RsaCrypto.verify(algorithm, getCryptoKey(key), new Uint8Array(signature), new Uint8Array(data));\r\n    }\r\n    async onExportKey(format, key) {\r\n        return RsaCrypto.exportKey(format, getCryptoKey(key));\r\n    }\r\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\r\n        const key = await RsaCrypto.importKey(format, keyData, { ...algorithm, name: this.name }, extractable, keyUsages);\r\n        return setCryptoKey(key);\r\n    }\r\n    checkCryptoKey(key, keyUsage) {\r\n        super.checkCryptoKey(key, keyUsage);\r\n        const internalKey = getCryptoKey(key);\r\n        if (!(internalKey instanceof RsaPrivateKey || internalKey instanceof RsaPublicKey)) {\r\n            throw new TypeError(\"key: Is not RSA CryptoKey\");\r\n        }\r\n    }\r\n}\n\nclass ShaCrypto {\r\n    static size(algorithm) {\r\n        switch (algorithm.name.toUpperCase()) {\r\n            case \"SHA-1\":\r\n                return 160;\r\n            case \"SHA-256\":\r\n            case \"SHA3-256\":\r\n                return 256;\r\n            case \"SHA-384\":\r\n            case \"SHA3-384\":\r\n                return 384;\r\n            case \"SHA-512\":\r\n            case \"SHA3-512\":\r\n                return 512;\r\n            default:\r\n                throw new Error(\"Unrecognized name\");\r\n        }\r\n    }\r\n    static getAlgorithmName(algorithm) {\r\n        switch (algorithm.name.toUpperCase()) {\r\n            case \"SHA-1\":\r\n                return \"sha1\";\r\n            case \"SHA-256\":\r\n                return \"sha256\";\r\n            case \"SHA-384\":\r\n                return \"sha384\";\r\n            case \"SHA-512\":\r\n                return \"sha512\";\r\n            case \"SHA3-256\":\r\n                return \"sha3-256\";\r\n            case \"SHA3-384\":\r\n                return \"sha3-384\";\r\n            case \"SHA3-512\":\r\n                return \"sha3-512\";\r\n            default:\r\n                throw new Error(\"Unrecognized name\");\r\n        }\r\n    }\r\n    static digest(algorithm, data) {\r\n        const hashAlg = this.getAlgorithmName(algorithm);\r\n        const hash = crypto__default.createHash(hashAlg)\r\n            .update(Buffer.from(data)).digest();\r\n        return new Uint8Array(hash).buffer;\r\n    }\r\n}\n\nclass RsaOaepProvider extends core.RsaOaepProvider {\r\n    async onGenerateKey(algorithm, extractable, keyUsages) {\r\n        const keys = await RsaCrypto.generateKey({\r\n            ...algorithm,\r\n            name: this.name,\r\n        }, extractable, keyUsages);\r\n        return {\r\n            privateKey: setCryptoKey(keys.privateKey),\r\n            publicKey: setCryptoKey(keys.publicKey),\r\n        };\r\n    }\r\n    async onEncrypt(algorithm, key, data) {\r\n        const internalKey = getCryptoKey(key);\r\n        const dataView = new Uint8Array(data);\r\n        const keySize = Math.ceil(internalKey.algorithm.modulusLength >> 3);\r\n        const hashSize = ShaCrypto.size(internalKey.algorithm.hash) >> 3;\r\n        const dataLength = dataView.byteLength;\r\n        const psLength = keySize - dataLength - 2 * hashSize - 2;\r\n        if (dataLength > keySize - 2 * hashSize - 2) {\r\n            throw new Error(\"Data too large\");\r\n        }\r\n        const message = new Uint8Array(keySize);\r\n        const seed = message.subarray(1, hashSize + 1);\r\n        const dataBlock = message.subarray(hashSize + 1);\r\n        dataBlock.set(dataView, hashSize + psLength + 1);\r\n        const labelHash = crypto__default.createHash(internalKey.algorithm.hash.name.replace(\"-\", \"\"))\r\n            .update(core.BufferSourceConverter.toUint8Array(algorithm.label || new Uint8Array(0)))\r\n            .digest();\r\n        dataBlock.set(labelHash, 0);\r\n        dataBlock[hashSize + psLength] = 1;\r\n        crypto__default.randomFillSync(seed);\r\n        const dataBlockMask = this.mgf1(internalKey.algorithm.hash, seed, dataBlock.length);\r\n        for (let i = 0; i < dataBlock.length; i++) {\r\n            dataBlock[i] ^= dataBlockMask[i];\r\n        }\r\n        const seedMask = this.mgf1(internalKey.algorithm.hash, dataBlock, seed.length);\r\n        for (let i = 0; i < seed.length; i++) {\r\n            seed[i] ^= seedMask[i];\r\n        }\r\n        if (!internalKey.pem) {\r\n            internalKey.pem = `-----BEGIN PUBLIC KEY-----\\n${internalKey.data.toString(\"base64\")}\\n-----END PUBLIC KEY-----`;\r\n        }\r\n        const pkcs0 = crypto__default.publicEncrypt({\r\n            key: internalKey.pem,\r\n            padding: crypto__default.constants.RSA_NO_PADDING,\r\n        }, Buffer.from(message));\r\n        return new Uint8Array(pkcs0).buffer;\r\n    }\r\n    async onDecrypt(algorithm, key, data) {\r\n        const internalKey = getCryptoKey(key);\r\n        const keySize = Math.ceil(internalKey.algorithm.modulusLength >> 3);\r\n        const hashSize = ShaCrypto.size(internalKey.algorithm.hash) >> 3;\r\n        const dataLength = data.byteLength;\r\n        if (dataLength !== keySize) {\r\n            throw new Error(\"Bad data\");\r\n        }\r\n        if (!internalKey.pem) {\r\n            internalKey.pem = `-----BEGIN PRIVATE KEY-----\\n${internalKey.data.toString(\"base64\")}\\n-----END PRIVATE KEY-----`;\r\n        }\r\n        let pkcs0 = crypto__default.privateDecrypt({\r\n            key: internalKey.pem,\r\n            padding: crypto__default.constants.RSA_NO_PADDING,\r\n        }, Buffer.from(data));\r\n        const z = pkcs0[0];\r\n        const seed = pkcs0.subarray(1, hashSize + 1);\r\n        const dataBlock = pkcs0.subarray(hashSize + 1);\r\n        if (z !== 0) {\r\n            throw new Error(\"Decryption failed\");\r\n        }\r\n        const seedMask = this.mgf1(internalKey.algorithm.hash, dataBlock, seed.length);\r\n        for (let i = 0; i < seed.length; i++) {\r\n            seed[i] ^= seedMask[i];\r\n        }\r\n        const dataBlockMask = this.mgf1(internalKey.algorithm.hash, seed, dataBlock.length);\r\n        for (let i = 0; i < dataBlock.length; i++) {\r\n            dataBlock[i] ^= dataBlockMask[i];\r\n        }\r\n        const labelHash = crypto__default.createHash(internalKey.algorithm.hash.name.replace(\"-\", \"\"))\r\n            .update(core.BufferSourceConverter.toUint8Array(algorithm.label || new Uint8Array(0)))\r\n            .digest();\r\n        for (let i = 0; i < hashSize; i++) {\r\n            if (labelHash[i] !== dataBlock[i]) {\r\n                throw new Error(\"Decryption failed\");\r\n            }\r\n        }\r\n        let psEnd = hashSize;\r\n        for (; psEnd < dataBlock.length; psEnd++) {\r\n            const psz = dataBlock[psEnd];\r\n            if (psz === 1) {\r\n                break;\r\n            }\r\n            if (psz !== 0) {\r\n                throw new Error(\"Decryption failed\");\r\n            }\r\n        }\r\n        if (psEnd === dataBlock.length) {\r\n            throw new Error(\"Decryption failed\");\r\n        }\r\n        pkcs0 = dataBlock.subarray(psEnd + 1);\r\n        return new Uint8Array(pkcs0).buffer;\r\n    }\r\n    async onExportKey(format, key) {\r\n        return RsaCrypto.exportKey(format, getCryptoKey(key));\r\n    }\r\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\r\n        const key = await RsaCrypto.importKey(format, keyData, { ...algorithm, name: this.name }, extractable, keyUsages);\r\n        return setCryptoKey(key);\r\n    }\r\n    checkCryptoKey(key, keyUsage) {\r\n        super.checkCryptoKey(key, keyUsage);\r\n        const internalKey = getCryptoKey(key);\r\n        if (!(internalKey instanceof RsaPrivateKey || internalKey instanceof RsaPublicKey)) {\r\n            throw new TypeError(\"key: Is not RSA CryptoKey\");\r\n        }\r\n    }\r\n    mgf1(algorithm, seed, length = 0) {\r\n        const hashSize = ShaCrypto.size(algorithm) >> 3;\r\n        const mask = new Uint8Array(length);\r\n        const counter = new Uint8Array(4);\r\n        const chunks = Math.ceil(length / hashSize);\r\n        for (let i = 0; i < chunks; i++) {\r\n            counter[0] = i >>> 24;\r\n            counter[1] = (i >>> 16) & 255;\r\n            counter[2] = (i >>> 8) & 255;\r\n            counter[3] = i & 255;\r\n            const submask = mask.subarray(i * hashSize);\r\n            let chunk = crypto__default.createHash(algorithm.name.replace(\"-\", \"\"))\r\n                .update(seed)\r\n                .update(counter)\r\n                .digest();\r\n            if (chunk.length > submask.length) {\r\n                chunk = chunk.subarray(0, submask.length);\r\n            }\r\n            submask.set(chunk);\r\n        }\r\n        return mask;\r\n    }\r\n}\n\nclass RsaEsProvider extends core.ProviderCrypto {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.name = \"RSAES-PKCS1-v1_5\";\r\n        this.usages = {\r\n            publicKey: [\"encrypt\", \"wrapKey\"],\r\n            privateKey: [\"decrypt\", \"unwrapKey\"],\r\n        };\r\n    }\r\n    async onGenerateKey(algorithm, extractable, keyUsages) {\r\n        const keys = await RsaCrypto.generateKey({\r\n            ...algorithm,\r\n            name: this.name,\r\n        }, extractable, keyUsages);\r\n        return {\r\n            privateKey: setCryptoKey(keys.privateKey),\r\n            publicKey: setCryptoKey(keys.publicKey),\r\n        };\r\n    }\r\n    checkGenerateKeyParams(algorithm) {\r\n        this.checkRequiredProperty(algorithm, \"publicExponent\");\r\n        if (!(algorithm.publicExponent && algorithm.publicExponent instanceof Uint8Array)) {\r\n            throw new TypeError(\"publicExponent: Missing or not a Uint8Array\");\r\n        }\r\n        const publicExponent = Convert.ToBase64(algorithm.publicExponent);\r\n        if (!(publicExponent === \"Aw==\" || publicExponent === \"AQAB\")) {\r\n            throw new TypeError(\"publicExponent: Must be [3] or [1,0,1]\");\r\n        }\r\n        this.checkRequiredProperty(algorithm, \"modulusLength\");\r\n        switch (algorithm.modulusLength) {\r\n            case 1024:\r\n            case 2048:\r\n            case 4096:\r\n                break;\r\n            default:\r\n                throw new TypeError(\"modulusLength: Must be 1024, 2048, or 4096\");\r\n        }\r\n    }\r\n    async onEncrypt(algorithm, key, data) {\r\n        const options = this.toCryptoOptions(key);\r\n        const enc = crypto.publicEncrypt(options, new Uint8Array(data));\r\n        return new Uint8Array(enc).buffer;\r\n    }\r\n    async onDecrypt(algorithm, key, data) {\r\n        const options = this.toCryptoOptions(key);\r\n        const dec = crypto.privateDecrypt(options, new Uint8Array(data));\r\n        return new Uint8Array(dec).buffer;\r\n    }\r\n    async onExportKey(format, key) {\r\n        return RsaCrypto.exportKey(format, getCryptoKey(key));\r\n    }\r\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\r\n        const key = await RsaCrypto.importKey(format, keyData, { ...algorithm, name: this.name }, extractable, keyUsages);\r\n        return setCryptoKey(key);\r\n    }\r\n    checkCryptoKey(key, keyUsage) {\r\n        super.checkCryptoKey(key, keyUsage);\r\n        const internalKey = getCryptoKey(key);\r\n        if (!(internalKey instanceof RsaPrivateKey || internalKey instanceof RsaPublicKey)) {\r\n            throw new TypeError(\"key: Is not RSA CryptoKey\");\r\n        }\r\n    }\r\n    toCryptoOptions(key) {\r\n        const type = key.type.toUpperCase();\r\n        return {\r\n            key: `-----BEGIN ${type} KEY-----\\n${getCryptoKey(key).data.toString(\"base64\")}\\n-----END ${type} KEY-----`,\r\n            padding: crypto.constants.RSA_PKCS1_PADDING,\r\n        };\r\n    }\r\n}\n\nconst namedOIDs = {\r\n    \"1.2.840.10045.3.1.7\": \"P-256\",\r\n    \"P-256\": \"1.2.840.10045.3.1.7\",\r\n    \"1.3.132.0.34\": \"P-384\",\r\n    \"P-384\": \"1.3.132.0.34\",\r\n    \"1.3.132.0.35\": \"P-521\",\r\n    \"P-521\": \"1.3.132.0.35\",\r\n    \"1.3.132.0.10\": \"K-256\",\r\n    \"K-256\": \"1.3.132.0.10\",\r\n    \"brainpoolP160r1\": \"1.3.36.3.3.2.8.1.1.1\",\r\n    \"1.3.36.3.3.2.8.1.1.1\": \"brainpoolP160r1\",\r\n    \"brainpoolP160t1\": \"1.3.36.3.3.2.8.1.1.2\",\r\n    \"1.3.36.3.3.2.8.1.1.2\": \"brainpoolP160t1\",\r\n    \"brainpoolP192r1\": \"1.3.36.3.3.2.8.1.1.3\",\r\n    \"1.3.36.3.3.2.8.1.1.3\": \"brainpoolP192r1\",\r\n    \"brainpoolP192t1\": \"1.3.36.3.3.2.8.1.1.4\",\r\n    \"1.3.36.3.3.2.8.1.1.4\": \"brainpoolP192t1\",\r\n    \"brainpoolP224r1\": \"1.3.36.3.3.2.8.1.1.5\",\r\n    \"1.3.36.3.3.2.8.1.1.5\": \"brainpoolP224r1\",\r\n    \"brainpoolP224t1\": \"1.3.36.3.3.2.8.1.1.6\",\r\n    \"1.3.36.3.3.2.8.1.1.6\": \"brainpoolP224t1\",\r\n    \"brainpoolP256r1\": \"1.3.36.3.3.2.8.1.1.7\",\r\n    \"1.3.36.3.3.2.8.1.1.7\": \"brainpoolP256r1\",\r\n    \"brainpoolP256t1\": \"1.3.36.3.3.2.8.1.1.8\",\r\n    \"1.3.36.3.3.2.8.1.1.8\": \"brainpoolP256t1\",\r\n    \"brainpoolP320r1\": \"1.3.36.3.3.2.8.1.1.9\",\r\n    \"1.3.36.3.3.2.8.1.1.9\": \"brainpoolP320r1\",\r\n    \"brainpoolP320t1\": \"1.3.36.3.3.2.8.1.1.10\",\r\n    \"1.3.36.3.3.2.8.1.1.10\": \"brainpoolP320t1\",\r\n    \"brainpoolP384r1\": \"1.3.36.3.3.2.8.1.1.11\",\r\n    \"1.3.36.3.3.2.8.1.1.11\": \"brainpoolP384r1\",\r\n    \"brainpoolP384t1\": \"1.3.36.3.3.2.8.1.1.12\",\r\n    \"1.3.36.3.3.2.8.1.1.12\": \"brainpoolP384t1\",\r\n    \"brainpoolP512r1\": \"1.3.36.3.3.2.8.1.1.13\",\r\n    \"1.3.36.3.3.2.8.1.1.13\": \"brainpoolP512r1\",\r\n    \"brainpoolP512t1\": \"1.3.36.3.3.2.8.1.1.14\",\r\n    \"1.3.36.3.3.2.8.1.1.14\": \"brainpoolP512t1\",\r\n};\r\nfunction getOidByNamedCurve$1(namedCurve) {\r\n    const oid = namedOIDs[namedCurve];\r\n    if (!oid) {\r\n        throw new core.OperationError(`Cannot convert WebCrypto named curve '${namedCurve}' to OID`);\r\n    }\r\n    return oid;\r\n}\n\nclass EcPrivateKey extends AsymmetricKey {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.type = \"private\";\r\n    }\r\n    getKey() {\r\n        const keyInfo = AsnParser.parse(this.data, core.asn1.PrivateKeyInfo);\r\n        return AsnParser.parse(keyInfo.privateKey, core.asn1.EcPrivateKey);\r\n    }\r\n    toJSON() {\r\n        const key = this.getKey();\r\n        const json = {\r\n            kty: \"EC\",\r\n            crv: this.algorithm.namedCurve,\r\n            key_ops: this.usages,\r\n            ext: this.extractable,\r\n        };\r\n        return Object.assign(json, JsonSerializer.toJSON(key));\r\n    }\r\n    fromJSON(json) {\r\n        if (!json.crv) {\r\n            throw new core.OperationError(`Cannot get named curve from JWK. Property 'crv' is required`);\r\n        }\r\n        const keyInfo = new core.asn1.PrivateKeyInfo();\r\n        keyInfo.privateKeyAlgorithm.algorithm = \"1.2.840.10045.2.1\";\r\n        keyInfo.privateKeyAlgorithm.parameters = AsnSerializer.serialize(new core.asn1.ObjectIdentifier(getOidByNamedCurve$1(json.crv)));\r\n        const key = JsonParser.fromJSON(json, { targetSchema: core.asn1.EcPrivateKey });\r\n        keyInfo.privateKey = AsnSerializer.serialize(key);\r\n        this.data = Buffer.from(AsnSerializer.serialize(keyInfo));\r\n        return this;\r\n    }\r\n}\n\nclass EcPublicKey extends AsymmetricKey {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.type = \"public\";\r\n    }\r\n    getKey() {\r\n        const keyInfo = AsnParser.parse(this.data, core.asn1.PublicKeyInfo);\r\n        return new core.asn1.EcPublicKey(keyInfo.publicKey);\r\n    }\r\n    toJSON() {\r\n        const key = this.getKey();\r\n        const json = {\r\n            kty: \"EC\",\r\n            crv: this.algorithm.namedCurve,\r\n            key_ops: this.usages,\r\n            ext: this.extractable,\r\n        };\r\n        return Object.assign(json, JsonSerializer.toJSON(key));\r\n    }\r\n    fromJSON(json) {\r\n        if (!json.crv) {\r\n            throw new core.OperationError(`Cannot get named curve from JWK. Property 'crv' is required`);\r\n        }\r\n        const key = JsonParser.fromJSON(json, { targetSchema: core.asn1.EcPublicKey });\r\n        const keyInfo = new core.asn1.PublicKeyInfo();\r\n        keyInfo.publicKeyAlgorithm.algorithm = \"1.2.840.10045.2.1\";\r\n        keyInfo.publicKeyAlgorithm.parameters = AsnSerializer.serialize(new core.asn1.ObjectIdentifier(getOidByNamedCurve$1(json.crv)));\r\n        keyInfo.publicKey = AsnSerializer.toASN(key).valueHex;\r\n        this.data = Buffer.from(AsnSerializer.serialize(keyInfo));\r\n        return this;\r\n    }\r\n}\n\nclass Sha1Provider extends core.ProviderCrypto {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.name = \"SHA-1\";\r\n        this.usages = [];\r\n    }\r\n    async onDigest(algorithm, data) {\r\n        return ShaCrypto.digest(algorithm, data);\r\n    }\r\n}\n\nclass Sha256Provider extends core.ProviderCrypto {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.name = \"SHA-256\";\r\n        this.usages = [];\r\n    }\r\n    async onDigest(algorithm, data) {\r\n        return ShaCrypto.digest(algorithm, data);\r\n    }\r\n}\n\nclass Sha384Provider extends core.ProviderCrypto {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.name = \"SHA-384\";\r\n        this.usages = [];\r\n    }\r\n    async onDigest(algorithm, data) {\r\n        return ShaCrypto.digest(algorithm, data);\r\n    }\r\n}\n\nclass Sha512Provider extends core.ProviderCrypto {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.name = \"SHA-512\";\r\n        this.usages = [];\r\n    }\r\n    async onDigest(algorithm, data) {\r\n        return ShaCrypto.digest(algorithm, data);\r\n    }\r\n}\n\nclass Sha3256Provider extends core.ProviderCrypto {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.name = \"SHA3-256\";\r\n        this.usages = [];\r\n    }\r\n    async onDigest(algorithm, data) {\r\n        return ShaCrypto.digest(algorithm, data);\r\n    }\r\n}\n\nclass Sha3384Provider extends core.ProviderCrypto {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.name = \"SHA3-384\";\r\n        this.usages = [];\r\n    }\r\n    async onDigest(algorithm, data) {\r\n        return ShaCrypto.digest(algorithm, data);\r\n    }\r\n}\n\nclass Sha3512Provider extends core.ProviderCrypto {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.name = \"SHA3-512\";\r\n        this.usages = [];\r\n    }\r\n    async onDigest(algorithm, data) {\r\n        return ShaCrypto.digest(algorithm, data);\r\n    }\r\n}\n\nclass EcCrypto {\r\n    static async generateKey(algorithm, extractable, keyUsages) {\r\n        const privateKey = new EcPrivateKey();\r\n        privateKey.algorithm = algorithm;\r\n        privateKey.extractable = extractable;\r\n        privateKey.usages = keyUsages.filter((usage) => this.privateKeyUsages.indexOf(usage) !== -1);\r\n        const publicKey = new EcPublicKey();\r\n        publicKey.algorithm = algorithm;\r\n        publicKey.extractable = true;\r\n        publicKey.usages = keyUsages.filter((usage) => this.publicKeyUsages.indexOf(usage) !== -1);\r\n        const keys = crypto__default.generateKeyPairSync(\"ec\", {\r\n            namedCurve: this.getOpenSSLNamedCurve(algorithm.namedCurve),\r\n            publicKeyEncoding: {\r\n                format: \"der\",\r\n                type: \"spki\",\r\n            },\r\n            privateKeyEncoding: {\r\n                format: \"der\",\r\n                type: \"pkcs8\",\r\n            },\r\n        });\r\n        privateKey.data = keys.privateKey;\r\n        publicKey.data = keys.publicKey;\r\n        const res = {\r\n            privateKey,\r\n            publicKey,\r\n        };\r\n        return res;\r\n    }\r\n    static async sign(algorithm, key, data) {\r\n        const cryptoAlg = ShaCrypto.getAlgorithmName(algorithm.hash);\r\n        const signer = crypto__default.createSign(cryptoAlg);\r\n        signer.update(Buffer.from(data));\r\n        if (!key.pem) {\r\n            key.pem = `-----BEGIN PRIVATE KEY-----\\n${key.data.toString(\"base64\")}\\n-----END PRIVATE KEY-----`;\r\n        }\r\n        const options = {\r\n            key: key.pem,\r\n        };\r\n        const signature = signer.sign(options);\r\n        const ecSignature = AsnParser.parse(signature, core.asn1.EcDsaSignature);\r\n        const signatureRaw = core.EcUtils.encodeSignature(ecSignature, core.EcCurves.get(key.algorithm.namedCurve).size);\r\n        return signatureRaw.buffer;\r\n    }\r\n    static async verify(algorithm, key, signature, data) {\r\n        const cryptoAlg = ShaCrypto.getAlgorithmName(algorithm.hash);\r\n        const signer = crypto__default.createVerify(cryptoAlg);\r\n        signer.update(Buffer.from(data));\r\n        if (!key.pem) {\r\n            key.pem = `-----BEGIN PUBLIC KEY-----\\n${key.data.toString(\"base64\")}\\n-----END PUBLIC KEY-----`;\r\n        }\r\n        const options = {\r\n            key: key.pem,\r\n        };\r\n        const ecSignature = new core.asn1.EcDsaSignature();\r\n        const namedCurve = core.EcCurves.get(key.algorithm.namedCurve);\r\n        const signaturePoint = core.EcUtils.decodeSignature(signature, namedCurve.size);\r\n        ecSignature.r = BufferSourceConverter.toArrayBuffer(signaturePoint.r);\r\n        ecSignature.s = BufferSourceConverter.toArrayBuffer(signaturePoint.s);\r\n        const ecSignatureRaw = Buffer.from(AsnSerializer.serialize(ecSignature));\r\n        const ok = signer.verify(options, ecSignatureRaw);\r\n        return ok;\r\n    }\r\n    static async deriveBits(algorithm, baseKey, length) {\r\n        const cryptoAlg = this.getOpenSSLNamedCurve(baseKey.algorithm.namedCurve);\r\n        const ecdh = crypto__default.createECDH(cryptoAlg);\r\n        const asnPrivateKey = AsnParser.parse(baseKey.data, core.asn1.PrivateKeyInfo);\r\n        const asnEcPrivateKey = AsnParser.parse(asnPrivateKey.privateKey, core.asn1.EcPrivateKey);\r\n        ecdh.setPrivateKey(Buffer.from(asnEcPrivateKey.privateKey));\r\n        const asnPublicKey = AsnParser.parse(algorithm.public.data, core.asn1.PublicKeyInfo);\r\n        const bits = ecdh.computeSecret(Buffer.from(asnPublicKey.publicKey));\r\n        if (length === null) {\r\n            return bits;\r\n        }\r\n        return new Uint8Array(bits).buffer.slice(0, length >> 3);\r\n    }\r\n    static async exportKey(format, key) {\r\n        switch (format.toLowerCase()) {\r\n            case \"jwk\":\r\n                return JsonSerializer.toJSON(key);\r\n            case \"pkcs8\":\r\n            case \"spki\":\r\n                return new Uint8Array(key.data).buffer;\r\n            case \"raw\": {\r\n                const publicKeyInfo = AsnParser.parse(key.data, core.asn1.PublicKeyInfo);\r\n                return publicKeyInfo.publicKey;\r\n            }\r\n            default:\r\n                throw new core.OperationError(\"format: Must be 'jwk', 'raw', pkcs8' or 'spki'\");\r\n        }\r\n    }\r\n    static async importKey(format, keyData, algorithm, extractable, keyUsages) {\r\n        switch (format.toLowerCase()) {\r\n            case \"jwk\": {\r\n                const jwk = keyData;\r\n                if (jwk.d) {\r\n                    const asnKey = JsonParser.fromJSON(keyData, { targetSchema: core.asn1.EcPrivateKey });\r\n                    return this.importPrivateKey(asnKey, algorithm, extractable, keyUsages);\r\n                }\r\n                else {\r\n                    const asnKey = JsonParser.fromJSON(keyData, { targetSchema: core.asn1.EcPublicKey });\r\n                    return this.importPublicKey(asnKey, algorithm, extractable, keyUsages);\r\n                }\r\n            }\r\n            case \"raw\": {\r\n                const asnKey = new core.asn1.EcPublicKey(keyData);\r\n                return this.importPublicKey(asnKey, algorithm, extractable, keyUsages);\r\n            }\r\n            case \"spki\": {\r\n                const keyInfo = AsnParser.parse(new Uint8Array(keyData), core.asn1.PublicKeyInfo);\r\n                const asnKey = new core.asn1.EcPublicKey(keyInfo.publicKey);\r\n                this.assertKeyParameters(keyInfo.publicKeyAlgorithm.parameters, algorithm.namedCurve);\r\n                return this.importPublicKey(asnKey, algorithm, extractable, keyUsages);\r\n            }\r\n            case \"pkcs8\": {\r\n                const keyInfo = AsnParser.parse(new Uint8Array(keyData), core.asn1.PrivateKeyInfo);\r\n                const asnKey = AsnParser.parse(keyInfo.privateKey, core.asn1.EcPrivateKey);\r\n                this.assertKeyParameters(keyInfo.privateKeyAlgorithm.parameters, algorithm.namedCurve);\r\n                return this.importPrivateKey(asnKey, algorithm, extractable, keyUsages);\r\n            }\r\n            default:\r\n                throw new core.OperationError(\"format: Must be 'jwk', 'raw', 'pkcs8' or 'spki'\");\r\n        }\r\n    }\r\n    static assertKeyParameters(parameters, namedCurve) {\r\n        if (!parameters) {\r\n            throw new core.CryptoError(\"Key info doesn't have required parameters\");\r\n        }\r\n        let namedCurveIdentifier = \"\";\r\n        try {\r\n            namedCurveIdentifier = AsnParser.parse(parameters, core.asn1.ObjectIdentifier).value;\r\n        }\r\n        catch (e) {\r\n            throw new core.CryptoError(\"Cannot read key info parameters\");\r\n        }\r\n        if (getOidByNamedCurve$1(namedCurve) !== namedCurveIdentifier) {\r\n            throw new core.CryptoError(\"Key info parameter doesn't match to named curve\");\r\n        }\r\n    }\r\n    static async importPrivateKey(asnKey, algorithm, extractable, keyUsages) {\r\n        const keyInfo = new core.asn1.PrivateKeyInfo();\r\n        keyInfo.privateKeyAlgorithm.algorithm = \"1.2.840.10045.2.1\";\r\n        keyInfo.privateKeyAlgorithm.parameters = AsnSerializer.serialize(new core.asn1.ObjectIdentifier(getOidByNamedCurve$1(algorithm.namedCurve)));\r\n        keyInfo.privateKey = AsnSerializer.serialize(asnKey);\r\n        const key = new EcPrivateKey();\r\n        key.data = Buffer.from(AsnSerializer.serialize(keyInfo));\r\n        key.algorithm = Object.assign({}, algorithm);\r\n        key.extractable = extractable;\r\n        key.usages = keyUsages;\r\n        return key;\r\n    }\r\n    static async importPublicKey(asnKey, algorithm, extractable, keyUsages) {\r\n        const keyInfo = new core.asn1.PublicKeyInfo();\r\n        keyInfo.publicKeyAlgorithm.algorithm = \"1.2.840.10045.2.1\";\r\n        const namedCurve = getOidByNamedCurve$1(algorithm.namedCurve);\r\n        keyInfo.publicKeyAlgorithm.parameters = AsnSerializer.serialize(new core.asn1.ObjectIdentifier(namedCurve));\r\n        keyInfo.publicKey = asnKey.value;\r\n        const key = new EcPublicKey();\r\n        key.data = Buffer.from(AsnSerializer.serialize(keyInfo));\r\n        key.algorithm = Object.assign({}, algorithm);\r\n        key.extractable = extractable;\r\n        key.usages = keyUsages;\r\n        return key;\r\n    }\r\n    static getOpenSSLNamedCurve(curve) {\r\n        switch (curve.toUpperCase()) {\r\n            case \"P-256\":\r\n                return \"prime256v1\";\r\n            case \"K-256\":\r\n                return \"secp256k1\";\r\n            case \"P-384\":\r\n                return \"secp384r1\";\r\n            case \"P-521\":\r\n                return \"secp521r1\";\r\n            default:\r\n                return curve;\r\n        }\r\n    }\r\n}\r\nEcCrypto.publicKeyUsages = [\"verify\"];\r\nEcCrypto.privateKeyUsages = [\"sign\", \"deriveKey\", \"deriveBits\"];\n\nclass EcdsaProvider extends core.EcdsaProvider {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.namedCurves = core.EcCurves.names;\r\n        this.hashAlgorithms = [\r\n            \"SHA-1\", \"SHA-256\", \"SHA-384\", \"SHA-512\",\r\n            \"shake128\", \"shake256\",\r\n            \"SHA3-256\", \"SHA3-384\", \"SHA3-512\"\r\n        ];\r\n    }\r\n    async onGenerateKey(algorithm, extractable, keyUsages) {\r\n        const keys = await EcCrypto.generateKey({\r\n            ...algorithm,\r\n            name: this.name,\r\n        }, extractable, keyUsages);\r\n        return {\r\n            privateKey: setCryptoKey(keys.privateKey),\r\n            publicKey: setCryptoKey(keys.publicKey),\r\n        };\r\n    }\r\n    async onSign(algorithm, key, data) {\r\n        return EcCrypto.sign(algorithm, getCryptoKey(key), new Uint8Array(data));\r\n    }\r\n    async onVerify(algorithm, key, signature, data) {\r\n        return EcCrypto.verify(algorithm, getCryptoKey(key), new Uint8Array(signature), new Uint8Array(data));\r\n    }\r\n    async onExportKey(format, key) {\r\n        return EcCrypto.exportKey(format, getCryptoKey(key));\r\n    }\r\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\r\n        const key = await EcCrypto.importKey(format, keyData, { ...algorithm, name: this.name }, extractable, keyUsages);\r\n        return setCryptoKey(key);\r\n    }\r\n    checkCryptoKey(key, keyUsage) {\r\n        super.checkCryptoKey(key, keyUsage);\r\n        const internalKey = getCryptoKey(key);\r\n        if (!(internalKey instanceof EcPrivateKey || internalKey instanceof EcPublicKey)) {\r\n            throw new TypeError(\"key: Is not EC CryptoKey\");\r\n        }\r\n    }\r\n}\n\nclass EcdhProvider extends core.EcdhProvider {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.namedCurves = core.EcCurves.names;\r\n    }\r\n    async onGenerateKey(algorithm, extractable, keyUsages) {\r\n        const keys = await EcCrypto.generateKey({\r\n            ...algorithm,\r\n            name: this.name,\r\n        }, extractable, keyUsages);\r\n        return {\r\n            privateKey: setCryptoKey(keys.privateKey),\r\n            publicKey: setCryptoKey(keys.publicKey),\r\n        };\r\n    }\r\n    async onExportKey(format, key) {\r\n        return EcCrypto.exportKey(format, getCryptoKey(key));\r\n    }\r\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\r\n        const key = await EcCrypto.importKey(format, keyData, { ...algorithm, name: this.name }, extractable, keyUsages);\r\n        return setCryptoKey(key);\r\n    }\r\n    checkCryptoKey(key, keyUsage) {\r\n        super.checkCryptoKey(key, keyUsage);\r\n        const internalKey = getCryptoKey(key);\r\n        if (!(internalKey instanceof EcPrivateKey || internalKey instanceof EcPublicKey)) {\r\n            throw new TypeError(\"key: Is not EC CryptoKey\");\r\n        }\r\n    }\r\n    async onDeriveBits(algorithm, baseKey, length) {\r\n        const bits = await EcCrypto.deriveBits({ ...algorithm, public: getCryptoKey(algorithm.public) }, getCryptoKey(baseKey), length);\r\n        return bits;\r\n    }\r\n}\n\nconst edOIDs = {\r\n    [core.asn1.idEd448]: \"Ed448\",\r\n    \"ed448\": core.asn1.idEd448,\r\n    [core.asn1.idX448]: \"X448\",\r\n    \"x448\": core.asn1.idX448,\r\n    [core.asn1.idEd25519]: \"Ed25519\",\r\n    \"ed25519\": core.asn1.idEd25519,\r\n    [core.asn1.idX25519]: \"X25519\",\r\n    \"x25519\": core.asn1.idX25519,\r\n};\r\nfunction getOidByNamedCurve(namedCurve) {\r\n    const oid = edOIDs[namedCurve.toLowerCase()];\r\n    if (!oid) {\r\n        throw new core.OperationError(`Cannot convert WebCrypto named curve '${namedCurve}' to OID`);\r\n    }\r\n    return oid;\r\n}\n\nclass EdPrivateKey extends AsymmetricKey {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.type = \"private\";\r\n    }\r\n    getKey() {\r\n        const keyInfo = AsnParser.parse(this.data, core.asn1.PrivateKeyInfo);\r\n        return AsnParser.parse(keyInfo.privateKey, core.asn1.CurvePrivateKey);\r\n    }\r\n    toJSON() {\r\n        const key = this.getKey();\r\n        const json = {\r\n            kty: \"OKP\",\r\n            crv: this.algorithm.namedCurve,\r\n            key_ops: this.usages,\r\n            ext: this.extractable,\r\n        };\r\n        return Object.assign(json, JsonSerializer.toJSON(key));\r\n    }\r\n    fromJSON(json) {\r\n        if (!json.crv) {\r\n            throw new core.OperationError(`Cannot get named curve from JWK. Property 'crv' is required`);\r\n        }\r\n        const keyInfo = new core.asn1.PrivateKeyInfo();\r\n        keyInfo.privateKeyAlgorithm.algorithm = getOidByNamedCurve(json.crv);\r\n        const key = JsonParser.fromJSON(json, { targetSchema: core.asn1.CurvePrivateKey });\r\n        keyInfo.privateKey = AsnSerializer.serialize(key);\r\n        this.data = Buffer.from(AsnSerializer.serialize(keyInfo));\r\n        return this;\r\n    }\r\n}\n\nclass EdPublicKey extends AsymmetricKey {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.type = \"public\";\r\n    }\r\n    getKey() {\r\n        const keyInfo = AsnParser.parse(this.data, core.asn1.PublicKeyInfo);\r\n        return keyInfo.publicKey;\r\n    }\r\n    toJSON() {\r\n        const key = this.getKey();\r\n        const json = {\r\n            kty: \"OKP\",\r\n            crv: this.algorithm.namedCurve,\r\n            key_ops: this.usages,\r\n            ext: this.extractable,\r\n        };\r\n        return Object.assign(json, {\r\n            x: Convert.ToBase64Url(key)\r\n        });\r\n    }\r\n    fromJSON(json) {\r\n        if (!json.crv) {\r\n            throw new core.OperationError(`Cannot get named curve from JWK. Property 'crv' is required`);\r\n        }\r\n        if (!json.x) {\r\n            throw new core.OperationError(`Cannot get property from JWK. Property 'x' is required`);\r\n        }\r\n        const keyInfo = new core.asn1.PublicKeyInfo();\r\n        keyInfo.publicKeyAlgorithm.algorithm = getOidByNamedCurve(json.crv);\r\n        keyInfo.publicKey = Convert.FromBase64Url(json.x);\r\n        this.data = Buffer.from(AsnSerializer.serialize(keyInfo));\r\n        return this;\r\n    }\r\n}\n\nclass EdCrypto {\r\n    static async generateKey(algorithm, extractable, keyUsages) {\r\n        const privateKey = new EdPrivateKey();\r\n        privateKey.algorithm = algorithm;\r\n        privateKey.extractable = extractable;\r\n        privateKey.usages = keyUsages.filter((usage) => this.privateKeyUsages.indexOf(usage) !== -1);\r\n        const publicKey = new EdPublicKey();\r\n        publicKey.algorithm = algorithm;\r\n        publicKey.extractable = true;\r\n        publicKey.usages = keyUsages.filter((usage) => this.publicKeyUsages.indexOf(usage) !== -1);\r\n        const type = algorithm.namedCurve.toLowerCase();\r\n        const keys = crypto__default.generateKeyPairSync(type, {\r\n            publicKeyEncoding: {\r\n                format: \"der\",\r\n                type: \"spki\",\r\n            },\r\n            privateKeyEncoding: {\r\n                format: \"der\",\r\n                type: \"pkcs8\",\r\n            },\r\n        });\r\n        privateKey.data = keys.privateKey;\r\n        publicKey.data = keys.publicKey;\r\n        const res = {\r\n            privateKey,\r\n            publicKey,\r\n        };\r\n        return res;\r\n    }\r\n    static async sign(algorithm, key, data) {\r\n        if (!key.pem) {\r\n            key.pem = `-----BEGIN PRIVATE KEY-----\\n${key.data.toString(\"base64\")}\\n-----END PRIVATE KEY-----`;\r\n        }\r\n        const options = {\r\n            key: key.pem,\r\n        };\r\n        const signature = crypto__default.sign(null, Buffer.from(data), options);\r\n        return core.BufferSourceConverter.toArrayBuffer(signature);\r\n    }\r\n    static async verify(algorithm, key, signature, data) {\r\n        if (!key.pem) {\r\n            key.pem = `-----BEGIN PUBLIC KEY-----\\n${key.data.toString(\"base64\")}\\n-----END PUBLIC KEY-----`;\r\n        }\r\n        const options = {\r\n            key: key.pem,\r\n        };\r\n        const ok = crypto__default.verify(null, Buffer.from(data), options, Buffer.from(signature));\r\n        return ok;\r\n    }\r\n    static async deriveBits(algorithm, baseKey, length) {\r\n        const publicKey = crypto__default.createPublicKey({\r\n            key: algorithm.public.data,\r\n            format: \"der\",\r\n            type: \"spki\",\r\n        });\r\n        const privateKey = crypto__default.createPrivateKey({\r\n            key: baseKey.data,\r\n            format: \"der\",\r\n            type: \"pkcs8\",\r\n        });\r\n        const bits = crypto__default.diffieHellman({\r\n            publicKey,\r\n            privateKey,\r\n        });\r\n        return new Uint8Array(bits).buffer.slice(0, length >> 3);\r\n    }\r\n    static async exportKey(format, key) {\r\n        switch (format.toLowerCase()) {\r\n            case \"jwk\":\r\n                return JsonSerializer.toJSON(key);\r\n            case \"pkcs8\":\r\n            case \"spki\":\r\n                return new Uint8Array(key.data).buffer;\r\n            case \"raw\": {\r\n                const publicKeyInfo = AsnParser.parse(key.data, core.asn1.PublicKeyInfo);\r\n                return publicKeyInfo.publicKey;\r\n            }\r\n            default:\r\n                throw new core.OperationError(\"format: Must be 'jwk', 'raw', pkcs8' or 'spki'\");\r\n        }\r\n    }\r\n    static async importKey(format, keyData, algorithm, extractable, keyUsages) {\r\n        switch (format.toLowerCase()) {\r\n            case \"jwk\": {\r\n                const jwk = keyData;\r\n                if (jwk.d) {\r\n                    const asnKey = JsonParser.fromJSON(keyData, { targetSchema: core.asn1.CurvePrivateKey });\r\n                    return this.importPrivateKey(asnKey, algorithm, extractable, keyUsages);\r\n                }\r\n                else {\r\n                    if (!jwk.x) {\r\n                        throw new TypeError(\"keyData: Cannot get required 'x' filed\");\r\n                    }\r\n                    return this.importPublicKey(Convert.FromBase64Url(jwk.x), algorithm, extractable, keyUsages);\r\n                }\r\n            }\r\n            case \"raw\": {\r\n                return this.importPublicKey(keyData, algorithm, extractable, keyUsages);\r\n            }\r\n            case \"spki\": {\r\n                const keyInfo = AsnParser.parse(new Uint8Array(keyData), core.asn1.PublicKeyInfo);\r\n                return this.importPublicKey(keyInfo.publicKey, algorithm, extractable, keyUsages);\r\n            }\r\n            case \"pkcs8\": {\r\n                const keyInfo = AsnParser.parse(new Uint8Array(keyData), core.asn1.PrivateKeyInfo);\r\n                const asnKey = AsnParser.parse(keyInfo.privateKey, core.asn1.CurvePrivateKey);\r\n                return this.importPrivateKey(asnKey, algorithm, extractable, keyUsages);\r\n            }\r\n            default:\r\n                throw new core.OperationError(\"format: Must be 'jwk', 'raw', 'pkcs8' or 'spki'\");\r\n        }\r\n    }\r\n    static importPrivateKey(asnKey, algorithm, extractable, keyUsages) {\r\n        const key = new EdPrivateKey();\r\n        key.fromJSON({\r\n            crv: algorithm.namedCurve,\r\n            d: Convert.ToBase64Url(asnKey.d),\r\n        });\r\n        key.algorithm = Object.assign({}, algorithm);\r\n        key.extractable = extractable;\r\n        key.usages = keyUsages;\r\n        return key;\r\n    }\r\n    static async importPublicKey(asnKey, algorithm, extractable, keyUsages) {\r\n        const key = new EdPublicKey();\r\n        key.fromJSON({\r\n            crv: algorithm.namedCurve,\r\n            x: Convert.ToBase64Url(asnKey),\r\n        });\r\n        key.algorithm = Object.assign({}, algorithm);\r\n        key.extractable = extractable;\r\n        key.usages = keyUsages;\r\n        return key;\r\n    }\r\n}\r\nEdCrypto.publicKeyUsages = [\"verify\"];\r\nEdCrypto.privateKeyUsages = [\"sign\", \"deriveKey\", \"deriveBits\"];\n\nclass EdDsaProvider extends core.EdDsaProvider {\r\n    async onGenerateKey(algorithm, extractable, keyUsages) {\r\n        const keys = await EdCrypto.generateKey({\r\n            name: this.name,\r\n            namedCurve: algorithm.namedCurve.replace(/^ed/i, \"Ed\"),\r\n        }, extractable, keyUsages);\r\n        return {\r\n            privateKey: setCryptoKey(keys.privateKey),\r\n            publicKey: setCryptoKey(keys.publicKey),\r\n        };\r\n    }\r\n    async onSign(algorithm, key, data) {\r\n        return EdCrypto.sign(algorithm, getCryptoKey(key), new Uint8Array(data));\r\n    }\r\n    async onVerify(algorithm, key, signature, data) {\r\n        return EdCrypto.verify(algorithm, getCryptoKey(key), new Uint8Array(signature), new Uint8Array(data));\r\n    }\r\n    async onExportKey(format, key) {\r\n        return EdCrypto.exportKey(format, getCryptoKey(key));\r\n    }\r\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\r\n        const key = await EdCrypto.importKey(format, keyData, { ...algorithm, name: this.name }, extractable, keyUsages);\r\n        return setCryptoKey(key);\r\n    }\r\n}\n\nclass EcdhEsProvider extends core.EcdhEsProvider {\r\n    async onGenerateKey(algorithm, extractable, keyUsages) {\r\n        const keys = await EdCrypto.generateKey({\r\n            name: this.name,\r\n            namedCurve: algorithm.namedCurve.toUpperCase(),\r\n        }, extractable, keyUsages);\r\n        return {\r\n            privateKey: setCryptoKey(keys.privateKey),\r\n            publicKey: setCryptoKey(keys.publicKey),\r\n        };\r\n    }\r\n    async onDeriveBits(algorithm, baseKey, length) {\r\n        const bits = await EdCrypto.deriveBits({ ...algorithm, public: getCryptoKey(algorithm.public) }, getCryptoKey(baseKey), length);\r\n        return bits;\r\n    }\r\n    async onExportKey(format, key) {\r\n        return EdCrypto.exportKey(format, getCryptoKey(key));\r\n    }\r\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\r\n        const key = await EdCrypto.importKey(format, keyData, { ...algorithm, name: this.name }, extractable, keyUsages);\r\n        return setCryptoKey(key);\r\n    }\r\n}\n\nclass PbkdfCryptoKey extends CryptoKey {\r\n}\n\nclass Pbkdf2Provider extends core.Pbkdf2Provider {\r\n    async onDeriveBits(algorithm, baseKey, length) {\r\n        return new Promise((resolve, reject) => {\r\n            const salt = core.BufferSourceConverter.toArrayBuffer(algorithm.salt);\r\n            const hash = algorithm.hash.name.replace(\"-\", \"\");\r\n            crypto__default.pbkdf2(getCryptoKey(baseKey).data, Buffer.from(salt), algorithm.iterations, length >> 3, hash, (err, derivedBits) => {\r\n                if (err) {\r\n                    reject(err);\r\n                }\r\n                else {\r\n                    resolve(new Uint8Array(derivedBits).buffer);\r\n                }\r\n            });\r\n        });\r\n    }\r\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\r\n        if (format === \"raw\") {\r\n            const key = new PbkdfCryptoKey();\r\n            key.data = Buffer.from(keyData);\r\n            key.algorithm = { name: this.name };\r\n            key.extractable = false;\r\n            key.usages = keyUsages;\r\n            return setCryptoKey(key);\r\n        }\r\n        throw new core.OperationError(\"format: Must be 'raw'\");\r\n    }\r\n    checkCryptoKey(key, keyUsage) {\r\n        super.checkCryptoKey(key, keyUsage);\r\n        if (!(getCryptoKey(key) instanceof PbkdfCryptoKey)) {\r\n            throw new TypeError(\"key: Is not PBKDF CryptoKey\");\r\n        }\r\n    }\r\n}\n\nclass HmacCryptoKey extends CryptoKey {\r\n    get alg() {\r\n        const hash = this.algorithm.hash.name.toUpperCase();\r\n        return `HS${hash.replace(\"SHA-\", \"\")}`;\r\n    }\r\n    set alg(value) {\r\n    }\r\n}\r\n__decorate([\r\n    JsonProp({ name: \"k\", converter: JsonBase64UrlConverter })\r\n], HmacCryptoKey.prototype, \"data\", void 0);\n\nclass HmacProvider extends core.HmacProvider {\r\n    async onGenerateKey(algorithm, extractable, keyUsages) {\r\n        const length = (algorithm.length || this.getDefaultLength(algorithm.hash.name)) >> 3 << 3;\r\n        const key = new HmacCryptoKey();\r\n        key.algorithm = {\r\n            ...algorithm,\r\n            length,\r\n            name: this.name,\r\n        };\r\n        key.extractable = extractable;\r\n        key.usages = keyUsages;\r\n        key.data = crypto__default.randomBytes(length >> 3);\r\n        return setCryptoKey(key);\r\n    }\r\n    async onSign(algorithm, key, data) {\r\n        const cryptoAlg = ShaCrypto.getAlgorithmName(key.algorithm.hash);\r\n        const hmac = crypto__default.createHmac(cryptoAlg, getCryptoKey(key).data)\r\n            .update(Buffer.from(data)).digest();\r\n        return new Uint8Array(hmac).buffer;\r\n    }\r\n    async onVerify(algorithm, key, signature, data) {\r\n        const cryptoAlg = ShaCrypto.getAlgorithmName(key.algorithm.hash);\r\n        const hmac = crypto__default.createHmac(cryptoAlg, getCryptoKey(key).data)\r\n            .update(Buffer.from(data)).digest();\r\n        return hmac.compare(Buffer.from(signature)) === 0;\r\n    }\r\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\r\n        let key;\r\n        switch (format.toLowerCase()) {\r\n            case \"jwk\":\r\n                key = JsonParser.fromJSON(keyData, { targetSchema: HmacCryptoKey });\r\n                break;\r\n            case \"raw\":\r\n                key = new HmacCryptoKey();\r\n                key.data = Buffer.from(keyData);\r\n                break;\r\n            default:\r\n                throw new core.OperationError(\"format: Must be 'jwk' or 'raw'\");\r\n        }\r\n        key.algorithm = {\r\n            hash: { name: algorithm.hash.name },\r\n            name: this.name,\r\n            length: key.data.length << 3,\r\n        };\r\n        key.extractable = extractable;\r\n        key.usages = keyUsages;\r\n        return setCryptoKey(key);\r\n    }\r\n    async onExportKey(format, key) {\r\n        switch (format.toLowerCase()) {\r\n            case \"jwk\":\r\n                return JsonSerializer.toJSON(getCryptoKey(key));\r\n            case \"raw\":\r\n                return new Uint8Array(getCryptoKey(key).data).buffer;\r\n            default:\r\n                throw new core.OperationError(\"format: Must be 'jwk' or 'raw'\");\r\n        }\r\n    }\r\n    checkCryptoKey(key, keyUsage) {\r\n        super.checkCryptoKey(key, keyUsage);\r\n        if (!(getCryptoKey(key) instanceof HmacCryptoKey)) {\r\n            throw new TypeError(\"key: Is not HMAC CryptoKey\");\r\n        }\r\n    }\r\n}\n\nclass HkdfCryptoKey extends CryptoKey {\r\n}\n\nclass HkdfProvider extends core.HkdfProvider {\r\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\r\n        if (format.toLowerCase() !== \"raw\") {\r\n            throw new core.OperationError(\"Operation not supported\");\r\n        }\r\n        const key = new HkdfCryptoKey();\r\n        key.data = Buffer.from(keyData);\r\n        key.algorithm = { name: this.name };\r\n        key.extractable = extractable;\r\n        key.usages = keyUsages;\r\n        return setCryptoKey(key);\r\n    }\r\n    async onDeriveBits(params, baseKey, length) {\r\n        const hash = params.hash.name.replace(\"-\", \"\");\r\n        const hashLength = crypto__default.createHash(hash).digest().length;\r\n        const byteLength = length / 8;\r\n        const info = BufferSourceConverter$1.toUint8Array(params.info);\r\n        const PRK = crypto__default.createHmac(hash, BufferSourceConverter$1.toUint8Array(params.salt))\r\n            .update(BufferSourceConverter$1.toUint8Array(getCryptoKey(baseKey).data))\r\n            .digest();\r\n        const blocks = [Buffer.alloc(0)];\r\n        const blockCount = Math.ceil(byteLength / hashLength) + 1;\r\n        for (let i = 1; i < blockCount; ++i) {\r\n            blocks.push(crypto__default.createHmac(hash, PRK)\r\n                .update(Buffer.concat([blocks[i - 1], info, Buffer.from([i])]))\r\n                .digest());\r\n        }\r\n        return Buffer.concat(blocks).slice(0, byteLength);\r\n    }\r\n    checkCryptoKey(key, keyUsage) {\r\n        super.checkCryptoKey(key, keyUsage);\r\n        if (!(getCryptoKey(key) instanceof HkdfCryptoKey)) {\r\n            throw new TypeError(\"key: Is not HKDF CryptoKey\");\r\n        }\r\n    }\r\n}\n\nclass ShakeCrypto {\r\n    static digest(algorithm, data) {\r\n        const hash = crypto__default.createHash(algorithm.name.toLowerCase(), { outputLength: algorithm.length })\r\n            .update(Buffer.from(data)).digest();\r\n        return new Uint8Array(hash).buffer;\r\n    }\r\n}\n\nclass Shake128Provider extends core.Shake128Provider {\r\n    async onDigest(algorithm, data) {\r\n        return ShakeCrypto.digest(algorithm, data);\r\n    }\r\n}\n\nclass Shake256Provider extends core.Shake256Provider {\r\n    async onDigest(algorithm, data) {\r\n        return ShakeCrypto.digest(algorithm, data);\r\n    }\r\n}\n\nclass SubtleCrypto extends core.SubtleCrypto {\r\n    constructor() {\r\n        var _a;\r\n        super();\r\n        this.providers.set(new AesCbcProvider());\r\n        this.providers.set(new AesCtrProvider());\r\n        this.providers.set(new AesGcmProvider());\r\n        this.providers.set(new AesCmacProvider());\r\n        this.providers.set(new AesKwProvider());\r\n        this.providers.set(new AesEcbProvider());\r\n        this.providers.set(new DesCbcProvider());\r\n        this.providers.set(new DesEde3CbcProvider());\r\n        this.providers.set(new RsaSsaProvider());\r\n        this.providers.set(new RsaPssProvider());\r\n        this.providers.set(new RsaOaepProvider());\r\n        this.providers.set(new RsaEsProvider());\r\n        this.providers.set(new EcdsaProvider());\r\n        this.providers.set(new EcdhProvider());\r\n        this.providers.set(new Sha1Provider());\r\n        this.providers.set(new Sha256Provider());\r\n        this.providers.set(new Sha384Provider());\r\n        this.providers.set(new Sha512Provider());\r\n        this.providers.set(new Pbkdf2Provider());\r\n        this.providers.set(new HmacProvider());\r\n        this.providers.set(new HkdfProvider());\r\n        const nodeMajorVersion = (_a = /^v(\\d+)/.exec(process.version)) === null || _a === void 0 ? void 0 : _a[1];\r\n        if (nodeMajorVersion && parseInt(nodeMajorVersion, 10) >= 12) {\r\n            this.providers.set(new Shake128Provider());\r\n            this.providers.set(new Shake256Provider());\r\n        }\r\n        const hashes = crypto.getHashes();\r\n        if (hashes.includes(\"sha3-256\")) {\r\n            this.providers.set(new Sha3256Provider());\r\n        }\r\n        if (hashes.includes(\"sha3-384\")) {\r\n            this.providers.set(new Sha3384Provider());\r\n        }\r\n        if (hashes.includes(\"sha3-512\")) {\r\n            this.providers.set(new Sha3512Provider());\r\n        }\r\n        if (nodeMajorVersion && parseInt(nodeMajorVersion, 10) >= 14) {\r\n            this.providers.set(new EdDsaProvider());\r\n            this.providers.set(new EcdhEsProvider());\r\n        }\r\n    }\r\n}\n\nclass Crypto extends core.Crypto {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.subtle = new SubtleCrypto();\r\n    }\r\n    getRandomValues(array) {\r\n        if (!ArrayBuffer.isView(array)) {\r\n            throw new TypeError(\"Failed to execute 'getRandomValues' on 'Crypto': parameter 1 is not of type 'ArrayBufferView'\");\r\n        }\r\n        const buffer = Buffer.from(array.buffer, array.byteOffset, array.byteLength);\r\n        crypto__default.randomFillSync(buffer);\r\n        return array;\r\n    }\r\n}\n\nexport { Crypto };\n"],"names":["ARRAY_BUFFER_NAME","BufferSourceConverter","data","type","a","b","aView","bView","i","args","buffers","size","buffer","res","offset","view","Utf8Converter","text","s","uintArray","buf","encodedString","Utf16Converter","littleEndian","arrayBuffer","dataView","code","Convert","enc","str","binary","base64","formatted","base64url","encoding","stringLength","resultView","splitter","len","char","hexString","c","padCount","combine","totalByteLength","item","prev","cur","currentPos","arr","item2","utilFromBase","inputBuffer","inputBase","result","utilToBase","value","base","reserved","internalReserved","internalValue","biggest","retBuf","retView","j","basis","utilConcatView","views","outputLength","prevLength","utilDecodeTC","condition1","condition2","bigIntBuffer","bigIntView","bigInt","smallIntBuffer","smallIntView","utilEncodeTC","modValue","smallInt","tempBuf","tempView","k","isEqualBuffer","inputBuffer1","inputBuffer2","view1","view2","padNumber","inputNumber","fullLength","dif","padding","assertBigInt","concat","checkBufferParams","baseBlock","inputOffset","inputLength","ViewWriter","powers2","digitsString","NAME","VALUE_HEX_VIEW","IS_HEX_ONLY","ID_BLOCK","TAG_CLASS","TAG_NUMBER","IS_CONSTRUCTED","FROM_BER","TO_BER","LOCAL","EMPTY_STRING","EMPTY_BUFFER","EMPTY_VIEW","END_OF_CONTENT_NAME","OCTET_STRING_NAME","BIT_STRING_NAME","HexBlock","BaseClass","_a","params","pvtsutils.BufferSourceConverter","endLength","sizeOnly","pvtsutils.Convert","LocalBaseBlock","blockLength","error","warnings","valueBeforeDecode","ValueBlock","writer","LocalIdentificationBlock","idBlock","_b","_c","_d","firstOctet","number","encodedBuf","pvutils.utilToBase","encodedView","curView","inputView","intBuffer","tagNumberMask","count","intTagNumberBuffer","tagNumberBufferMaxLength","tempBufferView","pvutils.utilFromBase","LocalLengthBlock","lenBlock","lenOffset","lengthBufferView","typeStore","BaseBlock","name","optional","primitiveSchema","parameters","valueBlockType","resultOffset","_writer","prepareIndefiniteForm","idBlockBuf","valueBlockBuf","lenBlockBuf","object","other","thisRaw","otherRaw","pvutils.isEqualBuffer","BaseStringBlock","stringValueBlockType","LocalPrimitiveValueBlock","isHexOnly","_a$w","Primitive","localChangeType","inputObject","newType","newObject","localFromBER","incomingOffset","returnObject","newASN1Type","fromBER","checkLen","indefiniteLength","length","LocalConstructedValueBlock","isIndefiniteForm","currentOffset","_a$v","Constructed","values","o","blockName","LocalEndOfContentValueBlock","_a$u","EndOfContent","_a$t","Null","LocalBooleanValueBlock","octet","pvutils.utilDecodeTC","_a$s","Boolean","LocalOctetStringValueBlock","isConstructed","currentBlockName","_a$r","OctetString","asn","array","content","LocalBitStringValueBlock","unusedBits","valueBlock","_a$q","BitString","bits","valueHex","byte","bitsStr","_a$p","viewAdd","first","second","firstView","secondView","firstViewCopy","firstViewCopyLength","secondViewCopy","secondViewCopyLength","max","counter","pvutils.utilConcatView","power2","n","p","digits","newValue","viewSub","LocalIntegerValueBlock","v","pvutils.utilEncodeTC","expectedLength","updatedView","firstBit","bitNumber","currentByte","asn1View","flag","byteNumber","_a$o","Integer","bigIntValue","hex","secondInt","integer","_a$n","Enumerated","LocalSidValueBlock","valueDec","isFirstSid","bytes","sidValue","LocalObjectIdentifierValueBlock","sidBlock","retBuffers","valueBuf","string","pos1","pos2","sid","plus","parsedSID","sidStr","_a$m","ObjectIdentifier","LocalRelativeSidValueBlock","LocalRelativeObjectIdentifierValueBlock","_a$l","RelativeObjectIdentifier","_a$k","Sequence","_a$j","Set","LocalStringValueBlock","LocalSimpleStringValueBlock","LocalSimpleStringBlock","inputString","strLen","LocalUtf8StringValueBlock","ex","_a$i","Utf8String","LocalBmpStringValueBlock","_a$h","BmpString","LocalUniversalStringValueBlock","copyBuffer","valueView","strLength","valueHexView","codeBuf","codeView","_a$g","UniversalString","_a$f","NumericString","_a$e","PrintableString","_a$d","TeletexString","_a$c","VideotexString","_a$b","IA5String","_a$a","GraphicString","_a$9","VisibleString","_a$8","GeneralString","_a$7","CharacterString","_a$6","UTCTime","valueDate","inputDate","parserArray","year","outputArray","pvutils.padNumber","_a$5","GeneralizedTime","isUTC","timeString","dateTimeString","fractionPart","parser","hourDifference","minuteDifference","multiplier","differencePosition","differenceString","fractionPointPosition","fractionPartCheck","fractionResult","tempDate","_a$4","DATE","_a$3","TimeOfDay","_a$2","DateTime","_a$1","Duration","TIME","Any","Choice","Repeated","local","RawData","compareSchema","root","inputData","inputSchema","_result","encodedId","schemaView","admission","maxLength","_optional","arrayRoot","asn1","verifySchema","AsnTypeTypes","AsnPropTypes","AsnAnyConverter","asn1js.Null","schema","asn1js.fromBER","AsnIntegerConverter","asn1js.Integer","AsnEnumeratedConverter","asn1js.Enumerated","AsnBitStringConverter","asn1js.BitString","AsnObjectIdentifierConverter","asn1js.ObjectIdentifier","AsnBooleanConverter","asn1js.Boolean","AsnOctetStringConverter","asn1js.OctetString","createStringConverter","Asn1Type","AsnUtf8StringConverter","asn1js.Utf8String","AsnBmpStringConverter","asn1js.BmpString","AsnUniversalStringConverter","asn1js.UniversalString","AsnNumericStringConverter","asn1js.NumericString","AsnPrintableStringConverter","asn1js.PrintableString","AsnTeletexStringConverter","asn1js.TeletexString","AsnVideotexStringConverter","asn1js.VideotexString","AsnIA5StringConverter","asn1js.IA5String","AsnGraphicStringConverter","asn1js.GraphicString","AsnVisibleStringConverter","asn1js.VisibleString","AsnGeneralStringConverter","asn1js.GeneralString","AsnCharacterStringConverter","asn1js.CharacterString","AsnUTCTimeConverter","asn1js.UTCTime","AsnGeneralizedTimeConverter","asn1js.GeneralizedTime","AsnNullConverter","defaultConverter","isConvertible","target","isTypeOfArray","proto","isArrayEqual","bytes1","bytes2","b1","b2","AsnSchemaStorage","checkSchema","parentSchema","useNames","asn1Value","key","asn1Item","Asn1TypeName","asn1js","asn1js.Any","Container","asn1js.Set","asn1js.Sequence","asn1js.Repeated","asn1js.Constructed","asn1js.Primitive","isRepeated","asn1js.Choice","parent","schemaStorage","AsnType","options","AsnProp","propertyKey","copyOptions","converters.defaultConverter","AsnSchemaValidationError","AsnParser","asn1Parsed","asn1Schema","targetSchema","asn1ComparedSchema","asn1js.compareSchema","itemType","converter","element","asn1SchemaValue","schemaItem","schemaItemType","newItem","newItemAsn","AsnSerializer","obj","asn1js.BaseBlock","objProp","asnSchema","items","AsnConvert","__decorate","decorators","desc","r","d","JsonError","message","innerError","TransformError","ParserError","ValidationError","SerializerError","schemaName","KeyError","keys","errors","JsonPropTypes","checkType","throwIfTypeIsWrong","JsonSchemaStorage","DEFAULT_SCHEMA","PatternValidation","pattern","InclusiveValidation","min","ExclusiveValidation","LengthValidation","minLength","EnumerationValidation","enumeration","JsonTransform","validation","JsonSerializer","replacer","space","json","namedSchema","objItem","el","e","JsonParser","keyErrors","newOptions","jsonProps","schemaProps","getValidations","validations","JsonProp","errorMessage","defaultSchema","schemaNames","CryptoError","AlgorithmError","UnsupportedOperationError","methodName","OperationError","RequiredPropertyError","propName","isJWK","ProviderCrypto","algorithm","extractable","keyUsages","allowedUsages","signature","baseKey","format","keyData","usages","allowed","usage","keyUsage","hashAlgorithms","AesProvider","AesCbcProvider","AesCmacProvider","AesCtrProvider","AesEcbProvider","AesGcmProvider","AesKwProvider","DesProvider","RsaProvider","publicExponent","RsaSsaProvider","RsaPssProvider","RsaOaepProvider","EllipticProvider","namedCurve","EcdsaProvider","KEY_TYPES","CryptoKey","EcdhProvider","EcdhEsProvider","EdDsaProvider","AlgorithmIdentifier","PrivateKeyInfo","PublicKeyInfo","JsonBase64UrlArrayBufferConverter","AsnIntegerArrayBufferConverter","asn1.Integer","RsaPrivateKey","RsaPublicKey","EcPublicKey","x","y","EcPrivateKey","publicKey","jwk","AsnIntegerWithoutPaddingConverter","index$2","EcUtils","pointSize","xb","yb","point","EcDsaSignature","ecSignature","OneAsymmetricKey","EdPrivateKey","EdPublicKey","CurvePrivateKey","idSecp256r1","idEllipticCurve","idSecp384r1","idSecp521r1","idSecp256k1","idVersionOne","idBrainpoolP160r1","idBrainpoolP160t1","idBrainpoolP192r1","idBrainpoolP192t1","idBrainpoolP224r1","idBrainpoolP224t1","idBrainpoolP256r1","idBrainpoolP256t1","idBrainpoolP320r1","idBrainpoolP320t1","idBrainpoolP384r1","idBrainpoolP384t1","idBrainpoolP512r1","idBrainpoolP512t1","idX25519","idX448","idEd25519","idEd448","index$1","EcCurves","oid","raw","nameOrId","HmacProvider","algName","Pbkdf2Provider","HkdfProvider","ShakeProvider","Shake128Provider","Shake256Provider","Crypto","uuid","ProviderStorage","algorithmName","provider","algorithms","SubtleCrypto","preparedAlgorithm","preparedData","preparedSignature","derivedKeyType","preparedDerivedKeyType","derivedBits","wrappingKey","wrapAlgorithm","wrappedKey","unwrappingKey","unwrapAlgorithm","unwrappedKeyAlgorithm","JsonBase64UrlConverter","core.CryptoKey","SymmetricKey","AsymmetricKey","AesCryptoKey","core.AlgorithmError","keyStorage","getCryptoKey","core.OperationError","setCryptoKey","AesCrypto","crypto__default","cipher","decipher","dec","tagLength","tag","core.AesCbcProvider","zero","rb","blockSize","bitShiftLeft","shifted","last","index","xor","output","aes","crypto.createCipheriv","getMessageBlock","blockIndex","block","start","end","getPaddedMessageBlock","generateSubkeys","l","subkey1","subkey2","aesCmac","subkeys","blockCount","lastBlockCompleteFlag","lastBlock","lastBlockIndex","core.AesCmacProvider","signature2","core.AesCtrProvider","core.AesGcmProvider","core.AesKwProvider","core.AesEcbProvider","DesCryptoKey","DesCrypto","DesCbcProvider","core.DesProvider","DesEde3CbcProvider","getJwkAlgorithm","mdSize","keyInfo","core.asn1","RsaCrypto","privateKey","asnKey","alg","cryptoAlg","signer","core.RsaSsaProvider","internalKey","core.RsaPssProvider","ShaCrypto","hashAlg","hash","core.RsaOaepProvider","keySize","hashSize","dataLength","psLength","seed","dataBlock","labelHash","core.BufferSourceConverter","dataBlockMask","seedMask","pkcs0","z","psEnd","psz","mask","chunks","submask","chunk","RsaEsProvider","core.ProviderCrypto","crypto.publicEncrypt","crypto.privateDecrypt","crypto.constants.RSA_PKCS1_PADDING","namedOIDs","getOidByNamedCurve$1","Sha1Provider","Sha256Provider","Sha384Provider","Sha512Provider","Sha3256Provider","Sha3384Provider","Sha3512Provider","EcCrypto","core.EcUtils","core.EcCurves","signaturePoint","ecSignatureRaw","ecdh","asnPrivateKey","asnEcPrivateKey","asnPublicKey","core.CryptoError","namedCurveIdentifier","curve","core.EcdsaProvider","core.EcdhProvider","edOIDs","getOidByNamedCurve","EdCrypto","core.EdDsaProvider","core.EcdhEsProvider","PbkdfCryptoKey","core.Pbkdf2Provider","resolve","reject","salt","err","HmacCryptoKey","core.HmacProvider","hmac","HkdfCryptoKey","core.HkdfProvider","hashLength","byteLength","info","BufferSourceConverter$1","PRK","blocks","ShakeCrypto","core.Shake128Provider","core.Shake256Provider","core.SubtleCrypto","nodeMajorVersion","process.version","hashes","crypto.getHashes","core.Crypto"],"mappings":"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"}