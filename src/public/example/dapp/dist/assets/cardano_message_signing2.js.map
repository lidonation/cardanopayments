{"version":3,"file":"cardano_message_signing2.js","sources":["../../node_modules/lucid-cardano/esm/src/core/wasm_modules/cardano_message_signing_web/cardano_message_signing.js"],"sourcesContent":["let wasm;\nconst heap = new Array(32).fill(undefined);\nheap.push(undefined, null, true, false);\nfunction getObject(idx) {\n    return heap[idx];\n}\nlet heap_next = heap.length;\nfunction dropObject(idx) {\n    if (idx < 36)\n        return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\nlet cachedTextDecoder = new TextDecoder(\"utf-8\", {\n    ignoreBOM: true,\n    fatal: true,\n});\ncachedTextDecoder.decode();\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null ||\n        cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length)\n        heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n    heap[idx] = obj;\n    return idx;\n}\nfunction debugString(val) {\n    // primitive types\n    const type = typeof val;\n    if (type == \"number\" || type == \"boolean\" || val == null) {\n        return `${val}`;\n    }\n    if (type == \"string\") {\n        return `\"${val}\"`;\n    }\n    if (type == \"symbol\") {\n        const description = val.description;\n        if (description == null) {\n            return \"Symbol\";\n        }\n        else {\n            return `Symbol(${description})`;\n        }\n    }\n    if (type == \"function\") {\n        const name = val.name;\n        if (typeof name == \"string\" && name.length > 0) {\n            return `Function(${name})`;\n        }\n        else {\n            return \"Function\";\n        }\n    }\n    // objects\n    if (Array.isArray(val)) {\n        const length = val.length;\n        let debug = \"[\";\n        if (length > 0) {\n            debug += debugString(val[0]);\n        }\n        for (let i = 1; i < length; i++) {\n            debug += \", \" + debugString(val[i]);\n        }\n        debug += \"]\";\n        return debug;\n    }\n    // Test for built-in\n    const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n    let className;\n    if (builtInMatches.length > 1) {\n        className = builtInMatches[1];\n    }\n    else {\n        // Failed to match the standard '[object ClassName]'\n        return toString.call(val);\n    }\n    if (className == \"Object\") {\n        // we're a user defined class or Object\n        // JSON.stringify avoids problems with cycles, and is generally much\n        // easier than looping through ownProperties of `val`.\n        try {\n            return \"Object(\" + JSON.stringify(val) + \")\";\n        }\n        catch (_) {\n            return \"Object\";\n        }\n    }\n    // errors\n    if (val instanceof Error) {\n        return `${val.name}: ${val.message}\\n${val.stack}`;\n    }\n    // TODO we could test for more things here, like `Set`s and `Map`s.\n    return className;\n}\nlet WASM_VECTOR_LEN = 0;\nlet cachedTextEncoder = new TextEncoder(\"utf-8\");\nconst encodeString = (typeof cachedTextEncoder.encodeInto === \"function\"\n    ? function (arg, view) {\n        return cachedTextEncoder.encodeInto(arg, view);\n    }\n    : function (arg, view) {\n        const buf = cachedTextEncoder.encode(arg);\n        view.set(buf);\n        return {\n            read: arg.length,\n            written: buf.length,\n        };\n    });\nfunction passStringToWasm0(arg, malloc, realloc) {\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n    let len = arg.length;\n    let ptr = malloc(len);\n    const mem = getUint8Memory0();\n    let offset = 0;\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F)\n            break;\n        mem[ptr + offset] = code;\n    }\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n        offset += ret.written;\n    }\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\nlet cachegetInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachegetInt32Memory0 === null ||\n        cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory0;\n}\nfunction getArrayU8FromWasm0(ptr, len) {\n    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1);\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n    return instance.ptr;\n}\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\nlet cachegetFloat64Memory0 = null;\nfunction getFloat64Memory0() {\n    if (cachegetFloat64Memory0 === null ||\n        cachegetFloat64Memory0.buffer !== wasm.memory.buffer) {\n        cachegetFloat64Memory0 = new Float64Array(wasm.memory.buffer);\n    }\n    return cachegetFloat64Memory0;\n}\n/** */\nexport const LabelKind = Object.freeze({\n    Int: 0,\n    \"0\": \"Int\",\n    Text: 1,\n    \"1\": \"Text\",\n});\n/** */\nexport const SignedMessageKind = Object.freeze({\n    COSESIGN: 0,\n    \"0\": \"COSESIGN\",\n    COSESIGN1: 1,\n    \"1\": \"COSESIGN1\",\n});\n/** */\nexport const SigContext = Object.freeze({\n    Signature: 0,\n    \"0\": \"Signature\",\n    Signature1: 1,\n    \"1\": \"Signature1\",\n    CounterSignature: 2,\n    \"2\": \"CounterSignature\",\n});\n/** */\nexport const CBORSpecialType = Object.freeze({\n    Bool: 0,\n    \"0\": \"Bool\",\n    Float: 1,\n    \"1\": \"Float\",\n    Unassigned: 2,\n    \"2\": \"Unassigned\",\n    Break: 3,\n    \"3\": \"Break\",\n    Undefined: 4,\n    \"4\": \"Undefined\",\n    Null: 5,\n    \"5\": \"Null\",\n});\n/** */\nexport const CBORValueKind = Object.freeze({\n    Int: 0,\n    \"0\": \"Int\",\n    Bytes: 1,\n    \"1\": \"Bytes\",\n    Text: 2,\n    \"2\": \"Text\",\n    Array: 3,\n    \"3\": \"Array\",\n    Object: 4,\n    \"4\": \"Object\",\n    TaggedCBOR: 5,\n    \"5\": \"TaggedCBOR\",\n    Special: 6,\n    \"6\": \"Special\",\n});\n/** */\nexport const AlgorithmId = Object.freeze({\n    /**\n     * r\" EdDSA (Pure EdDSA, not HashedEdDSA) - the algorithm used for Cardano addresses\n     */\n    EdDSA: 0,\n    \"0\": \"EdDSA\",\n    /**\n     * r\" ChaCha20/Poly1305 w/ 256-bit key, 128-bit tag\n     */\n    ChaCha20Poly1305: 1,\n    \"1\": \"ChaCha20Poly1305\",\n});\n/** */\nexport const KeyType = Object.freeze({\n    /**\n     * r\" octet key pair\n     */\n    OKP: 0,\n    \"0\": \"OKP\",\n    /**\n     * r\" 2-coord EC\n     */\n    EC2: 1,\n    \"1\": \"EC2\",\n    Symmetric: 2,\n    \"2\": \"Symmetric\",\n});\n/** */\nexport const ECKey = Object.freeze({\n    CRV: 0,\n    \"0\": \"CRV\",\n    X: 1,\n    \"1\": \"X\",\n    Y: 2,\n    \"2\": \"Y\",\n    D: 3,\n    \"3\": \"D\",\n});\n/** */\nexport const CurveType = Object.freeze({\n    P256: 0,\n    \"0\": \"P256\",\n    P384: 1,\n    \"1\": \"P384\",\n    P521: 2,\n    \"2\": \"P521\",\n    X25519: 3,\n    \"3\": \"X25519\",\n    X448: 4,\n    \"4\": \"X448\",\n    Ed25519: 5,\n    \"5\": \"Ed25519\",\n    Ed448: 6,\n    \"6\": \"Ed448\",\n});\n/** */\nexport const KeyOperation = Object.freeze({\n    Sign: 0,\n    \"0\": \"Sign\",\n    Verify: 1,\n    \"1\": \"Verify\",\n    Encrypt: 2,\n    \"2\": \"Encrypt\",\n    Decrypt: 3,\n    \"3\": \"Decrypt\",\n    WrapKey: 4,\n    \"4\": \"WrapKey\",\n    UnwrapKey: 5,\n    \"5\": \"UnwrapKey\",\n    DeriveKey: 6,\n    \"6\": \"DeriveKey\",\n    DeriveBits: 7,\n    \"7\": \"DeriveBits\",\n});\n/** */\nexport class BigNum {\n    static __wrap(ptr) {\n        const obj = Object.create(BigNum.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_bignum_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bignum_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {BigNum}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.bignum_from_bytes(ptr0, len0);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @param {string} string\n     * @returns {BigNum}\n     */\n    static from_str(string) {\n        var ptr0 = passStringToWasm0(string, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.bignum_from_str(ptr0, len0);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_str() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bignum_to_str(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {BigNum} other\n     * @returns {BigNum}\n     */\n    checked_mul(other) {\n        _assertClass(other, BigNum);\n        var ret = wasm.bignum_checked_mul(this.ptr, other.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} other\n     * @returns {BigNum}\n     */\n    checked_add(other) {\n        _assertClass(other, BigNum);\n        var ret = wasm.bignum_checked_add(this.ptr, other.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} other\n     * @returns {BigNum}\n     */\n    checked_sub(other) {\n        _assertClass(other, BigNum);\n        var ret = wasm.bignum_checked_sub(this.ptr, other.ptr);\n        return BigNum.__wrap(ret);\n    }\n}\n/** */\nexport class CBORArray {\n    static __wrap(ptr) {\n        const obj = Object.create(CBORArray.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cborarray_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cborarray_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {CBORArray}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cborarray_from_bytes(ptr0, len0);\n        return CBORArray.__wrap(ret);\n    }\n    /**\n     * @returns {CBORArray}\n     */\n    static new() {\n        var ret = wasm.cborarray_new();\n        return CBORArray.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.cborarray_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {CBORValue}\n     */\n    get(index) {\n        var ret = wasm.cborarray_get(this.ptr, index);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n     * @param {CBORValue} elem\n     */\n    add(elem) {\n        _assertClass(elem, CBORValue);\n        wasm.cborarray_add(this.ptr, elem.ptr);\n    }\n    /**\n     * @param {boolean} use_definite\n     */\n    set_definite_encoding(use_definite) {\n        wasm.cborarray_set_definite_encoding(this.ptr, use_definite);\n    }\n    /**\n     * @returns {boolean}\n     */\n    is_definite() {\n        var ret = wasm.cborarray_is_definite(this.ptr);\n        return ret !== 0;\n    }\n}\n/** */\nexport class CBORObject {\n    static __wrap(ptr) {\n        const obj = Object.create(CBORObject.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cborobject_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cborobject_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {CBORObject}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cborobject_from_bytes(ptr0, len0);\n        return CBORObject.__wrap(ret);\n    }\n    /**\n     * @returns {CBORObject}\n     */\n    static new() {\n        var ret = wasm.cborobject_new();\n        return CBORObject.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.cborobject_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {CBORValue} key\n     * @param {CBORValue} value\n     * @returns {CBORValue | undefined}\n     */\n    insert(key, value) {\n        _assertClass(key, CBORValue);\n        _assertClass(value, CBORValue);\n        var ret = wasm.cborobject_insert(this.ptr, key.ptr, value.ptr);\n        return ret === 0 ? undefined : CBORValue.__wrap(ret);\n    }\n    /**\n     * @param {CBORValue} key\n     * @returns {CBORValue | undefined}\n     */\n    get(key) {\n        _assertClass(key, CBORValue);\n        var ret = wasm.cborobject_get(this.ptr, key.ptr);\n        return ret === 0 ? undefined : CBORValue.__wrap(ret);\n    }\n    /**\n     * @returns {CBORArray}\n     */\n    keys() {\n        var ret = wasm.cborobject_keys(this.ptr);\n        return CBORArray.__wrap(ret);\n    }\n    /**\n     * @param {boolean} use_definite\n     */\n    set_definite_encoding(use_definite) {\n        wasm.cborobject_set_definite_encoding(this.ptr, use_definite);\n    }\n    /**\n     * @returns {boolean}\n     */\n    is_definite() {\n        var ret = wasm.cborobject_is_definite(this.ptr);\n        return ret !== 0;\n    }\n}\n/** */\nexport class CBORSpecial {\n    static __wrap(ptr) {\n        const obj = Object.create(CBORSpecial.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cborspecial_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cborspecial_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {CBORSpecial}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cborspecial_from_bytes(ptr0, len0);\n        return CBORSpecial.__wrap(ret);\n    }\n    /**\n     * @param {boolean} b\n     * @returns {CBORSpecial}\n     */\n    static new_bool(b) {\n        var ret = wasm.cborspecial_new_bool(b);\n        return CBORSpecial.__wrap(ret);\n    }\n    /**\n     * @param {number} u\n     * @returns {CBORSpecial}\n     */\n    static new_unassigned(u) {\n        var ret = wasm.cborspecial_new_unassigned(u);\n        return CBORSpecial.__wrap(ret);\n    }\n    /**\n     * @returns {CBORSpecial}\n     */\n    static new_break() {\n        var ret = wasm.cborspecial_new_break();\n        return CBORSpecial.__wrap(ret);\n    }\n    /**\n     * @returns {CBORSpecial}\n     */\n    static new_null() {\n        var ret = wasm.cborspecial_new_null();\n        return CBORSpecial.__wrap(ret);\n    }\n    /**\n     * @returns {CBORSpecial}\n     */\n    static new_undefined() {\n        var ret = wasm.cborspecial_new_undefined();\n        return CBORSpecial.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    kind() {\n        var ret = wasm.cborspecial_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {boolean | undefined}\n     */\n    as_bool() {\n        var ret = wasm.cborspecial_as_bool(this.ptr);\n        return ret === 0xFFFFFF ? undefined : ret !== 0;\n    }\n    /**\n     * @returns {number | undefined}\n     */\n    as_float() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cborspecial_as_float(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getFloat64Memory0()[retptr / 8 + 1];\n            return r0 === 0 ? undefined : r1;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {number | undefined}\n     */\n    as_unassigned() {\n        var ret = wasm.cborspecial_as_unassigned(this.ptr);\n        return ret === 0xFFFFFF ? undefined : ret;\n    }\n}\n/** */\nexport class CBORValue {\n    static __wrap(ptr) {\n        const obj = Object.create(CBORValue.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cborvalue_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cborvalue_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {CBORValue}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cborvalue_from_bytes(ptr0, len0);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n     * @param {Int} int\n     * @returns {CBORValue}\n     */\n    static new_int(int) {\n        _assertClass(int, Int);\n        var ret = wasm.cborvalue_new_int(int.ptr);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {CBORValue}\n     */\n    static new_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cborvalue_new_bytes(ptr0, len0);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n     * @param {string} text\n     * @returns {CBORValue}\n     */\n    static new_text(text) {\n        var ptr0 = passStringToWasm0(text, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cborvalue_new_text(ptr0, len0);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n     * @param {CBORArray} arr\n     * @returns {CBORValue}\n     */\n    static new_array(arr) {\n        _assertClass(arr, CBORArray);\n        var ret = wasm.cborvalue_new_array(arr.ptr);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n     * @param {CBORObject} obj\n     * @returns {CBORValue}\n     */\n    static new_object(obj) {\n        _assertClass(obj, CBORObject);\n        var ret = wasm.cborvalue_new_object(obj.ptr);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n     * @param {TaggedCBOR} tagged\n     * @returns {CBORValue}\n     */\n    static new_tagged(tagged) {\n        _assertClass(tagged, TaggedCBOR);\n        var ret = wasm.cborvalue_new_tagged(tagged.ptr);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n     * @param {CBORSpecial} special\n     * @returns {CBORValue}\n     */\n    static new_special(special) {\n        _assertClass(special, CBORSpecial);\n        var ret = wasm.cborvalue_new_special(special.ptr);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n     * @param {Label} label\n     * @returns {CBORValue}\n     */\n    static from_label(label) {\n        _assertClass(label, Label);\n        var ret = wasm.cborvalue_from_label(label.ptr);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    kind() {\n        var ret = wasm.cborvalue_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {Int | undefined}\n     */\n    as_int() {\n        var ret = wasm.cborvalue_as_int(this.ptr);\n        return ret === 0 ? undefined : Int.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    as_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cborvalue_as_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string | undefined}\n     */\n    as_text() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cborvalue_as_text(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {CBORArray | undefined}\n     */\n    as_array() {\n        var ret = wasm.cborvalue_as_array(this.ptr);\n        return ret === 0 ? undefined : CBORArray.__wrap(ret);\n    }\n    /**\n     * @returns {CBORObject | undefined}\n     */\n    as_object() {\n        var ret = wasm.cborvalue_as_object(this.ptr);\n        return ret === 0 ? undefined : CBORObject.__wrap(ret);\n    }\n    /**\n     * @returns {TaggedCBOR | undefined}\n     */\n    as_tagged() {\n        var ret = wasm.cborvalue_as_tagged(this.ptr);\n        return ret === 0 ? undefined : TaggedCBOR.__wrap(ret);\n    }\n    /**\n     * @returns {CBORSpecial | undefined}\n     */\n    as_special() {\n        var ret = wasm.cborvalue_as_special(this.ptr);\n        return ret === 0 ? undefined : CBORSpecial.__wrap(ret);\n    }\n}\n/** */\nexport class COSEEncrypt {\n    static __wrap(ptr) {\n        const obj = Object.create(COSEEncrypt.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_coseencrypt_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coseencrypt_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {COSEEncrypt}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.coseencrypt_from_bytes(ptr0, len0);\n        return COSEEncrypt.__wrap(ret);\n    }\n    /**\n     * @returns {Headers}\n     */\n    headers() {\n        var ret = wasm.coseencrypt0_headers(this.ptr);\n        return Headers.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    ciphertext() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coseencrypt0_ciphertext(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {COSERecipients}\n     */\n    recipients() {\n        var ret = wasm.coseencrypt_recipients(this.ptr);\n        return COSERecipients.__wrap(ret);\n    }\n    /**\n     * @param {Headers} headers\n     * @param {Uint8Array | undefined} ciphertext\n     * @param {COSERecipients} recipients\n     * @returns {COSEEncrypt}\n     */\n    static new(headers, ciphertext, recipients) {\n        _assertClass(headers, Headers);\n        var ptr0 = isLikeNone(ciphertext)\n            ? 0\n            : passArray8ToWasm0(ciphertext, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        _assertClass(recipients, COSERecipients);\n        var ret = wasm.coseencrypt_new(headers.ptr, ptr0, len0, recipients.ptr);\n        return COSEEncrypt.__wrap(ret);\n    }\n}\n/** */\nexport class COSEEncrypt0 {\n    static __wrap(ptr) {\n        const obj = Object.create(COSEEncrypt0.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_coseencrypt0_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coseencrypt0_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {COSEEncrypt0}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.coseencrypt0_from_bytes(ptr0, len0);\n        return COSEEncrypt0.__wrap(ret);\n    }\n    /**\n     * @returns {Headers}\n     */\n    headers() {\n        var ret = wasm.coseencrypt0_headers(this.ptr);\n        return Headers.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    ciphertext() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coseencrypt0_ciphertext(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Headers} headers\n     * @param {Uint8Array | undefined} ciphertext\n     * @returns {COSEEncrypt0}\n     */\n    static new(headers, ciphertext) {\n        _assertClass(headers, Headers);\n        var ptr0 = isLikeNone(ciphertext)\n            ? 0\n            : passArray8ToWasm0(ciphertext, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.coseencrypt0_new(headers.ptr, ptr0, len0);\n        return COSEEncrypt0.__wrap(ret);\n    }\n}\n/** */\nexport class COSEKey {\n    static __wrap(ptr) {\n        const obj = Object.create(COSEKey.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cosekey_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosekey_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {COSEKey}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cosekey_from_bytes(ptr0, len0);\n        return COSEKey.__wrap(ret);\n    }\n    /**\n     * @param {Label} key_type\n     */\n    set_key_type(key_type) {\n        _assertClass(key_type, Label);\n        wasm.cosekey_set_key_type(this.ptr, key_type.ptr);\n    }\n    /**\n     * @returns {Label}\n     */\n    key_type() {\n        var ret = wasm.cosekey_key_type(this.ptr);\n        return Label.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} key_id\n     */\n    set_key_id(key_id) {\n        var ptr0 = passArray8ToWasm0(key_id, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.cosekey_set_key_id(this.ptr, ptr0, len0);\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    key_id() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosekey_key_id(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Label} algorithm_id\n     */\n    set_algorithm_id(algorithm_id) {\n        _assertClass(algorithm_id, Label);\n        wasm.cosekey_set_algorithm_id(this.ptr, algorithm_id.ptr);\n    }\n    /**\n     * @returns {Label | undefined}\n     */\n    algorithm_id() {\n        var ret = wasm.cosekey_algorithm_id(this.ptr);\n        return ret === 0 ? undefined : Label.__wrap(ret);\n    }\n    /**\n     * @param {Labels} key_ops\n     */\n    set_key_ops(key_ops) {\n        _assertClass(key_ops, Labels);\n        wasm.cosekey_set_key_ops(this.ptr, key_ops.ptr);\n    }\n    /**\n     * @returns {Labels | undefined}\n     */\n    key_ops() {\n        var ret = wasm.cosekey_key_ops(this.ptr);\n        return ret === 0 ? undefined : Labels.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} base_init_vector\n     */\n    set_base_init_vector(base_init_vector) {\n        var ptr0 = passArray8ToWasm0(base_init_vector, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.cosekey_set_base_init_vector(this.ptr, ptr0, len0);\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    base_init_vector() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosekey_base_init_vector(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Label} label\n     * @returns {CBORValue | undefined}\n     */\n    header(label) {\n        _assertClass(label, Label);\n        var ret = wasm.cosekey_header(this.ptr, label.ptr);\n        return ret === 0 ? undefined : CBORValue.__wrap(ret);\n    }\n    /**\n     * @param {Label} label\n     * @param {CBORValue} value\n     */\n    set_header(label, value) {\n        _assertClass(label, Label);\n        _assertClass(value, CBORValue);\n        wasm.cosekey_set_header(this.ptr, label.ptr, value.ptr);\n    }\n    /**\n     * @param {Label} key_type\n     * @returns {COSEKey}\n     */\n    static new(key_type) {\n        _assertClass(key_type, Label);\n        var ret = wasm.cosekey_new(key_type.ptr);\n        return COSEKey.__wrap(ret);\n    }\n}\n/** */\nexport class COSERecipient {\n    static __wrap(ptr) {\n        const obj = Object.create(COSERecipient.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_coserecipient_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coserecipient_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {COSERecipient}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.coserecipient_from_bytes(ptr0, len0);\n        return COSERecipient.__wrap(ret);\n    }\n    /**\n     * @returns {Headers}\n     */\n    headers() {\n        var ret = wasm.coseencrypt0_headers(this.ptr);\n        return Headers.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    ciphertext() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coseencrypt0_ciphertext(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Headers} headers\n     * @param {Uint8Array | undefined} ciphertext\n     * @returns {COSERecipient}\n     */\n    static new(headers, ciphertext) {\n        _assertClass(headers, Headers);\n        var ptr0 = isLikeNone(ciphertext)\n            ? 0\n            : passArray8ToWasm0(ciphertext, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.coseencrypt0_new(headers.ptr, ptr0, len0);\n        return COSERecipient.__wrap(ret);\n    }\n}\n/** */\nexport class COSERecipients {\n    static __wrap(ptr) {\n        const obj = Object.create(COSERecipients.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_coserecipients_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coserecipients_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {COSERecipients}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.coserecipients_from_bytes(ptr0, len0);\n        return COSERecipients.__wrap(ret);\n    }\n    /**\n     * @returns {COSERecipients}\n     */\n    static new() {\n        var ret = wasm.coserecipients_new();\n        return COSERecipients.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.coserecipients_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {COSERecipient}\n     */\n    get(index) {\n        var ret = wasm.coserecipients_get(this.ptr, index);\n        return COSERecipient.__wrap(ret);\n    }\n    /**\n     * @param {COSERecipient} elem\n     */\n    add(elem) {\n        _assertClass(elem, COSERecipient);\n        wasm.coserecipients_add(this.ptr, elem.ptr);\n    }\n}\n/** */\nexport class COSESign {\n    static __wrap(ptr) {\n        const obj = Object.create(COSESign.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cosesign_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosesign_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {COSESign}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cosesign_from_bytes(ptr0, len0);\n        return COSESign.__wrap(ret);\n    }\n    /**\n     * @returns {Headers}\n     */\n    headers() {\n        var ret = wasm.coseencrypt0_headers(this.ptr);\n        return Headers.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    payload() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coseencrypt0_ciphertext(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {COSESignatures}\n     */\n    signatures() {\n        var ret = wasm.cosesign_signatures(this.ptr);\n        return COSESignatures.__wrap(ret);\n    }\n    /**\n     * @param {Headers} headers\n     * @param {Uint8Array | undefined} payload\n     * @param {COSESignatures} signatures\n     * @returns {COSESign}\n     */\n    static new(headers, payload, signatures) {\n        _assertClass(headers, Headers);\n        var ptr0 = isLikeNone(payload)\n            ? 0\n            : passArray8ToWasm0(payload, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        _assertClass(signatures, COSESignatures);\n        var ret = wasm.cosesign_new(headers.ptr, ptr0, len0, signatures.ptr);\n        return COSESign.__wrap(ret);\n    }\n}\n/** */\nexport class COSESign1 {\n    static __wrap(ptr) {\n        const obj = Object.create(COSESign1.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cosesign1_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosesign1_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {COSESign1}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cosesign1_from_bytes(ptr0, len0);\n        return COSESign1.__wrap(ret);\n    }\n    /**\n     * @returns {Headers}\n     */\n    headers() {\n        var ret = wasm.coseencrypt0_headers(this.ptr);\n        return Headers.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    payload() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.coseencrypt0_ciphertext(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    signature() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosesign1_signature(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * For verifying, we will want to reverse-construct this SigStructure to check the signature against\n     * # Arguments\n     * * `external_aad` - External application data - see RFC 8152 section 4.3. Set to None if not using this.\n     * @param {Uint8Array | undefined} external_aad\n     * @param {Uint8Array | undefined} external_payload\n     * @returns {SigStructure}\n     */\n    signed_data(external_aad, external_payload) {\n        var ptr0 = isLikeNone(external_aad)\n            ? 0\n            : passArray8ToWasm0(external_aad, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = isLikeNone(external_payload)\n            ? 0\n            : passArray8ToWasm0(external_payload, wasm.__wbindgen_malloc);\n        var len1 = WASM_VECTOR_LEN;\n        var ret = wasm.cosesign1_signed_data(this.ptr, ptr0, len0, ptr1, len1);\n        return SigStructure.__wrap(ret);\n    }\n    /**\n     * @param {Headers} headers\n     * @param {Uint8Array | undefined} payload\n     * @param {Uint8Array} signature\n     * @returns {COSESign1}\n     */\n    static new(headers, payload, signature) {\n        _assertClass(headers, Headers);\n        var ptr0 = isLikeNone(payload)\n            ? 0\n            : passArray8ToWasm0(payload, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = passArray8ToWasm0(signature, wasm.__wbindgen_malloc);\n        var len1 = WASM_VECTOR_LEN;\n        var ret = wasm.cosesign1_new(headers.ptr, ptr0, len0, ptr1, len1);\n        return COSESign1.__wrap(ret);\n    }\n}\n/** */\nexport class COSESign1Builder {\n    static __wrap(ptr) {\n        const obj = Object.create(COSESign1Builder.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cosesign1builder_free(ptr);\n    }\n    /**\n     * @param {Headers} headers\n     * @param {Uint8Array} payload\n     * @param {boolean} is_payload_external\n     * @returns {COSESign1Builder}\n     */\n    static new(headers, payload, is_payload_external) {\n        _assertClass(headers, Headers);\n        var ptr0 = passArray8ToWasm0(payload, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cosesign1builder_new(headers.ptr, ptr0, len0, is_payload_external);\n        return COSESign1Builder.__wrap(ret);\n    }\n    /** */\n    hash_payload() {\n        wasm.cosesign1builder_hash_payload(this.ptr);\n    }\n    /**\n     * @param {Uint8Array} external_aad\n     */\n    set_external_aad(external_aad) {\n        var ptr0 = passArray8ToWasm0(external_aad, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.cosesign1builder_set_external_aad(this.ptr, ptr0, len0);\n    }\n    /**\n     * @returns {SigStructure}\n     */\n    make_data_to_sign() {\n        var ret = wasm.cosesign1builder_make_data_to_sign(this.ptr);\n        return SigStructure.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} signed_sig_structure\n     * @returns {COSESign1}\n     */\n    build(signed_sig_structure) {\n        var ptr0 = passArray8ToWasm0(signed_sig_structure, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cosesign1builder_build(this.ptr, ptr0, len0);\n        return COSESign1.__wrap(ret);\n    }\n}\n/** */\nexport class COSESignBuilder {\n    static __wrap(ptr) {\n        const obj = Object.create(COSESignBuilder.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cosesignbuilder_free(ptr);\n    }\n    /**\n     * @param {Headers} headers\n     * @param {Uint8Array} payload\n     * @param {boolean} is_payload_external\n     * @returns {COSESignBuilder}\n     */\n    static new(headers, payload, is_payload_external) {\n        _assertClass(headers, Headers);\n        var ptr0 = passArray8ToWasm0(payload, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cosesignbuilder_new(headers.ptr, ptr0, len0, is_payload_external);\n        return COSESignBuilder.__wrap(ret);\n    }\n    /** */\n    hash_payload() {\n        wasm.cosesign1builder_hash_payload(this.ptr);\n    }\n    /**\n     * @param {Uint8Array} external_aad\n     */\n    set_external_aad(external_aad) {\n        var ptr0 = passArray8ToWasm0(external_aad, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.cosesign1builder_set_external_aad(this.ptr, ptr0, len0);\n    }\n    /**\n     * @returns {SigStructure}\n     */\n    make_data_to_sign() {\n        var ret = wasm.cosesignbuilder_make_data_to_sign(this.ptr);\n        return SigStructure.__wrap(ret);\n    }\n    /**\n     * @param {COSESignatures} signed_sig_structure\n     * @returns {COSESign}\n     */\n    build(signed_sig_structure) {\n        _assertClass(signed_sig_structure, COSESignatures);\n        var ret = wasm.cosesignbuilder_build(this.ptr, signed_sig_structure.ptr);\n        return COSESign.__wrap(ret);\n    }\n}\n/** */\nexport class COSESignature {\n    static __wrap(ptr) {\n        const obj = Object.create(COSESignature.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cosesignature_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosesignature_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {COSESignature}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cosesignature_from_bytes(ptr0, len0);\n        return COSESignature.__wrap(ret);\n    }\n    /**\n     * @returns {Headers}\n     */\n    headers() {\n        var ret = wasm.coseencrypt0_headers(this.ptr);\n        return Headers.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    signature() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosesignature_signature(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Headers} headers\n     * @param {Uint8Array} signature\n     * @returns {COSESignature}\n     */\n    static new(headers, signature) {\n        _assertClass(headers, Headers);\n        var ptr0 = passArray8ToWasm0(signature, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cosesignature_new(headers.ptr, ptr0, len0);\n        return COSESignature.__wrap(ret);\n    }\n}\n/** */\nexport class COSESignatures {\n    static __wrap(ptr) {\n        const obj = Object.create(COSESignatures.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cosesignatures_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosesignatures_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {COSESignatures}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.cosesignatures_from_bytes(ptr0, len0);\n        return COSESignatures.__wrap(ret);\n    }\n    /**\n     * @returns {COSESignatures}\n     */\n    static new() {\n        var ret = wasm.coserecipients_new();\n        return COSESignatures.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.coserecipients_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {COSESignature}\n     */\n    get(index) {\n        var ret = wasm.cosesignatures_get(this.ptr, index);\n        return COSESignature.__wrap(ret);\n    }\n    /**\n     * @param {COSESignature} elem\n     */\n    add(elem) {\n        _assertClass(elem, COSESignature);\n        wasm.cosesignatures_add(this.ptr, elem.ptr);\n    }\n}\n/** */\nexport class CounterSignature {\n    static __wrap(ptr) {\n        const obj = Object.create(CounterSignature.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_countersignature_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.countersignature_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {CounterSignature}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.countersignature_from_bytes(ptr0, len0);\n        return CounterSignature.__wrap(ret);\n    }\n    /**\n     * @param {COSESignature} cose_signature\n     * @returns {CounterSignature}\n     */\n    static new_single(cose_signature) {\n        _assertClass(cose_signature, COSESignature);\n        var ret = wasm.countersignature_new_single(cose_signature.ptr);\n        return CounterSignature.__wrap(ret);\n    }\n    /**\n     * @param {COSESignatures} cose_signatures\n     * @returns {CounterSignature}\n     */\n    static new_multi(cose_signatures) {\n        _assertClass(cose_signatures, COSESignatures);\n        var ret = wasm.countersignature_new_multi(cose_signatures.ptr);\n        return CounterSignature.__wrap(ret);\n    }\n    /**\n     * @returns {COSESignatures}\n     */\n    signatures() {\n        var ret = wasm.countersignature_signatures(this.ptr);\n        return COSESignatures.__wrap(ret);\n    }\n}\n/** */\nexport class EdDSA25519Key {\n    static __wrap(ptr) {\n        const obj = Object.create(EdDSA25519Key.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_eddsa25519key_free(ptr);\n    }\n    /**\n     * @param {Uint8Array} pubkey_bytes\n     * @returns {EdDSA25519Key}\n     */\n    static new(pubkey_bytes) {\n        var ptr0 = passArray8ToWasm0(pubkey_bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.eddsa25519key_new(ptr0, len0);\n        return EdDSA25519Key.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} private_key_bytes\n     */\n    set_private_key(private_key_bytes) {\n        var ptr0 = passArray8ToWasm0(private_key_bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.eddsa25519key_set_private_key(this.ptr, ptr0, len0);\n    }\n    /** */\n    is_for_signing() {\n        wasm.eddsa25519key_is_for_signing(this.ptr);\n    }\n    /** */\n    is_for_verifying() {\n        wasm.eddsa25519key_is_for_verifying(this.ptr);\n    }\n    /**\n     * @returns {COSEKey}\n     */\n    build() {\n        var ret = wasm.eddsa25519key_build(this.ptr);\n        return COSEKey.__wrap(ret);\n    }\n}\n/** */\nexport class HeaderMap {\n    static __wrap(ptr) {\n        const obj = Object.create(HeaderMap.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_headermap_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.headermap_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {HeaderMap}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.headermap_from_bytes(ptr0, len0);\n        return HeaderMap.__wrap(ret);\n    }\n    /**\n     * @param {Label} algorithm_id\n     */\n    set_algorithm_id(algorithm_id) {\n        _assertClass(algorithm_id, Label);\n        wasm.headermap_set_algorithm_id(this.ptr, algorithm_id.ptr);\n    }\n    /**\n     * @returns {Label | undefined}\n     */\n    algorithm_id() {\n        var ret = wasm.headermap_algorithm_id(this.ptr);\n        return ret === 0 ? undefined : Label.__wrap(ret);\n    }\n    /**\n     * @param {Labels} criticality\n     */\n    set_criticality(criticality) {\n        _assertClass(criticality, Labels);\n        wasm.headermap_set_criticality(this.ptr, criticality.ptr);\n    }\n    /**\n     * @returns {Labels | undefined}\n     */\n    criticality() {\n        var ret = wasm.headermap_criticality(this.ptr);\n        return ret === 0 ? undefined : Labels.__wrap(ret);\n    }\n    /**\n     * @param {Label} content_type\n     */\n    set_content_type(content_type) {\n        _assertClass(content_type, Label);\n        wasm.cosekey_set_algorithm_id(this.ptr, content_type.ptr);\n    }\n    /**\n     * @returns {Label | undefined}\n     */\n    content_type() {\n        var ret = wasm.cosekey_algorithm_id(this.ptr);\n        return ret === 0 ? undefined : Label.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} key_id\n     */\n    set_key_id(key_id) {\n        var ptr0 = passArray8ToWasm0(key_id, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.headermap_set_key_id(this.ptr, ptr0, len0);\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    key_id() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.headermap_key_id(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} init_vector\n     */\n    set_init_vector(init_vector) {\n        var ptr0 = passArray8ToWasm0(init_vector, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.cosekey_set_base_init_vector(this.ptr, ptr0, len0);\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    init_vector() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.cosekey_base_init_vector(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} partial_init_vector\n     */\n    set_partial_init_vector(partial_init_vector) {\n        var ptr0 = passArray8ToWasm0(partial_init_vector, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.headermap_set_partial_init_vector(this.ptr, ptr0, len0);\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    partial_init_vector() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.headermap_partial_init_vector(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {CounterSignature} counter_signature\n     */\n    set_counter_signature(counter_signature) {\n        _assertClass(counter_signature, CounterSignature);\n        wasm.headermap_set_counter_signature(this.ptr, counter_signature.ptr);\n    }\n    /**\n     * @returns {CounterSignature | undefined}\n     */\n    counter_signature() {\n        var ret = wasm.headermap_counter_signature(this.ptr);\n        return ret === 0 ? undefined : CounterSignature.__wrap(ret);\n    }\n    /**\n     * @param {Label} label\n     * @returns {CBORValue | undefined}\n     */\n    header(label) {\n        _assertClass(label, Label);\n        var ret = wasm.headermap_header(this.ptr, label.ptr);\n        return ret === 0 ? undefined : CBORValue.__wrap(ret);\n    }\n    /**\n     * @param {Label} label\n     * @param {CBORValue} value\n     */\n    set_header(label, value) {\n        _assertClass(label, Label);\n        _assertClass(value, CBORValue);\n        wasm.headermap_set_header(this.ptr, label.ptr, value.ptr);\n    }\n    /**\n     * @returns {Labels}\n     */\n    keys() {\n        var ret = wasm.headermap_keys(this.ptr);\n        return Labels.__wrap(ret);\n    }\n    /**\n     * @returns {HeaderMap}\n     */\n    static new() {\n        var ret = wasm.headermap_new();\n        return HeaderMap.__wrap(ret);\n    }\n}\n/** */\nexport class Headers {\n    static __wrap(ptr) {\n        const obj = Object.create(Headers.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_headers_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.headers_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Headers}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.headers_from_bytes(ptr0, len0);\n        return Headers.__wrap(ret);\n    }\n    /**\n     * @returns {ProtectedHeaderMap}\n     */\n    protected() {\n        var ret = wasm.headers_protected(this.ptr);\n        return ProtectedHeaderMap.__wrap(ret);\n    }\n    /**\n     * @returns {HeaderMap}\n     */\n    unprotected() {\n        var ret = wasm.headers_unprotected(this.ptr);\n        return HeaderMap.__wrap(ret);\n    }\n    /**\n     * @param {ProtectedHeaderMap} protected_\n     * @param {HeaderMap} unprotected_\n     * @returns {Headers}\n     */\n    static new(protected_, unprotected_) {\n        _assertClass(protected_, ProtectedHeaderMap);\n        _assertClass(unprotected_, HeaderMap);\n        var ret = wasm.headers_new(protected_.ptr, unprotected_.ptr);\n        return Headers.__wrap(ret);\n    }\n}\n/** */\nexport class Int {\n    static __wrap(ptr) {\n        const obj = Object.create(Int.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_int_free(ptr);\n    }\n    /**\n     * @param {BigNum} x\n     * @returns {Int}\n     */\n    static new(x) {\n        _assertClass(x, BigNum);\n        var ptr0 = x.ptr;\n        x.ptr = 0;\n        var ret = wasm.int_new(ptr0);\n        return Int.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} x\n     * @returns {Int}\n     */\n    static new_negative(x) {\n        _assertClass(x, BigNum);\n        var ptr0 = x.ptr;\n        x.ptr = 0;\n        var ret = wasm.int_new_negative(ptr0);\n        return Int.__wrap(ret);\n    }\n    /**\n     * @param {number} x\n     * @returns {Int}\n     */\n    static new_i32(x) {\n        var ret = wasm.int_new_i32(x);\n        return Int.__wrap(ret);\n    }\n    /**\n     * @returns {boolean}\n     */\n    is_positive() {\n        var ret = wasm.int_is_positive(this.ptr);\n        return ret !== 0;\n    }\n    /**\n     * @returns {BigNum | undefined}\n     */\n    as_positive() {\n        var ret = wasm.int_as_positive(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {BigNum | undefined}\n     */\n    as_negative() {\n        var ret = wasm.int_as_negative(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {number | undefined}\n     */\n    as_i32() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.int_as_i32(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/** */\nexport class Label {\n    static __wrap(ptr) {\n        const obj = Object.create(Label.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_label_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.label_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Label}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.label_from_bytes(ptr0, len0);\n        return Label.__wrap(ret);\n    }\n    /**\n     * @param {Int} int\n     * @returns {Label}\n     */\n    static new_int(int) {\n        _assertClass(int, Int);\n        var ret = wasm.label_new_int(int.ptr);\n        return Label.__wrap(ret);\n    }\n    /**\n     * @param {string} text\n     * @returns {Label}\n     */\n    static new_text(text) {\n        var ptr0 = passStringToWasm0(text, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.label_new_text(ptr0, len0);\n        return Label.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    kind() {\n        var ret = wasm.label_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {Int | undefined}\n     */\n    as_int() {\n        var ret = wasm.label_as_int(this.ptr);\n        return ret === 0 ? undefined : Int.__wrap(ret);\n    }\n    /**\n     * @returns {string | undefined}\n     */\n    as_text() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.label_as_text(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} id\n     * @returns {Label}\n     */\n    static from_algorithm_id(id) {\n        var ret = wasm.label_from_algorithm_id(id);\n        return Label.__wrap(ret);\n    }\n    /**\n     * @param {number} key_type\n     * @returns {Label}\n     */\n    static from_key_type(key_type) {\n        var ret = wasm.label_from_key_type(key_type);\n        return Label.__wrap(ret);\n    }\n    /**\n     * @param {number} ec_key\n     * @returns {Label}\n     */\n    static from_ec_key(ec_key) {\n        var ret = wasm.label_from_ec_key(ec_key);\n        return Label.__wrap(ret);\n    }\n    /**\n     * @param {number} curve_type\n     * @returns {Label}\n     */\n    static from_curve_type(curve_type) {\n        var ret = wasm.label_from_curve_type(curve_type);\n        return Label.__wrap(ret);\n    }\n    /**\n     * @param {number} key_op\n     * @returns {Label}\n     */\n    static from_key_operation(key_op) {\n        var ret = wasm.label_from_key_operation(key_op);\n        return Label.__wrap(ret);\n    }\n}\n/** */\nexport class Labels {\n    static __wrap(ptr) {\n        const obj = Object.create(Labels.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_labels_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.labels_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Labels}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.labels_from_bytes(ptr0, len0);\n        return Labels.__wrap(ret);\n    }\n    /**\n     * @returns {Labels}\n     */\n    static new() {\n        var ret = wasm.coserecipients_new();\n        return Labels.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.coserecipients_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {Label}\n     */\n    get(index) {\n        var ret = wasm.labels_get(this.ptr, index);\n        return Label.__wrap(ret);\n    }\n    /**\n     * @param {Label} elem\n     */\n    add(elem) {\n        _assertClass(elem, Label);\n        wasm.labels_add(this.ptr, elem.ptr);\n    }\n}\n/** */\nexport class PasswordEncryption {\n    static __wrap(ptr) {\n        const obj = Object.create(PasswordEncryption.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_passwordencryption_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.passwordencryption_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {PasswordEncryption}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.passwordencryption_from_bytes(ptr0, len0);\n        return PasswordEncryption.__wrap(ret);\n    }\n    /**\n     * @param {COSEEncrypt0} data\n     * @returns {PasswordEncryption}\n     */\n    static new(data) {\n        _assertClass(data, COSEEncrypt0);\n        var ret = wasm.passwordencryption_new(data.ptr);\n        return PasswordEncryption.__wrap(ret);\n    }\n}\n/** */\nexport class ProtectedHeaderMap {\n    static __wrap(ptr) {\n        const obj = Object.create(ProtectedHeaderMap.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_protectedheadermap_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.protectedheadermap_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {ProtectedHeaderMap}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.protectedheadermap_from_bytes(ptr0, len0);\n        return ProtectedHeaderMap.__wrap(ret);\n    }\n    /**\n     * @returns {ProtectedHeaderMap}\n     */\n    static new_empty() {\n        var ret = wasm.protectedheadermap_new_empty();\n        return ProtectedHeaderMap.__wrap(ret);\n    }\n    /**\n     * @param {HeaderMap} header_map\n     * @returns {ProtectedHeaderMap}\n     */\n    static new(header_map) {\n        _assertClass(header_map, HeaderMap);\n        var ret = wasm.protectedheadermap_new(header_map.ptr);\n        return ProtectedHeaderMap.__wrap(ret);\n    }\n    /**\n     * @returns {HeaderMap}\n     */\n    deserialized_headers() {\n        var ret = wasm.protectedheadermap_deserialized_headers(this.ptr);\n        return HeaderMap.__wrap(ret);\n    }\n}\n/** */\nexport class PubKeyEncryption {\n    static __wrap(ptr) {\n        const obj = Object.create(PubKeyEncryption.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_pubkeyencryption_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.pubkeyencryption_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {PubKeyEncryption}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.pubkeyencryption_from_bytes(ptr0, len0);\n        return PubKeyEncryption.__wrap(ret);\n    }\n    /**\n     * @param {COSEEncrypt} data\n     * @returns {PubKeyEncryption}\n     */\n    static new(data) {\n        _assertClass(data, COSEEncrypt);\n        var ret = wasm.pubkeyencryption_new(data.ptr);\n        return PubKeyEncryption.__wrap(ret);\n    }\n}\n/** */\nexport class SigStructure {\n    static __wrap(ptr) {\n        const obj = Object.create(SigStructure.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_sigstructure_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.sigstructure_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {SigStructure}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.sigstructure_from_bytes(ptr0, len0);\n        return SigStructure.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    context() {\n        var ret = wasm.sigstructure_context(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {ProtectedHeaderMap}\n     */\n    body_protected() {\n        var ret = wasm.sigstructure_body_protected(this.ptr);\n        return ProtectedHeaderMap.__wrap(ret);\n    }\n    /**\n     * @returns {ProtectedHeaderMap | undefined}\n     */\n    sign_protected() {\n        var ret = wasm.sigstructure_sign_protected(this.ptr);\n        return ret === 0 ? undefined : ProtectedHeaderMap.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    external_aad() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.sigstructure_external_aad(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    payload() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.sigstructure_payload(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {ProtectedHeaderMap} sign_protected\n     */\n    set_sign_protected(sign_protected) {\n        _assertClass(sign_protected, ProtectedHeaderMap);\n        wasm.sigstructure_set_sign_protected(this.ptr, sign_protected.ptr);\n    }\n    /**\n     * @param {number} context\n     * @param {ProtectedHeaderMap} body_protected\n     * @param {Uint8Array} external_aad\n     * @param {Uint8Array} payload\n     * @returns {SigStructure}\n     */\n    static new(context, body_protected, external_aad, payload) {\n        _assertClass(body_protected, ProtectedHeaderMap);\n        var ptr0 = passArray8ToWasm0(external_aad, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = passArray8ToWasm0(payload, wasm.__wbindgen_malloc);\n        var len1 = WASM_VECTOR_LEN;\n        var ret = wasm.sigstructure_new(context, body_protected.ptr, ptr0, len0, ptr1, len1);\n        return SigStructure.__wrap(ret);\n    }\n}\n/** */\nexport class SignedMessage {\n    static __wrap(ptr) {\n        const obj = Object.create(SignedMessage.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signedmessage_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.signedmessage_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {SignedMessage}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.signedmessage_from_bytes(ptr0, len0);\n        return SignedMessage.__wrap(ret);\n    }\n    /**\n     * @param {COSESign} cose_sign\n     * @returns {SignedMessage}\n     */\n    static new_cose_sign(cose_sign) {\n        _assertClass(cose_sign, COSESign);\n        var ret = wasm.signedmessage_new_cose_sign(cose_sign.ptr);\n        return SignedMessage.__wrap(ret);\n    }\n    /**\n     * @param {COSESign1} cose_sign1\n     * @returns {SignedMessage}\n     */\n    static new_cose_sign1(cose_sign1) {\n        _assertClass(cose_sign1, COSESign1);\n        var ret = wasm.signedmessage_new_cose_sign1(cose_sign1.ptr);\n        return SignedMessage.__wrap(ret);\n    }\n    /**\n     * @param {string} s\n     * @returns {SignedMessage}\n     */\n    static from_user_facing_encoding(s) {\n        var ptr0 = passStringToWasm0(s, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.signedmessage_from_user_facing_encoding(ptr0, len0);\n        return SignedMessage.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_user_facing_encoding() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.signedmessage_to_user_facing_encoding(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {number}\n     */\n    kind() {\n        var ret = wasm.signedmessage_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {COSESign | undefined}\n     */\n    as_cose_sign() {\n        var ret = wasm.signedmessage_as_cose_sign(this.ptr);\n        return ret === 0 ? undefined : COSESign.__wrap(ret);\n    }\n    /**\n     * @returns {COSESign1 | undefined}\n     */\n    as_cose_sign1() {\n        var ret = wasm.signedmessage_as_cose_sign1(this.ptr);\n        return ret === 0 ? undefined : COSESign1.__wrap(ret);\n    }\n}\n/** */\nexport class TaggedCBOR {\n    static __wrap(ptr) {\n        const obj = Object.create(TaggedCBOR.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_taggedcbor_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.taggedcbor_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TaggedCBOR}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.taggedcbor_from_bytes(ptr0, len0);\n        return TaggedCBOR.__wrap(ret);\n    }\n    /**\n     * @returns {BigNum}\n     */\n    tag() {\n        var ret = wasm.taggedcbor_tag(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {CBORValue}\n     */\n    value() {\n        var ret = wasm.taggedcbor_value(this.ptr);\n        return CBORValue.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} tag\n     * @param {CBORValue} value\n     * @returns {TaggedCBOR}\n     */\n    static new(tag, value) {\n        _assertClass(tag, BigNum);\n        var ptr0 = tag.ptr;\n        tag.ptr = 0;\n        _assertClass(value, CBORValue);\n        var ret = wasm.taggedcbor_new(ptr0, value.ptr);\n        return TaggedCBOR.__wrap(ret);\n    }\n}\nasync function load(module, imports) {\n    if (typeof Response === \"function\" && module instanceof Response) {\n        if (typeof WebAssembly.instantiateStreaming === \"function\") {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n            }\n            catch (e) {\n                if (module.headers.get(\"Content-Type\") != \"application/wasm\") {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n                }\n                else {\n                    throw e;\n                }\n            }\n        }\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n    }\n    else {\n        const instance = await WebAssembly.instantiate(module, imports);\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module };\n        }\n        else {\n            return instance;\n        }\n    }\n}\nasync function init(input) {\n    if (typeof input === \"undefined\") {\n        input = new URL(\"cardano_message_signing_bg.wasm\", import.meta.url);\n    }\n    const imports = {};\n    imports.wbg = {};\n    imports.wbg.__wbindgen_object_drop_ref = function (arg0) {\n        takeObject(arg0);\n    };\n    imports.wbg.__wbindgen_string_new = function (arg0, arg1) {\n        var ret = getStringFromWasm0(arg0, arg1);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_debug_string = function (arg0, arg1) {\n        var ret = debugString(getObject(arg1));\n        var ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len0;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n    };\n    imports.wbg.__wbindgen_throw = function (arg0, arg1) {\n        throw new Error(getStringFromWasm0(arg0, arg1));\n    };\n    imports.wbg.__wbindgen_rethrow = function (arg0) {\n        throw takeObject(arg0);\n    };\n    if (typeof input === \"string\" ||\n        (typeof Request === \"function\" && input instanceof Request) ||\n        (typeof URL === \"function\" && input instanceof URL)) {\n        input = fetch(input);\n    }\n    const { instance, module } = await load(await input, imports);\n    wasm = instance.exports;\n    init.__wbindgen_wasm_module = module;\n    return wasm;\n}\nexport default init;\n"],"names":["wasm","heap","getObject","idx","heap_next","dropObject","takeObject","ret","cachedTextDecoder","cachegetUint8Memory0","getUint8Memory0","getStringFromWasm0","ptr","len","addHeapObject","obj","debugString","val","type","description","name","length","debug","i","builtInMatches","className","WASM_VECTOR_LEN","cachedTextEncoder","encodeString","arg","view","buf","passStringToWasm0","malloc","realloc","mem","offset","code","cachegetInt32Memory0","getInt32Memory0","getArrayU8FromWasm0","passArray8ToWasm0","_assertClass","instance","klass","isLikeNone","x","cachegetFloat64Memory0","getFloat64Memory0","LabelKind","SignedMessageKind","SigContext","CBORSpecialType","CBORValueKind","AlgorithmId","KeyType","ECKey","CurveType","KeyOperation","BigNum","retptr","r0","r1","v0","bytes","ptr0","len0","string","other","CBORArray","index","CBORValue","elem","use_definite","CBORObject","key","value","CBORSpecial","b","u","int","Int","text","arr","tagged","TaggedCBOR","special","label","Label","COSEEncrypt","Headers","COSERecipients","headers","ciphertext","recipients","COSEEncrypt0","COSEKey","key_type","key_id","algorithm_id","key_ops","Labels","base_init_vector","COSERecipient","COSESign","COSESignatures","payload","signatures","COSESign1","external_aad","external_payload","ptr1","len1","SigStructure","signature","COSESign1Builder","is_payload_external","signed_sig_structure","COSESignBuilder","COSESignature","CounterSignature","cose_signature","cose_signatures","EdDSA25519Key","pubkey_bytes","private_key_bytes","HeaderMap","criticality","content_type","init_vector","partial_init_vector","counter_signature","ProtectedHeaderMap","protected_","unprotected_","id","ec_key","curve_type","key_op","PasswordEncryption","data","header_map","PubKeyEncryption","sign_protected","context","body_protected","SignedMessage","cose_sign","cose_sign1","s","tag","load","module","imports","e","init","input","arg0","arg1"],"mappings":"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"}